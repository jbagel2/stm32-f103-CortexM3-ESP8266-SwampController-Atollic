
SwampControllerBaseV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d00  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08004e10  08004e10  00014e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000dc  20000000  080051b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006fc  200000dc  08005294  000200dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200007d8  08005294  000207d8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000628d  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001930  00000000  00000000  00026392  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000828  00000000  00000000  00027cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  000284f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003449  00000000  00000000  00028c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027d7  00000000  00000000  0002c049  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002e820  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002824  00000000  00000000  0002e8a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000dc 	.word	0x200000dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004df8 	.word	0x08004df8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e0 	.word	0x200000e0
 800014c:	08004df8 	.word	0x08004df8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f092 0f00 	teq	r2, #0
 800045e:	bf14      	ite	ne
 8000460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 7460 	mov.w	r4, #896	; 0x380
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000474:	e720      	b.n	80002b8 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_ul2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f04f 0500 	mov.w	r5, #0
 8000486:	e00a      	b.n	800049e <__aeabi_l2d+0x16>

08000488 <__aeabi_l2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000496:	d502      	bpl.n	800049e <__aeabi_l2d+0x16>
 8000498:	4240      	negs	r0, r0
 800049a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004aa:	f43f aedc 	beq.w	8000266 <__adddf3+0xe6>
 80004ae:	f04f 0203 	mov.w	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004c6:	f1c2 0320 	rsb	r3, r2, #32
 80004ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004d6:	ea40 000e 	orr.w	r0, r0, lr
 80004da:	fa21 f102 	lsr.w	r1, r1, r2
 80004de:	4414      	add	r4, r2
 80004e0:	e6c1      	b.n	8000266 <__adddf3+0xe6>
 80004e2:	bf00      	nop

080004e4 <__aeabi_dmul>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f2:	bf1d      	ittte	ne
 80004f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f8:	ea94 0f0c 	teqne	r4, ip
 80004fc:	ea95 0f0c 	teqne	r5, ip
 8000500:	f000 f8de 	bleq	80006c0 <__aeabi_dmul+0x1dc>
 8000504:	442c      	add	r4, r5
 8000506:	ea81 0603 	eor.w	r6, r1, r3
 800050a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800050e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000516:	bf18      	it	ne
 8000518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800051c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000524:	d038      	beq.n	8000598 <__aeabi_dmul+0xb4>
 8000526:	fba0 ce02 	umull	ip, lr, r0, r2
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000536:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053a:	f04f 0600 	mov.w	r6, #0
 800053e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000542:	f09c 0f00 	teq	ip, #0
 8000546:	bf18      	it	ne
 8000548:	f04e 0e01 	orrne.w	lr, lr, #1
 800054c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000558:	d204      	bcs.n	8000564 <__aeabi_dmul+0x80>
 800055a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800055e:	416d      	adcs	r5, r5
 8000560:	eb46 0606 	adc.w	r6, r6, r6
 8000564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800056c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800057c:	bf88      	it	hi
 800057e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000582:	d81e      	bhi.n	80005c2 <__aeabi_dmul+0xde>
 8000584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800059c:	ea46 0101 	orr.w	r1, r6, r1
 80005a0:	ea40 0002 	orr.w	r0, r0, r2
 80005a4:	ea81 0103 	eor.w	r1, r1, r3
 80005a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005ac:	bfc2      	ittt	gt
 80005ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005b6:	bd70      	popgt	{r4, r5, r6, pc}
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f04f 0e00 	mov.w	lr, #0
 80005c0:	3c01      	subs	r4, #1
 80005c2:	f300 80ab 	bgt.w	800071c <__aeabi_dmul+0x238>
 80005c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ca:	bfde      	ittt	le
 80005cc:	2000      	movle	r0, #0
 80005ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd70      	pople	{r4, r5, r6, pc}
 80005d4:	f1c4 0400 	rsb	r4, r4, #0
 80005d8:	3c20      	subs	r4, #32
 80005da:	da35      	bge.n	8000648 <__aeabi_dmul+0x164>
 80005dc:	340c      	adds	r4, #12
 80005de:	dc1b      	bgt.n	8000618 <__aeabi_dmul+0x134>
 80005e0:	f104 0414 	add.w	r4, r4, #20
 80005e4:	f1c4 0520 	rsb	r5, r4, #32
 80005e8:	fa00 f305 	lsl.w	r3, r0, r5
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f205 	lsl.w	r2, r1, r5
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000604:	fa21 f604 	lsr.w	r6, r1, r4
 8000608:	eb42 0106 	adc.w	r1, r2, r6
 800060c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000610:	bf08      	it	eq
 8000612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f1c4 040c 	rsb	r4, r4, #12
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f304 	lsl.w	r3, r0, r4
 8000624:	fa20 f005 	lsr.w	r0, r0, r5
 8000628:	fa01 f204 	lsl.w	r2, r1, r4
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000638:	f141 0100 	adc.w	r1, r1, #0
 800063c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000640:	bf08      	it	eq
 8000642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f205 	lsl.w	r2, r0, r5
 8000650:	ea4e 0e02 	orr.w	lr, lr, r2
 8000654:	fa20 f304 	lsr.w	r3, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea43 0302 	orr.w	r3, r3, r2
 8000660:	fa21 f004 	lsr.w	r0, r1, r4
 8000664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000668:	fa21 f204 	lsr.w	r2, r1, r4
 800066c:	ea20 0002 	bic.w	r0, r0, r2
 8000670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f094 0f00 	teq	r4, #0
 8000684:	d10f      	bne.n	80006a6 <__aeabi_dmul+0x1c2>
 8000686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068a:	0040      	lsls	r0, r0, #1
 800068c:	eb41 0101 	adc.w	r1, r1, r1
 8000690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3c01      	subeq	r4, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1a6>
 800069a:	ea41 0106 	orr.w	r1, r1, r6
 800069e:	f095 0f00 	teq	r5, #0
 80006a2:	bf18      	it	ne
 80006a4:	4770      	bxne	lr
 80006a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	eb43 0303 	adc.w	r3, r3, r3
 80006b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b4:	bf08      	it	eq
 80006b6:	3d01      	subeq	r5, #1
 80006b8:	d0f7      	beq.n	80006aa <__aeabi_dmul+0x1c6>
 80006ba:	ea43 0306 	orr.w	r3, r3, r6
 80006be:	4770      	bx	lr
 80006c0:	ea94 0f0c 	teq	r4, ip
 80006c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c8:	bf18      	it	ne
 80006ca:	ea95 0f0c 	teqne	r5, ip
 80006ce:	d00c      	beq.n	80006ea <__aeabi_dmul+0x206>
 80006d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d4:	bf18      	it	ne
 80006d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006da:	d1d1      	bne.n	8000680 <__aeabi_dmul+0x19c>
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ee:	bf06      	itte	eq
 80006f0:	4610      	moveq	r0, r2
 80006f2:	4619      	moveq	r1, r3
 80006f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f8:	d019      	beq.n	800072e <__aeabi_dmul+0x24a>
 80006fa:	ea94 0f0c 	teq	r4, ip
 80006fe:	d102      	bne.n	8000706 <__aeabi_dmul+0x222>
 8000700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000704:	d113      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000706:	ea95 0f0c 	teq	r5, ip
 800070a:	d105      	bne.n	8000718 <__aeabi_dmul+0x234>
 800070c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000710:	bf1c      	itt	ne
 8000712:	4610      	movne	r0, r2
 8000714:	4619      	movne	r1, r3
 8000716:	d10a      	bne.n	800072e <__aeabi_dmul+0x24a>
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000736:	bd70      	pop	{r4, r5, r6, pc}

08000738 <__aeabi_ddiv>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800073e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000746:	bf1d      	ittte	ne
 8000748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800074c:	ea94 0f0c 	teqne	r4, ip
 8000750:	ea95 0f0c 	teqne	r5, ip
 8000754:	f000 f8a7 	bleq	80008a6 <__aeabi_ddiv+0x16e>
 8000758:	eba4 0405 	sub.w	r4, r4, r5
 800075c:	ea81 0e03 	eor.w	lr, r1, r3
 8000760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000768:	f000 8088 	beq.w	800087c <__aeabi_ddiv+0x144>
 800076c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800077c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000788:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800078c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000790:	429d      	cmp	r5, r3
 8000792:	bf08      	it	eq
 8000794:	4296      	cmpeq	r6, r2
 8000796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800079e:	d202      	bcs.n	80007a6 <__aeabi_ddiv+0x6e>
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	1ab6      	subs	r6, r6, r2
 80007a8:	eb65 0503 	sbc.w	r5, r5, r3
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80007be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c2:	bf22      	ittt	cs
 80007c4:	1ab6      	subcs	r6, r6, r2
 80007c6:	4675      	movcs	r5, lr
 80007c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000814:	ea55 0e06 	orrs.w	lr, r5, r6
 8000818:	d018      	beq.n	800084c <__aeabi_ddiv+0x114>
 800081a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800081e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000822:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800082e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000836:	d1c0      	bne.n	80007ba <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	d10b      	bne.n	8000856 <__aeabi_ddiv+0x11e>
 800083e:	ea41 0100 	orr.w	r1, r1, r0
 8000842:	f04f 0000 	mov.w	r0, #0
 8000846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084a:	e7b6      	b.n	80007ba <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	bf04      	itt	eq
 8000852:	4301      	orreq	r1, r0
 8000854:	2000      	moveq	r0, #0
 8000856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085a:	bf88      	it	hi
 800085c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000860:	f63f aeaf 	bhi.w	80005c2 <__aeabi_dmul+0xde>
 8000864:	ebb5 0c03 	subs.w	ip, r5, r3
 8000868:	bf04      	itt	eq
 800086a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800086e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000872:	f150 0000 	adcs.w	r0, r0, #0
 8000876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000888:	bfc2      	ittt	gt
 800088a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800088e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000892:	bd70      	popgt	{r4, r5, r6, pc}
 8000894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000898:	f04f 0e00 	mov.w	lr, #0
 800089c:	3c01      	subs	r4, #1
 800089e:	e690      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a0:	ea45 0e06 	orr.w	lr, r5, r6
 80008a4:	e68d      	b.n	80005c2 <__aeabi_dmul+0xde>
 80008a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008aa:	ea94 0f0c 	teq	r4, ip
 80008ae:	bf08      	it	eq
 80008b0:	ea95 0f0c 	teqeq	r5, ip
 80008b4:	f43f af3b 	beq.w	800072e <__aeabi_dmul+0x24a>
 80008b8:	ea94 0f0c 	teq	r4, ip
 80008bc:	d10a      	bne.n	80008d4 <__aeabi_ddiv+0x19c>
 80008be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c2:	f47f af34 	bne.w	800072e <__aeabi_dmul+0x24a>
 80008c6:	ea95 0f0c 	teq	r5, ip
 80008ca:	f47f af25 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e72c      	b.n	800072e <__aeabi_dmul+0x24a>
 80008d4:	ea95 0f0c 	teq	r5, ip
 80008d8:	d106      	bne.n	80008e8 <__aeabi_ddiv+0x1b0>
 80008da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008de:	f43f aefd 	beq.w	80006dc <__aeabi_dmul+0x1f8>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e722      	b.n	800072e <__aeabi_dmul+0x24a>
 80008e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ec:	bf18      	it	ne
 80008ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f2:	f47f aec5 	bne.w	8000680 <__aeabi_dmul+0x19c>
 80008f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fa:	f47f af0d 	bne.w	8000718 <__aeabi_dmul+0x234>
 80008fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000902:	f47f aeeb 	bne.w	80006dc <__aeabi_dmul+0x1f8>
 8000906:	e712      	b.n	800072e <__aeabi_dmul+0x24a>

08000908 <__gedf2>:
 8000908:	f04f 3cff 	mov.w	ip, #4294967295
 800090c:	e006      	b.n	800091c <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__ledf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	e002      	b.n	800091c <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__cmpdf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800092c:	bf18      	it	ne
 800092e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000932:	d01b      	beq.n	800096c <__cmpdf2+0x54>
 8000934:	b001      	add	sp, #4
 8000936:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093a:	bf0c      	ite	eq
 800093c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000940:	ea91 0f03 	teqne	r1, r3
 8000944:	bf02      	ittt	eq
 8000946:	ea90 0f02 	teqeq	r0, r2
 800094a:	2000      	moveq	r0, #0
 800094c:	4770      	bxeq	lr
 800094e:	f110 0f00 	cmn.w	r0, #0
 8000952:	ea91 0f03 	teq	r1, r3
 8000956:	bf58      	it	pl
 8000958:	4299      	cmppl	r1, r3
 800095a:	bf08      	it	eq
 800095c:	4290      	cmpeq	r0, r2
 800095e:	bf2c      	ite	cs
 8000960:	17d8      	asrcs	r0, r3, #31
 8000962:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000966:	f040 0001 	orr.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d102      	bne.n	800097c <__cmpdf2+0x64>
 8000976:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097a:	d107      	bne.n	800098c <__cmpdf2+0x74>
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	d1d6      	bne.n	8000934 <__cmpdf2+0x1c>
 8000986:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098a:	d0d3      	beq.n	8000934 <__cmpdf2+0x1c>
 800098c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_cdrcmple>:
 8000994:	4684      	mov	ip, r0
 8000996:	4610      	mov	r0, r2
 8000998:	4662      	mov	r2, ip
 800099a:	468c      	mov	ip, r1
 800099c:	4619      	mov	r1, r3
 800099e:	4663      	mov	r3, ip
 80009a0:	e000      	b.n	80009a4 <__aeabi_cdcmpeq>
 80009a2:	bf00      	nop

080009a4 <__aeabi_cdcmpeq>:
 80009a4:	b501      	push	{r0, lr}
 80009a6:	f7ff ffb7 	bl	8000918 <__cmpdf2>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	bf48      	it	mi
 80009ae:	f110 0f00 	cmnmi.w	r0, #0
 80009b2:	bd01      	pop	{r0, pc}

080009b4 <__aeabi_dcmpeq>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff fff4 	bl	80009a4 <__aeabi_cdcmpeq>
 80009bc:	bf0c      	ite	eq
 80009be:	2001      	moveq	r0, #1
 80009c0:	2000      	movne	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmplt>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffea 	bl	80009a4 <__aeabi_cdcmpeq>
 80009d0:	bf34      	ite	cc
 80009d2:	2001      	movcc	r0, #1
 80009d4:	2000      	movcs	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmple>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffe0 	bl	80009a4 <__aeabi_cdcmpeq>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpge>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffce 	bl	8000994 <__aeabi_cdrcmple>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpgt>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffc4 	bl	8000994 <__aeabi_cdrcmple>
 8000a0c:	bf34      	ite	cc
 8000a0e:	2001      	movcc	r0, #1
 8000a10:	2000      	movcs	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpun>:
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x10>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d10a      	bne.n	8000a3e <__aeabi_dcmpun+0x26>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__aeabi_dcmpun+0x20>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_dcmpun+0x26>
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0001 	mov.w	r0, #1
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2iz>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d215      	bcs.n	8000a7a <__aeabi_d2iz+0x36>
 8000a4e:	d511      	bpl.n	8000a74 <__aeabi_d2iz+0x30>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d912      	bls.n	8000a80 <__aeabi_d2iz+0x3c>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	bf18      	it	ne
 8000a70:	4240      	negne	r0, r0
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d105      	bne.n	8000a8c <__aeabi_d2iz+0x48>
 8000a80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	bf08      	it	eq
 8000a86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__gesf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295
 8000b38:	e006      	b.n	8000b48 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__lesf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpsf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpsf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5e:	d011      	beq.n	8000b84 <__cmpsf2+0x40>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b66:	bf18      	it	ne
 8000b68:	ea90 0f01 	teqne	r0, r1
 8000b6c:	bf58      	it	pl
 8000b6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b72:	bf88      	it	hi
 8000b74:	17c8      	asrhi	r0, r1, #31
 8000b76:	bf38      	it	cc
 8000b78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b7c:	bf18      	it	ne
 8000b7e:	f040 0001 	orrne.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	d102      	bne.n	8000b90 <__cmpsf2+0x4c>
 8000b8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b8e:	d105      	bne.n	8000b9c <__cmpsf2+0x58>
 8000b90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b94:	d1e4      	bne.n	8000b60 <__cmpsf2+0x1c>
 8000b96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b9a:	d0e1      	beq.n	8000b60 <__cmpsf2+0x1c>
 8000b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_cfrcmple>:
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4661      	mov	r1, ip
 8000baa:	e7ff      	b.n	8000bac <__aeabi_cfcmpeq>

08000bac <__aeabi_cfcmpeq>:
 8000bac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bae:	f7ff ffc9 	bl	8000b44 <__cmpsf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bbc <__aeabi_fcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cfcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cfcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_fcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cfcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffd2 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc8 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c24:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <SystemInit+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <SystemInit+0x5c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000c30:	4912      	ldr	r1, [pc, #72]	; (8000c7c <SystemInit+0x5c>)
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <SystemInit+0x5c>)
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <SystemInit+0x60>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <SystemInit+0x5c>)
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <SystemInit+0x5c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <SystemInit+0x5c>)
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <SystemInit+0x5c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c56:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000c58:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <SystemInit+0x5c>)
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <SystemInit+0x5c>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c62:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SystemInit+0x5c>)
 8000c66:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c6a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000c6c:	f000 f80c 	bl	8000c88 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SystemInit+0x64>)
 8000c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c76:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	f8ff0000 	.word	0xf8ff0000
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000c8c:	f000 f802 	bl	8000c94 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000ca2:	4a3a      	ldr	r2, [pc, #232]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000ca4:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cac:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000cae:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d103      	bne.n	8000ccc <SetSysClockTo72+0x38>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000cca:	d1f0      	bne.n	8000cae <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	e001      	b.n	8000ce2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d14b      	bne.n	8000d80 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000ce8:	4a29      	ldr	r2, [pc, #164]	; (8000d90 <SetSysClockTo72+0xfc>)
 8000cea:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <SetSysClockTo72+0xfc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000cf4:	4a26      	ldr	r2, [pc, #152]	; (8000d90 <SetSysClockTo72+0xfc>)
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <SetSysClockTo72+0xfc>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f023 0303 	bic.w	r3, r3, #3
 8000cfe:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000d00:	4a23      	ldr	r2, [pc, #140]	; (8000d90 <SetSysClockTo72+0xfc>)
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <SetSysClockTo72+0xfc>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000d0c:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000d14:	4a1d      	ldr	r2, [pc, #116]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d26:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000d28:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000d32:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000d34:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000d3e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d4a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000d4c:	bf00      	nop
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f9      	beq.n	8000d4e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f023 0303 	bic.w	r3, r3, #3
 8000d64:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000d66:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000d72:	bf00      	nop
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SetSysClockTo72+0xf8>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d1f9      	bne.n	8000d74 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40022000 	.word	0x40022000

08000d94 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000da4:	e7fe      	b.n	8000da4 <HardFault_Handler+0x4>
 8000da6:	bf00      	nop

08000da8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>
 8000dae:	bf00      	nop

08000db0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000db4:	e7fe      	b.n	8000db4 <BusFault_Handler+0x4>
 8000db6:	bf00      	nop

08000db8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>
 8000dbe:	bf00      	nop

08000dc0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000de8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dea:	e003      	b.n	8000df4 <LoopCopyDataInit>

08000dec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000dee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000df0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000df2:	3104      	adds	r1, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000df4:	480b      	ldr	r0, [pc, #44]	; (8000e24 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000df8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dfa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dfc:	d3f6      	bcc.n	8000dec <CopyDataInit>
	ldr	r2, =_sbss
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000e00:	e002      	b.n	8000e08 <LoopFillZerobss>

08000e02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e04:	f842 3b04 	str.w	r3, [r2], #4

08000e08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000e0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e0c:	d3f9      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e0e:	f7ff ff07 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f001 fe7b 	bl	8002b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e16:	f000 f80f 	bl	8000e38 <main>
	bx	lr
 8000e1a:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e1c:	20005000 	.word	0x20005000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000e20:	080051b8 	.word	0x080051b8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e28:	200000dc 	.word	0x200000dc
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000e2c:	200000dc 	.word	0x200000dc
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e30:	200007d8 	.word	0x200007d8

08000e34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC1_2_IRQHandler>
	...

08000e38 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0

	Configure_HSE_Clock();
 8000e3e:	f000 f879 	bl	8000f34 <Configure_HSE_Clock>
	//Init_Time(MILLISEC,64); //For HSI Clock
	Init_Time(MILLISEC,72);
 8000e42:	2148      	movs	r1, #72	; 0x48
 8000e44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e48:	f000 fa02 	bl	8001250 <Init_Time>
#ifdef DEBUG
	Debug_Enable();
	SetSystemClockOut();
#endif //"DEBUG"
	DHT22_Init();
 8000e4c:	f000 fcbc 	bl	80017c8 <DHT22_Init>
	ESP_Init_DMA_USART3(9600);
 8000e50:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000e54:	f000 faf0 	bl	8001438 <ESP_Init_DMA_USART3>
	ESP_On();
 8000e58:	f000 fb14 	bl	8001484 <ESP_On>

	ESP_SendCustomCommand_External_Wait("uart.setup(0, 9600, 8, uart.PARITY_NONE, uart.STOPBITS_1, 0)");
 8000e5c:	482d      	ldr	r0, [pc, #180]	; (8000f14 <main+0xdc>)
 8000e5e:	f000 fb2d 	bl	80014bc <ESP_SendCustomCommand_External_Wait>
	ESP_SendCustomCommand_External_Wait("dofile(\"test_init.lua\")");
 8000e62:	482d      	ldr	r0, [pc, #180]	; (8000f18 <main+0xe0>)
 8000e64:	f000 fb2a 	bl	80014bc <ESP_SendCustomCommand_External_Wait>

	Init_InstanceControls();
 8000e68:	f000 fa48 	bl	80012fc <Init_InstanceControls>

	StartRestService(80);
 8000e6c:	2050      	movs	r0, #80	; 0x50
 8000e6e:	f000 fc33 	bl	80016d8 <StartRestService>

while (1)
  {
	if((Millis() - lastDHT22update) >= DHT_UPDATE_INTERVAL)
 8000e72:	f000 fa2b 	bl	80012cc <Millis>
 8000e76:	4602      	mov	r2, r0
 8000e78:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <main+0xe4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d91e      	bls.n	8000ec4 <main+0x8c>
			{
				lastDHT22update = Millis();
 8000e86:	f000 fa21 	bl	80012cc <Millis>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <main+0xe4>)
 8000e8e:	601a      	str	r2, [r3, #0]
				DHT22_Start_Read(&Current_DHT22_Reading, &Previous_DHT22_Reading);
 8000e90:	4923      	ldr	r1, [pc, #140]	; (8000f20 <main+0xe8>)
 8000e92:	4824      	ldr	r0, [pc, #144]	; (8000f24 <main+0xec>)
 8000e94:	f000 fca2 	bl	80017dc <DHT22_Start_Read>
				if(Current_DHT22_Reading.Temp != 0 && Current_DHT22_Reading.CurrentPass == 1)
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <main+0xec>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f04f 0100 	mov.w	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe8b 	bl	8000bbc <__aeabi_fcmpeq>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10b      	bne.n	8000ec4 <main+0x8c>
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <main+0xec>)
 8000eae:	7c1b      	ldrb	r3, [r3, #16]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d107      	bne.n	8000ec4 <main+0x8c>
				{
					SaveTempHumid(Current_DHT22_Reading.Temp, Current_DHT22_Reading.Humid);
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <main+0xec>)
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <main+0xec>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	f000 fb58 	bl	8001574 <SaveTempHumid>
				}

			}
	if((Millis() - lastDMACheck) >= DMA_Rx_Buff_Poll_Int_ms)
 8000ec4:	f000 fa02 	bl	80012cc <Millis>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <main+0xf0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d9cc      	bls.n	8000e72 <main+0x3a>
		  {
			  lastDMACheck = Millis();
 8000ed8:	f000 f9f8 	bl	80012cc <Millis>
 8000edc:	4602      	mov	r2, r0
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <main+0xf0>)
 8000ee0:	601a      	str	r2, [r3, #0]
			  ESP_GetWaitingCommand_DMA();
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fb6f 	bl	80015c8 <ESP_GetWaitingCommand_DMA>
			  if(strcmp(current_request.Hash, "9") != 0)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <main+0xf4>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	4910      	ldr	r1, [pc, #64]	; (8000f30 <main+0xf8>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff f92d 	bl	8000150 <strcmp>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0ba      	beq.n	8000e72 <main+0x3a>
			  {
				  Set_PumpState(current_request);
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <main+0xf4>)
 8000efe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f02:	f000 fa03 	bl	800130c <Set_PumpState>
				  Set_Fan_State(current_request);
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <main+0xf4>)
 8000f08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f0c:	f000 fa1e 	bl	800134c <Set_Fan_State>
				  // TODO: process incoming zone:room for valve control
			  }

		  }
  }
 8000f10:	e7af      	b.n	8000e72 <main+0x3a>
 8000f12:	bf00      	nop
 8000f14:	08004e10 	.word	0x08004e10
 8000f18:	08004e50 	.word	0x08004e50
 8000f1c:	200000f8 	.word	0x200000f8
 8000f20:	20000340 	.word	0x20000340
 8000f24:	2000032c 	.word	0x2000032c
 8000f28:	200000fc 	.word	0x200000fc
 8000f2c:	20000358 	.word	0x20000358
 8000f30:	08004e68 	.word	0x08004e68

08000f34 <Configure_HSE_Clock>:

}

void Configure_HSE_Clock()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef clocks;
	RCC_GetClocksFreq(&clocks);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 f933 	bl	80021a8 <RCC_GetClocksFreq>

	RCC_DeInit();
 8000f42:	f001 f81b 	bl	8001f7c <RCC_DeInit>

	RCC_HSEConfig(RCC_HSE_ON);
 8000f46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f4a:	f001 f845 	bl	8001fd8 <RCC_HSEConfig>
	while(RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET) {}
 8000f4e:	bf00      	nop
 8000f50:	2031      	movs	r0, #49	; 0x31
 8000f52:	f001 fa33 	bl	80023bc <RCC_GetFlagStatus>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f9      	beq.n	8000f50 <Configure_HSE_Clock+0x1c>
	FLASH_SetLatency(FLASH_ACR_LATENCY_2);
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f001 fb7f 	bl	8002660 <FLASH_SetLatency>
	RCC_PLLConfig(RCC_PLLSource_HSE_Div1,RCC_CFGR_PLLMULL9);
 8000f62:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000f66:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f6a:	f001 f863 	bl	8002034 <RCC_PLLConfig>
	RCC_PLLCmd(ENABLE);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f001 f87e 	bl	8002070 <RCC_PLLCmd>
	while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET) {}
 8000f74:	bf00      	nop
 8000f76:	2039      	movs	r0, #57	; 0x39
 8000f78:	f001 fa20 	bl	80023bc <RCC_GetFlagStatus>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f9      	beq.n	8000f76 <Configure_HSE_Clock+0x42>
	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8000f82:	2002      	movs	r0, #2
 8000f84:	f001 f884 	bl	8002090 <RCC_SYSCLKConfig>

	RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f001 f89d 	bl	80020c8 <RCC_HCLKConfig>
	RCC_PCLK1Config(RCC_HCLK_Div2);
 8000f8e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f92:	f001 f8b5 	bl	8002100 <RCC_PCLK1Config>
	RCC_PCLK2Config(RCC_HCLK_Div1);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f001 f8ce 	bl	8002138 <RCC_PCLK2Config>
	RCC_ADCCLKConfig(RCC_PCLK2_Div2);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f001 f8e7 	bl	8002170 <RCC_ADCCLKConfig>

	RCC_GetClocksFreq(&clocks);
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 f8ff 	bl	80021a8 <RCC_GetClocksFreq>

}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop

08000fb4 <usart_Config_GPIO_static3>:
	Config_USART.GPIO_Pin = Active_USART.Tx_Pin;
	GPIO_Init(Active_USART.USART_GPIO, &Config_USART);
}

void usart_Config_GPIO_static3()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	Config_USART.GPIO_Speed = GPIO_Speed_2MHz;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <usart_Config_GPIO_static3+0x3c>)
 8000fba:	2202      	movs	r2, #2
 8000fbc:	709a      	strb	r2, [r3, #2]
	Config_USART.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <usart_Config_GPIO_static3+0x3c>)
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	70da      	strb	r2, [r3, #3]
	Config_USART.GPIO_Pin = GPIO_Pin_11;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <usart_Config_GPIO_static3+0x3c>)
 8000fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fca:	801a      	strh	r2, [r3, #0]
	GPIO_Init(USART3_PORT, &Config_USART); // Saves above configuration to associated registers
 8000fcc:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <usart_Config_GPIO_static3+0x3c>)
 8000fce:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <usart_Config_GPIO_static3+0x40>)
 8000fd0:	f001 fa2e 	bl	8002430 <GPIO_Init>

	//--------------------------------------------

	//For TX Pin ---------------------------------
	Config_USART.GPIO_Mode = GPIO_Mode_AF_PP; // Alternate Function Push-Pull
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <usart_Config_GPIO_static3+0x3c>)
 8000fd6:	2218      	movs	r2, #24
 8000fd8:	70da      	strb	r2, [r3, #3]
	Config_USART.GPIO_Pin = GPIO_Pin_10;
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <usart_Config_GPIO_static3+0x3c>)
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	801a      	strh	r2, [r3, #0]
	GPIO_Init(USART3_PORT, &Config_USART);
 8000fe2:	4903      	ldr	r1, [pc, #12]	; (8000ff0 <usart_Config_GPIO_static3+0x3c>)
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <usart_Config_GPIO_static3+0x40>)
 8000fe6:	f001 fa23 	bl	8002430 <GPIO_Init>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000384 	.word	0x20000384
 8000ff4:	40010c00 	.word	0x40010c00

08000ff8 <usart_Init_Periph>:
	//USART_ITConfig(this_usart->USART_Num,USART_IT_RXNE, ENABLE);

}

void usart_Init_Periph(USART_TypeDef *this_usart, uint32_t baud)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	USART_Full_Config.USART_BaudRate = baud;
 8001002:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <usart_Init_Periph+0x40>)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	6013      	str	r3, [r2, #0]
	USART_Full_Config.USART_WordLength = USART_WordLength_8b;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <usart_Init_Periph+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	809a      	strh	r2, [r3, #4]
	USART_Full_Config.USART_StopBits = USART_StopBits_1;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <usart_Init_Periph+0x40>)
 8001010:	2200      	movs	r2, #0
 8001012:	80da      	strh	r2, [r3, #6]
	USART_Full_Config.USART_Parity = USART_Parity_No;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <usart_Init_Periph+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	811a      	strh	r2, [r3, #8]
	USART_Full_Config.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <usart_Init_Periph+0x40>)
 800101c:	2200      	movs	r2, #0
 800101e:	819a      	strh	r2, [r3, #12]
	USART_Full_Config.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <usart_Init_Periph+0x40>)
 8001022:	220c      	movs	r2, #12
 8001024:	815a      	strh	r2, [r3, #10]
	USART_Init(this_usart, &USART_Full_Config);
 8001026:	4904      	ldr	r1, [pc, #16]	; (8001038 <usart_Init_Periph+0x40>)
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 fe33 	bl	8001c94 <USART_Init>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000374 	.word	0x20000374

0800103c <USART_Init_DMA3>:

void USART_Init_DMA3(uint32_t baud, volatile char DMA_RxBuffer[], uint16_t BufSize)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	4613      	mov	r3, r2
 8001048:	80fb      	strh	r3, [r7, #6]
	NVIC_InitTypeDef USART3_DMA_Interrupt_Config;
	//Clock Start
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 800104a:	2101      	movs	r1, #1
 800104c:	2001      	movs	r0, #1
 800104e:	f001 f95b 	bl	8002308 <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001052:	2101      	movs	r1, #1
 8001054:	2008      	movs	r0, #8
 8001056:	f001 f975 	bl	8002344 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 800105a:	2101      	movs	r1, #1
 800105c:	2001      	movs	r0, #1
 800105e:	f001 f971 	bl	8002344 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8001062:	2101      	movs	r1, #1
 8001064:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001068:	f001 f98a 	bl	8002380 <RCC_APB1PeriphClockCmd>

	//GPIO Config
	usart_Config_GPIO_static3();
 800106c:	f7ff ffa2 	bl	8000fb4 <usart_Config_GPIO_static3>

	DMA_ClearFlag(DMA1_FLAG_GL3 | DMA1_FLAG_HT3 | DMA1_FLAG_TC3 | DMA1_FLAG_TE3);
 8001070:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001074:	f001 fcca 	bl	8002a0c <DMA_ClearFlag>

	//USART Config
	usart_Init_Periph(USART3, baud);
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	4822      	ldr	r0, [pc, #136]	; (8001104 <USART_Init_DMA3+0xc8>)
 800107c:	f7ff ffbc 	bl	8000ff8 <usart_Init_Periph>
//	USART_Init(USART3, &USART3_Config);



	//DMA Config
	DMA_DeInit(DMA1_Channel3);
 8001080:	4821      	ldr	r0, [pc, #132]	; (8001108 <USART_Init_DMA3+0xcc>)
 8001082:	f001 fbad 	bl	80027e0 <DMA_DeInit>

	//USART3 DMA1 (RX Ch 3 | TX Ch 2 )
	DMA_InitTypeDef USART3_DMA_Config;
	USART3_DMA_Config.DMA_PeripheralBaseAddr = 0x40004804;
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <USART_Init_DMA3+0xd0>)
 8001088:	613b      	str	r3, [r7, #16]
	USART3_DMA_Config.DMA_MemoryBaseAddr = (uint32_t)DMA_RxBuffer;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	617b      	str	r3, [r7, #20]
	USART3_DMA_Config.DMA_DIR = DMA_DIR_PeripheralSRC;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
	USART3_DMA_Config.DMA_BufferSize = BufSize;
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	61fb      	str	r3, [r7, #28]
	USART3_DMA_Config.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
	USART3_DMA_Config.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
	USART3_DMA_Config.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
	USART3_DMA_Config.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART3_DMA_Config.DMA_Mode = DMA_Mode_Circular;
 80010a6:	2320      	movs	r3, #32
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
	USART3_DMA_Config.DMA_Priority = DMA_Priority_VeryHigh;
 80010aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
	USART3_DMA_Config.DMA_M2M = DMA_M2M_Disable;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38

	DMA_Init(DMA1_Channel3, &USART3_DMA_Config);
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4619      	mov	r1, r3
 80010ba:	4813      	ldr	r0, [pc, #76]	; (8001108 <USART_Init_DMA3+0xcc>)
 80010bc:	f001 fc4c 	bl	8002958 <DMA_Init>


	USART3_DMA_Interrupt_Config.NVIC_IRQChannel = DMA1_Channel3_IRQn;
 80010c0:	230d      	movs	r3, #13
 80010c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	USART3_DMA_Interrupt_Config.NVIC_IRQChannelCmd = ENABLE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	USART3_DMA_Interrupt_Config.NVIC_IRQChannelPreemptionPriority = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	USART3_DMA_Interrupt_Config.NVIC_IRQChannelSubPriority = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	NVIC_Init(&USART3_DMA_Interrupt_Config);
 80010d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fcaf 	bl	8002a40 <NVIC_Init>
	//NVIC_EnableIRQ(DMA1_Channel3_IRQn);


	DMA_Cmd(DMA1_Channel3,ENABLE);
 80010e2:	2101      	movs	r1, #1
 80010e4:	4808      	ldr	r0, [pc, #32]	; (8001108 <USART_Init_DMA3+0xcc>)
 80010e6:	f001 fc75 	bl	80029d4 <DMA_Cmd>

	USART_Cmd(USART3,ENABLE);
 80010ea:	2101      	movs	r1, #1
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <USART_Init_DMA3+0xc8>)
 80010ee:	f000 fe8b 	bl	8001e08 <USART_Cmd>

	//Init_USART3_Interrupt();



USART_DMACmd(USART3, USART_DMAReq_Rx, ENABLE);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2140      	movs	r1, #64	; 0x40
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <USART_Init_DMA3+0xc8>)
 80010f8:	f000 feee 	bl	8001ed8 <USART_DMACmd>
}
 80010fc:	bf00      	nop
 80010fe:	3740      	adds	r7, #64	; 0x40
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40004800 	.word	0x40004800
 8001108:	40020030 	.word	0x40020030
 800110c:	40004804 	.word	0x40004804

08001110 <DMA_Initialize>:

void DMA_Initialize(volatile char DMA_RxBuffer[], uint16_t BufSize)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	; 0x38
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
		NVIC_InitTypeDef USART3_DMA_Interrupt_Config;

		DMA_ClearFlag(DMA1_FLAG_GL3 | DMA1_FLAG_HT3 | DMA1_FLAG_TC3 | DMA1_FLAG_TE3);
 800111c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001120:	f001 fc74 	bl	8002a0c <DMA_ClearFlag>

		DMA_DeInit(DMA1_Channel3);
 8001124:	481c      	ldr	r0, [pc, #112]	; (8001198 <DMA_Initialize+0x88>)
 8001126:	f001 fb5b 	bl	80027e0 <DMA_DeInit>

		//USART3 DMA1 (RX Ch 3 | TX Ch 2 )
		DMA_InitTypeDef USART3_DMA_Config;
		USART3_DMA_Config.DMA_PeripheralBaseAddr = 0x40004804;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <DMA_Initialize+0x8c>)
 800112c:	60bb      	str	r3, [r7, #8]
		USART3_DMA_Config.DMA_MemoryBaseAddr = (uint32_t)DMA_RxBuffer;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]
		USART3_DMA_Config.DMA_DIR = DMA_DIR_PeripheralSRC;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
		USART3_DMA_Config.DMA_BufferSize = BufSize;
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	617b      	str	r3, [r7, #20]
		USART3_DMA_Config.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
		USART3_DMA_Config.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	61fb      	str	r3, [r7, #28]
		USART3_DMA_Config.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
		USART3_DMA_Config.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
		USART3_DMA_Config.DMA_Mode = DMA_Mode_Circular;
 800114a:	2320      	movs	r3, #32
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
		USART3_DMA_Config.DMA_Priority = DMA_Priority_VeryHigh;
 800114e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
		USART3_DMA_Config.DMA_M2M = DMA_M2M_Disable;
 8001154:	2300      	movs	r3, #0
 8001156:	633b      	str	r3, [r7, #48]	; 0x30

		DMA_Init(DMA1_Channel3, &USART3_DMA_Config);
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	480e      	ldr	r0, [pc, #56]	; (8001198 <DMA_Initialize+0x88>)
 8001160:	f001 fbfa 	bl	8002958 <DMA_Init>


		USART3_DMA_Interrupt_Config.NVIC_IRQChannel = DMA1_Channel3_IRQn;
 8001164:	230d      	movs	r3, #13
 8001166:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		USART3_DMA_Interrupt_Config.NVIC_IRQChannelCmd = ENABLE;
 800116a:	2301      	movs	r3, #1
 800116c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		USART3_DMA_Interrupt_Config.NVIC_IRQChannelPreemptionPriority = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		USART3_DMA_Interrupt_Config.NVIC_IRQChannelSubPriority = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		NVIC_Init(&USART3_DMA_Interrupt_Config);
 800117c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fc5d 	bl	8002a40 <NVIC_Init>
		//NVIC_EnableIRQ(DMA1_Channel3_IRQn);


		DMA_Cmd(DMA1_Channel3,ENABLE);
 8001186:	2101      	movs	r1, #1
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <DMA_Initialize+0x88>)
 800118a:	f001 fc23 	bl	80029d4 <DMA_Cmd>
}
 800118e:	bf00      	nop
 8001190:	3738      	adds	r7, #56	; 0x38
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020030 	.word	0x40020030
 800119c:	40004804 	.word	0x40004804

080011a0 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0

//	if(USART_GetITStatus(USART3, USART_IT_TC) != RESET)
//	   {
//		USART_ClearFlag(USART3, USART_FLAG_TC);
//	   }
	USART_ITConfig(USART3,USART_IT_TXE, DISABLE);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f240 7127 	movw	r1, #1831	; 0x727
 80011aa:	4802      	ldr	r0, [pc, #8]	; (80011b4 <USART3_IRQHandler+0x14>)
 80011ac:	f000 fe4c 	bl	8001e48 <USART_ITConfig>

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40004800 	.word	0x40004800

080011b8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da0b      	bge.n	80011e4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80011cc:	490d      	ldr	r1, [pc, #52]	; (8001204 <NVIC_SetPriority+0x4c>)
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	3b04      	subs	r3, #4
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80011e2:	e009      	b.n	80011f8 <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80011e4:	4908      	ldr	r1, [pc, #32]	; (8001208 <NVIC_SetPriority+0x50>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00
 8001208:	e000e100 	.word	0xe000e100

0800120c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800121a:	d301      	bcc.n	8001220 <SysTick_Config+0x14>
 800121c:	2301      	movs	r3, #1
 800121e:	e011      	b.n	8001244 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Config+0x40>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001228:	3b01      	subs	r3, #1
 800122a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800122c:	210f      	movs	r1, #15
 800122e:	f04f 30ff 	mov.w	r0, #4294967295
 8001232:	f7ff ffc1 	bl	80011b8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x40>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <SysTick_Config+0x40>)
 800123e:	2207      	movs	r2, #7
 8001240:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	e000e010 	.word	0xe000e010

08001250 <Init_Time>:
volatile uint32_t millis = 0;
uint32_t micros = 0;
uint8_t freqMhz = 72;

void Init_Time(Time_Resolution res, uint32_t clockMhz)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	freqMhz = clockMhz;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <Init_Time+0x34>)
 8001260:	701a      	strb	r2, [r3, #0]
SysTick_Config((SystemCoreClock/res));
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <Init_Time+0x38>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	fbb2 f3f3 	udiv	r3, r2, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ffcd 	bl	800120c <SysTick_Config>

//Just making sure that the Systick Interrupt is top priority
//Or the timer wont be accurate
NVIC_SetPriority(SysTick_IRQn, 0);
 8001272:	2100      	movs	r1, #0
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff9e 	bl	80011b8 <NVIC_SetPriority>

}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000004 	.word	0x20000004
 8001288:	20000000 	.word	0x20000000

0800128c <Micros>:

}
*/

uint32_t Micros()
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	micros = millis * 1000 + 1000 - SysTick->VAL / freqMhz;
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <Micros+0x30>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800129a:	fb02 f203 	mul.w	r2, r2, r3
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <Micros+0x34>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <Micros+0x38>)
 80012a4:	7809      	ldrb	r1, [r1, #0]
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <Micros+0x3c>)
 80012ae:	6013      	str	r3, [r2, #0]
	return micros;
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <Micros+0x3c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000100 	.word	0x20000100
 80012c0:	e000e010 	.word	0xe000e010
 80012c4:	20000004 	.word	0x20000004
 80012c8:	20000104 	.word	0x20000104

080012cc <Millis>:

uint32_t Millis()
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
return millis;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <Millis+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000100 	.word	0x20000100

080012e0 <SysTick_Handler>:

void SysTick_Handler()
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	millis++;
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Handler+0x18>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a03      	ldr	r2, [pc, #12]	; (80012f8 <SysTick_Handler+0x18>)
 80012ec:	6013      	str	r3, [r2, #0]
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000100 	.word	0x20000100

080012fc <Init_InstanceControls>:

void init_controls_gpio();


void Init_InstanceControls()
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	init_controls_gpio();
 8001300:	f000 f870 	bl	80013e4 <init_controls_gpio>
	SetSafeState();
 8001304:	f000 f856 	bl	80013b4 <SetSafeState>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <Set_PumpState>:

void Set_PumpState(Change_State request)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	463b      	mov	r3, r7
 8001314:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (request.Pump) {
 8001318:	883b      	ldrh	r3, [r7, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <Set_PumpState+0x18>
 800131e:	2b01      	cmp	r3, #1
 8001320:	d005      	beq.n	800132e <Set_PumpState+0x22>
		case ON:
			GPIOB->BSRR = pump_relay_pin; //Pull pin HIGH
		break;
		default:
			// Do nothing
		break;
 8001322:	e009      	b.n	8001338 <Set_PumpState+0x2c>

void Set_PumpState(Change_State request)
{
	switch (request.Pump) {
		case OFF:
			GPIOB->BRR = pump_relay_pin; //Pull pin LOW
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <Set_PumpState+0x38>)
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <Set_PumpState+0x3c>)
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	615a      	str	r2, [r3, #20]
		break;
 800132c:	e004      	b.n	8001338 <Set_PumpState+0x2c>
		case ON:
			GPIOB->BSRR = pump_relay_pin; //Pull pin HIGH
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <Set_PumpState+0x38>)
 8001330:	4a05      	ldr	r2, [pc, #20]	; (8001348 <Set_PumpState+0x3c>)
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	611a      	str	r2, [r3, #16]
		break;
 8001336:	bf00      	nop
		default:
			// Do nothing
		break;
	}
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40010c00 	.word	0x40010c00
 8001348:	20000008 	.word	0x20000008

0800134c <Set_Fan_State>:

void Set_Fan_State(Change_State request)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	463b      	mov	r3, r7
 8001354:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (request.Fan) {
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d00d      	beq.n	800137a <Set_Fan_State+0x2e>
 800135e:	2b02      	cmp	r3, #2
 8001360:	d014      	beq.n	800138c <Set_Fan_State+0x40>
 8001362:	2b00      	cmp	r3, #0
 8001364:	d000      	beq.n	8001368 <Set_Fan_State+0x1c>
		GPIOB->BRR = fan_high_pin;
		//TODO: GPIO Fan LOW
		break;
	default:
		//TODO: Handle unexpected input
		break;
 8001366:	e01a      	b.n	800139e <Set_Fan_State+0x52>

void Set_Fan_State(Change_State request)
{
	switch (request.Fan) {
	case Fan_OFF:
		GPIOB->BSRR = fan_low_pin;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <Set_Fan_State+0x5c>)
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <Set_Fan_State+0x60>)
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	611a      	str	r2, [r3, #16]
		GPIOB->BSRR = fan_high_pin;
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <Set_Fan_State+0x5c>)
 8001372:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <Set_Fan_State+0x64>)
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	611a      	str	r2, [r3, #16]
		//TODO: GPIO Fan OFF
		break;
 8001378:	e011      	b.n	800139e <Set_Fan_State+0x52>
	case Fan_Low:
		GPIOB->BSRR = fan_high_pin;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <Set_Fan_State+0x5c>)
 800137c:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <Set_Fan_State+0x64>)
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	611a      	str	r2, [r3, #16]
		GPIOB->BRR = fan_low_pin;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <Set_Fan_State+0x5c>)
 8001384:	4a09      	ldr	r2, [pc, #36]	; (80013ac <Set_Fan_State+0x60>)
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	615a      	str	r2, [r3, #20]
		//TODO: GPIO Fan LOW
		break;
 800138a:	e008      	b.n	800139e <Set_Fan_State+0x52>
	case Fan_High:
		GPIOB->BSRR = fan_low_pin;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <Set_Fan_State+0x5c>)
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <Set_Fan_State+0x60>)
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	611a      	str	r2, [r3, #16]
		GPIOB->BRR = fan_high_pin;
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <Set_Fan_State+0x5c>)
 8001396:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <Set_Fan_State+0x64>)
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	615a      	str	r2, [r3, #20]
		//TODO: GPIO Fan LOW
		break;
 800139c:	bf00      	nop
		//TODO: Handle unexpected input
		break;

	}

}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	2000000c 	.word	0x2000000c
 80013b0:	20000010 	.word	0x20000010

080013b4 <SetSafeState>:

///Make sure all relays are off at startup
void SetSafeState()
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	GPIOB->BSRR = pump_relay_pin | fan_low_pin | fan_high_pin;
 80013b8:	4906      	ldr	r1, [pc, #24]	; (80013d4 <SetSafeState+0x20>)
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <SetSafeState+0x24>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <SetSafeState+0x28>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <SetSafeState+0x2c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	610b      	str	r3, [r1, #16]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	20000008 	.word	0x20000008
 80013dc:	2000000c 	.word	0x2000000c
 80013e0:	20000010 	.word	0x20000010

080013e4 <init_controls_gpio>:

void init_controls_gpio()
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef Swamp_Control_Config; //Does not include USART thats taken care of with USART lib
	Swamp_Control_Config.GPIO_Speed = GPIO_Speed_2MHz;
 80013ea:	2302      	movs	r3, #2
 80013ec:	71bb      	strb	r3, [r7, #6]
	Swamp_Control_Config.GPIO_Mode = GPIO_Mode_Out_OD;
 80013ee:	2314      	movs	r3, #20
 80013f0:	71fb      	strb	r3, [r7, #7]
	Swamp_Control_Config.GPIO_Pin = pump_relay_pin | fan_low_pin | fan_high_pin;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <init_controls_gpio+0x44>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <init_controls_gpio+0x48>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <init_controls_gpio+0x4c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21b      	sxth	r3, r3
 800140c:	b29b      	uxth	r3, r3
 800140e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(pump_relay_port, &Swamp_Control_Config);
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <init_controls_gpio+0x50>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	1d3a      	adds	r2, r7, #4
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f001 f809 	bl	8002430 <GPIO_Init>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008
 800142c:	2000000c 	.word	0x2000000c
 8001430:	20000010 	.word	0x20000010
 8001434:	20000014 	.word	0x20000014

08001438 <ESP_Init_DMA_USART3>:
	USART_StartInit(usart, baud);
	_esp_GPIO_Init();
}

void ESP_Init_DMA_USART3(uint32_t baud)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	USART_Init_DMA3(baud, USART3_RxBuffer, RxBuffSize);
 8001440:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001444:	4904      	ldr	r1, [pc, #16]	; (8001458 <ESP_Init_DMA_USART3+0x20>)
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fdf8 	bl	800103c <USART_Init_DMA3>
	_esp_GPIO_Init();
 800144c:	f000 f806 	bl	800145c <_esp_GPIO_Init>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000398 	.word	0x20000398

0800145c <_esp_GPIO_Init>:


void _esp_GPIO_Init()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	//ESP Control pin (CH_PD) config
	GPIO_InitTypeDef ESP8266_Control_Config; //Does not include USART thats taken care of with USART lib
	ESP8266_Control_Config.GPIO_Speed = GPIO_Speed_2MHz;
 8001462:	2302      	movs	r3, #2
 8001464:	71bb      	strb	r3, [r7, #6]
	ESP8266_Control_Config.GPIO_Mode = GPIO_Mode_Out_PP;
 8001466:	2310      	movs	r3, #16
 8001468:	71fb      	strb	r3, [r7, #7]
	ESP8266_Control_Config.GPIO_Pin = ESP_CHPD_PIN;
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(ESP_CHPD_PORT, &ESP8266_Control_Config);
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <_esp_GPIO_Init+0x24>)
 8001474:	f000 ffdc 	bl	8002430 <GPIO_Init>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40010c00 	.word	0x40010c00

08001484 <ESP_On>:

void ESP_On()
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
	ESP_CHPD_PORT->BSRR = ESP_CHPD_PIN;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <ESP_On+0x14>)
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	611a      	str	r2, [r3, #16]
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40010c00 	.word	0x40010c00

0800149c <ESP_ReadyWaitForAnswer>:
{
	ESP_CHPD_PORT->BRR = ESP_CHPD_PIN;
}

void ESP_ReadyWaitForAnswer()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	TxWaitForResponse_TimeStmp = Millis();
 80014a0:	f7ff ff14 	bl	80012cc <Millis>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <ESP_ReadyWaitForAnswer+0x18>)
 80014a8:	601a      	str	r2, [r3, #0]
	waitingForReponse = 1;
 80014aa:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <ESP_ReadyWaitForAnswer+0x1c>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000010c 	.word	0x2000010c
 80014b8:	20000108 	.word	0x20000108

080014bc <ESP_SendCustomCommand_External_Wait>:
			ESP_WaitForAnswer();
			//for (wi=0;wi<735000;wi++);
}

void ESP_SendCustomCommand_External_Wait(const char *customMessage)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	TX_Buffer = customMessage;
 80014c4:	4a29      	ldr	r2, [pc, #164]	; (800156c <ESP_SendCustomCommand_External_Wait+0xb0>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]

		while(*TX_Buffer)
 80014ca:	e019      	b.n	8001500 <ESP_SendCustomCommand_External_Wait+0x44>
		{
			USART_ITConfig(ESP_USART,USART_IT_TXE, ENABLE);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f240 7127 	movw	r1, #1831	; 0x727
 80014d2:	4827      	ldr	r0, [pc, #156]	; (8001570 <ESP_SendCustomCommand_External_Wait+0xb4>)
 80014d4:	f000 fcb8 	bl	8001e48 <USART_ITConfig>
			while(USART_GetFlagStatus(ESP_USART,USART_FLAG_TXE) == RESET);
 80014d8:	bf00      	nop
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	4824      	ldr	r0, [pc, #144]	; (8001570 <ESP_SendCustomCommand_External_Wait+0xb4>)
 80014de:	f000 fd31 	bl	8001f44 <USART_GetFlagStatus>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f8      	beq.n	80014da <ESP_SendCustomCommand_External_Wait+0x1e>
			USART_SendData(ESP_USART,*TX_Buffer++);
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <ESP_SendCustomCommand_External_Wait+0xb0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	491f      	ldr	r1, [pc, #124]	; (800156c <ESP_SendCustomCommand_External_Wait+0xb0>)
 80014f0:	600a      	str	r2, [r1, #0]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4619      	mov	r1, r3
 80014fa:	481d      	ldr	r0, [pc, #116]	; (8001570 <ESP_SendCustomCommand_External_Wait+0xb4>)
 80014fc:	f000 fd10 	bl	8001f20 <USART_SendData>

void ESP_SendCustomCommand_External_Wait(const char *customMessage)
{
	TX_Buffer = customMessage;

		while(*TX_Buffer)
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <ESP_SendCustomCommand_External_Wait+0xb0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1df      	bne.n	80014cc <ESP_SendCustomCommand_External_Wait+0x10>
			while(USART_GetFlagStatus(ESP_USART,USART_FLAG_TXE) == RESET);
			USART_SendData(ESP_USART,*TX_Buffer++);

		}

		USART_ITConfig(ESP_USART,USART_IT_TXE, ENABLE);
 800150c:	2201      	movs	r2, #1
 800150e:	f240 7127 	movw	r1, #1831	; 0x727
 8001512:	4817      	ldr	r0, [pc, #92]	; (8001570 <ESP_SendCustomCommand_External_Wait+0xb4>)
 8001514:	f000 fc98 	bl	8001e48 <USART_ITConfig>
		while(USART_GetFlagStatus(ESP_USART, USART_FLAG_TXE) == RESET);
 8001518:	bf00      	nop
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	4814      	ldr	r0, [pc, #80]	; (8001570 <ESP_SendCustomCommand_External_Wait+0xb4>)
 800151e:	f000 fd11 	bl	8001f44 <USART_GetFlagStatus>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f8      	beq.n	800151a <ESP_SendCustomCommand_External_Wait+0x5e>
			USART_SendData(ESP_USART,'\r');
 8001528:	210d      	movs	r1, #13
 800152a:	4811      	ldr	r0, [pc, #68]	; (8001570 <ESP_SendCustomCommand_External_Wait+0xb4>)
 800152c:	f000 fcf8 	bl	8001f20 <USART_SendData>

		USART_ITConfig(ESP_USART,USART_IT_TXE, ENABLE);
 8001530:	2201      	movs	r2, #1
 8001532:	f240 7127 	movw	r1, #1831	; 0x727
 8001536:	480e      	ldr	r0, [pc, #56]	; (8001570 <ESP_SendCustomCommand_External_Wait+0xb4>)
 8001538:	f000 fc86 	bl	8001e48 <USART_ITConfig>
		while(USART_GetFlagStatus(ESP_USART, USART_FLAG_TXE) == RESET);
 800153c:	bf00      	nop
 800153e:	2180      	movs	r1, #128	; 0x80
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <ESP_SendCustomCommand_External_Wait+0xb4>)
 8001542:	f000 fcff 	bl	8001f44 <USART_GetFlagStatus>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f8      	beq.n	800153e <ESP_SendCustomCommand_External_Wait+0x82>
			ESP_ReadyWaitForAnswer();
 800154c:	f7ff ffa6 	bl	800149c <ESP_ReadyWaitForAnswer>
			USART_SendData(ESP_USART,'\n');
 8001550:	210a      	movs	r1, #10
 8001552:	4807      	ldr	r0, [pc, #28]	; (8001570 <ESP_SendCustomCommand_External_Wait+0xb4>)
 8001554:	f000 fce4 	bl	8001f20 <USART_SendData>

	USART_ITConfig(ESP_USART,USART_IT_TXE, DISABLE);
 8001558:	2200      	movs	r2, #0
 800155a:	f240 7127 	movw	r1, #1831	; 0x727
 800155e:	4804      	ldr	r0, [pc, #16]	; (8001570 <ESP_SendCustomCommand_External_Wait+0xb4>)
 8001560:	f000 fc72 	bl	8001e48 <USART_ITConfig>

}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000354 	.word	0x20000354
 8001570:	40004800 	.word	0x40004800

08001574 <SaveTempHumid>:
		"wifi.sta.disconnect()"
};


void SaveTempHumid(float temp, float humid)
{
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b092      	sub	sp, #72	; 0x48
 8001578:	af04      	add	r7, sp, #16
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
	char comm[40];
	char *commandString = (char *)ESP_APP_COMMAND(ESP_SAVE_TEMP_HUMID);
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <SaveTempHumid+0x4c>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(comm,"%s%.2f,%.2f)",commandString,temp,humid);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7fe ff59 	bl	800043c <__aeabi_f2d>
 800158a:	4604      	mov	r4, r0
 800158c:	460d      	mov	r5, r1
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f7fe ff54 	bl	800043c <__aeabi_f2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	f107 000c 	add.w	r0, r7, #12
 800159c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015a0:	e9cd 4500 	strd	r4, r5, [sp]
 80015a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015a6:	4907      	ldr	r1, [pc, #28]	; (80015c4 <SaveTempHumid+0x50>)
 80015a8:	f001 ff78 	bl	800349c <siprintf>
	ESP_SendCustomCommand_External_Wait(comm);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff83 	bl	80014bc <ESP_SendCustomCommand_External_Wait>
}
 80015b6:	bf00      	nop
 80015b8:	3738      	adds	r7, #56	; 0x38
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bdb0      	pop	{r4, r5, r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000018 	.word	0x20000018
 80015c4:	08004f28 	.word	0x08004f28

080015c8 <ESP_GetWaitingCommand_DMA>:
}

char *command_preamble = "::1234:";

Change_State ESP_GetWaitingCommand_DMA()
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	current_request.Hash = "9";
 80015d0:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <ESP_GetWaitingCommand_DMA+0xec>)
 80015d2:	4a39      	ldr	r2, [pc, #228]	; (80016b8 <ESP_GetWaitingCommand_DMA+0xf0>)
 80015d4:	605a      	str	r2, [r3, #4]
	ESP_Command_Buffer_Pntr = memmem(USART3_RxBuffer,RxBuffSize,command_preamble,strlen(command_preamble));
 80015d6:	4b39      	ldr	r3, [pc, #228]	; (80016bc <ESP_GetWaitingCommand_DMA+0xf4>)
 80015d8:	681c      	ldr	r4, [r3, #0]
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <ESP_GetWaitingCommand_DMA+0xf4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fdc0 	bl	8000164 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4622      	mov	r2, r4
 80015e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015ec:	4834      	ldr	r0, [pc, #208]	; (80016c0 <ESP_GetWaitingCommand_DMA+0xf8>)
 80015ee:	f001 fabe 	bl	8002b6e <memmem>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <ESP_GetWaitingCommand_DMA+0xfc>)
 80015f8:	601a      	str	r2, [r3, #0]
	if(ESP_Command_Buffer_Pntr){
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <ESP_GetWaitingCommand_DMA+0xfc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d04d      	beq.n	800169e <ESP_GetWaitingCommand_DMA+0xd6>
		strcpy(ESP_Command_Buffer,ESP_Command_Buffer_Pntr);
 8001602:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <ESP_GetWaitingCommand_DMA+0xfc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4619      	mov	r1, r3
 8001608:	482f      	ldr	r0, [pc, #188]	; (80016c8 <ESP_GetWaitingCommand_DMA+0x100>)
 800160a:	f001 ff6b 	bl	80034e4 <strcpy>
		DMA_Cmd(DMA1_Channel3,DISABLE);
 800160e:	2100      	movs	r1, #0
 8001610:	482e      	ldr	r0, [pc, #184]	; (80016cc <ESP_GetWaitingCommand_DMA+0x104>)
 8001612:	f001 f9df 	bl	80029d4 <DMA_Cmd>

		//Wipes the received message from the DMA buffer (using the pointer to the data)
		//This makes sure the data doesn't get mistaken for a new request, on the next buffer polling.
		ClearArray_Size(ESP_Command_Buffer_Pntr,strlen(ESP_Command_Buffer_Pntr));
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <ESP_GetWaitingCommand_DMA+0xfc>)
 8001618:	681c      	ldr	r4, [r3, #0]
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <ESP_GetWaitingCommand_DMA+0xfc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fda0 	bl	8000164 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	b29b      	uxth	r3, r3
 8001628:	4619      	mov	r1, r3
 800162a:	4620      	mov	r0, r4
 800162c:	f000 fb22 	bl	8001c74 <ClearArray_Size>
		DMA_Initialize(USART3_RxBuffer, RxBuffSize);
 8001630:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001634:	4822      	ldr	r0, [pc, #136]	; (80016c0 <ESP_GetWaitingCommand_DMA+0xf8>)
 8001636:	f7ff fd6b 	bl	8001110 <DMA_Initialize>

		strtok(ESP_Command_Buffer, "<");
 800163a:	4925      	ldr	r1, [pc, #148]	; (80016d0 <ESP_GetWaitingCommand_DMA+0x108>)
 800163c:	4822      	ldr	r0, [pc, #136]	; (80016c8 <ESP_GetWaitingCommand_DMA+0x100>)
 800163e:	f001 ff59 	bl	80034f4 <strtok>
		uint8_t command_type = atoi(strtok(NULL, ":"));
 8001642:	4924      	ldr	r1, [pc, #144]	; (80016d4 <ESP_GetWaitingCommand_DMA+0x10c>)
 8001644:	2000      	movs	r0, #0
 8001646:	f001 ff55 	bl	80034f4 <strtok>
 800164a:	4603      	mov	r3, r0
 800164c:	4618      	mov	r0, r3
 800164e:	f001 fa59 	bl	8002b04 <atoi>
 8001652:	4603      	mov	r3, r0
 8001654:	73fb      	strb	r3, [r7, #15]
		switch (command_type) {
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d000      	beq.n	800165e <ESP_GetWaitingCommand_DMA+0x96>
				current_request.Fan = atoi(strtok(NULL, ":"));
//				current_request.AutoTemp = atoi(strtok(NULL, ":"));
				current_request.Hash = strtok(NULL, ":");
				break;
			default:
				break;
 800165c:	e01f      	b.n	800169e <ESP_GetWaitingCommand_DMA+0xd6>

		strtok(ESP_Command_Buffer, "<");
		uint8_t command_type = atoi(strtok(NULL, ":"));
		switch (command_type) {
			case 1:
				current_request.Pump = atoi(strtok(NULL, ":"));
 800165e:	491d      	ldr	r1, [pc, #116]	; (80016d4 <ESP_GetWaitingCommand_DMA+0x10c>)
 8001660:	2000      	movs	r0, #0
 8001662:	f001 ff47 	bl	80034f4 <strtok>
 8001666:	4603      	mov	r3, r0
 8001668:	4618      	mov	r0, r3
 800166a:	f001 fa4b 	bl	8002b04 <atoi>
 800166e:	4603      	mov	r3, r0
 8001670:	b29a      	uxth	r2, r3
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <ESP_GetWaitingCommand_DMA+0xec>)
 8001674:	801a      	strh	r2, [r3, #0]
				current_request.Fan = atoi(strtok(NULL, ":"));
 8001676:	4917      	ldr	r1, [pc, #92]	; (80016d4 <ESP_GetWaitingCommand_DMA+0x10c>)
 8001678:	2000      	movs	r0, #0
 800167a:	f001 ff3b 	bl	80034f4 <strtok>
 800167e:	4603      	mov	r3, r0
 8001680:	4618      	mov	r0, r3
 8001682:	f001 fa3f 	bl	8002b04 <atoi>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <ESP_GetWaitingCommand_DMA+0xec>)
 800168c:	805a      	strh	r2, [r3, #2]
//				current_request.AutoTemp = atoi(strtok(NULL, ":"));
				current_request.Hash = strtok(NULL, ":");
 800168e:	4911      	ldr	r1, [pc, #68]	; (80016d4 <ESP_GetWaitingCommand_DMA+0x10c>)
 8001690:	2000      	movs	r0, #0
 8001692:	f001 ff2f 	bl	80034f4 <strtok>
 8001696:	4602      	mov	r2, r0
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <ESP_GetWaitingCommand_DMA+0xec>)
 800169a:	605a      	str	r2, [r3, #4]
				break;
 800169c:	bf00      	nop
				break;
		}
		//TODO: Process incoming command in DMA buffer

	}
	return current_request;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <ESP_GetWaitingCommand_DMA+0xec>)
 80016a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016a6:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000358 	.word	0x20000358
 80016b8:	08004f40 	.word	0x08004f40
 80016bc:	20000024 	.word	0x20000024
 80016c0:	20000398 	.word	0x20000398
 80016c4:	20000788 	.word	0x20000788
 80016c8:	20000594 	.word	0x20000594
 80016cc:	40020030 	.word	0x40020030
 80016d0:	08004f44 	.word	0x08004f44
 80016d4:	08004f48 	.word	0x08004f48

080016d8 <StartRestService>:
}



void StartRestService(uint16_t port)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b090      	sub	sp, #64	; 0x40
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
	char comm[50];
	char *commandString = (char *)ESP_APP_COMMAND(ESP_START_REST_SERVICE);
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <StartRestService+0x30>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sprintf(comm,"%s%d)",commandString,port);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	f107 0008 	add.w	r0, r7, #8
 80016ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016f0:	4906      	ldr	r1, [pc, #24]	; (800170c <StartRestService+0x34>)
 80016f2:	f001 fed3 	bl	800349c <siprintf>
	ESP_SendCustomCommand_External_Wait(comm);
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fede 	bl	80014bc <ESP_SendCustomCommand_External_Wait>

}
 8001700:	bf00      	nop
 8001702:	3740      	adds	r7, #64	; 0x40
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000018 	.word	0x20000018
 800170c:	08004f4c 	.word	0x08004f4c

08001710 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	da0b      	bge.n	800173c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001724:	490d      	ldr	r1, [pc, #52]	; (800175c <NVIC_SetPriority+0x4c>)
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	3b04      	subs	r3, #4
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800173a:	e009      	b.n	8001750 <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800173c:	4908      	ldr	r1, [pc, #32]	; (8001760 <NVIC_SetPriority+0x50>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00
 8001760:	e000e100 	.word	0xe000e100

08001764 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
    \param [in]       SubPriority  Sub priority value (starting from 0)
    \return                        Encoded priority for the interrupt
 */
static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8001798:	2201      	movs	r2, #1
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80017ac:	2101      	movs	r1, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	4619      	mov	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 80017bc:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <DHT22_Init>:
volatile uint32_t downTimeEnd = 0;
volatile uint8_t DHT22_Bit_Time[45]; //testing as 8bit instead of 32 (to save memory)
volatile uint8_t currentBit = 0;

void DHT22_Init()
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	DHT22_Config_CLK();
 80017cc:	f000 f8d2 	bl	8001974 <DHT22_Config_CLK>
	//DHT22_Config_GPIO_OUTPUT();//output for pulse start
	DHT22_Config_EXTInterrupt_Enable();
 80017d0:	f000 f908 	bl	80019e4 <DHT22_Config_EXTInterrupt_Enable>
	DHT22_Config_NVIC();
 80017d4:	f000 f91e 	bl	8001a14 <DHT22_Config_NVIC>
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <DHT22_Start_Read>:

uint32_t dhtTimeStamp = 0;
uint16_t tempTemp;
uint16_t humidTemp;
void DHT22_Start_Read(DHT22_Data *tempAndHumid, DHT22_Data *previous_tempAndHumid)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	currentBit =0;
 80017e6:	4b56      	ldr	r3, [pc, #344]	; (8001940 <DHT22_Start_Read+0x164>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
	upTimeStart = 0;
 80017ec:	4b55      	ldr	r3, [pc, #340]	; (8001944 <DHT22_Start_Read+0x168>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
	upTimeEnd = 0;
 80017f2:	4b55      	ldr	r3, [pc, #340]	; (8001948 <DHT22_Start_Read+0x16c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
	downTimeStart = 0;
 80017f8:	4b54      	ldr	r3, [pc, #336]	; (800194c <DHT22_Start_Read+0x170>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
	downTimeEnd = 0;
 80017fe:	4b54      	ldr	r3, [pc, #336]	; (8001950 <DHT22_Start_Read+0x174>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

	//tempAndHumid->Humid = 0.0;
	//tempAndHumid->Temp = 0.0;
	DHT22_Buffer16[0] = 0;
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <DHT22_Start_Read+0x178>)
 8001806:	2200      	movs	r2, #0
 8001808:	801a      	strh	r2, [r3, #0]
	DHT22_Buffer16[1] = 0;
 800180a:	4b52      	ldr	r3, [pc, #328]	; (8001954 <DHT22_Start_Read+0x178>)
 800180c:	2200      	movs	r2, #0
 800180e:	805a      	strh	r2, [r3, #2]
	DHT22_Buffer16[2] = 0;
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <DHT22_Start_Read+0x178>)
 8001812:	2200      	movs	r2, #0
 8001814:	809a      	strh	r2, [r3, #4]

	dhtTimeStamp = Micros();
 8001816:	f7ff fd39 	bl	800128c <Micros>
 800181a:	4602      	mov	r2, r0
 800181c:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <DHT22_Start_Read+0x17c>)
 800181e:	601a      	str	r2, [r3, #0]
	DHT22_Config_GPIO_OUTPUT();
 8001820:	f000 f8ca 	bl	80019b8 <DHT22_Config_GPIO_OUTPUT>
	GPIOB->BRR = DHT22_Pin; //Pull pin LOW
 8001824:	4b4d      	ldr	r3, [pc, #308]	; (800195c <DHT22_Start_Read+0x180>)
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	615a      	str	r2, [r3, #20]
	while((Micros() - dhtTimeStamp) < 1100){}
 800182a:	bf00      	nop
 800182c:	f7ff fd2e 	bl	800128c <Micros>
 8001830:	4602      	mov	r2, r0
 8001832:	4b49      	ldr	r3, [pc, #292]	; (8001958 <DHT22_Start_Read+0x17c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f240 424b 	movw	r2, #1099	; 0x44b
 800183c:	4293      	cmp	r3, r2
 800183e:	d9f5      	bls.n	800182c <DHT22_Start_Read+0x50>
	GPIOB->BSRR = DHT22_Pin; //Pull pin HIGH
 8001840:	4b46      	ldr	r3, [pc, #280]	; (800195c <DHT22_Start_Read+0x180>)
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	611a      	str	r2, [r3, #16]
	DHT22_Config_GPIO_INPUT(); //Ready for incoming data
 8001846:	f000 f8a1 	bl	800198c <DHT22_Config_GPIO_INPUT>
	//DHT22_Config_EXTInterrupt_Enable();
	dhtTimeStamp = Millis();
 800184a:	f7ff fd3f 	bl	80012cc <Millis>
 800184e:	4602      	mov	r2, r0
 8001850:	4b41      	ldr	r3, [pc, #260]	; (8001958 <DHT22_Start_Read+0x17c>)
 8001852:	601a      	str	r2, [r3, #0]
	while((Millis() - dhtTimeStamp) < 1000){}
 8001854:	bf00      	nop
 8001856:	f7ff fd39 	bl	80012cc <Millis>
 800185a:	4602      	mov	r2, r0
 800185c:	4b3e      	ldr	r3, [pc, #248]	; (8001958 <DHT22_Start_Read+0x17c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001866:	d3f6      	bcc.n	8001856 <DHT22_Start_Read+0x7a>
	DHT22_Times_To_Bits16(DHT22_Bit_Time, 45);
 8001868:	212d      	movs	r1, #45	; 0x2d
 800186a:	483d      	ldr	r0, [pc, #244]	; (8001960 <DHT22_Start_Read+0x184>)
 800186c:	f000 f95e 	bl	8001b2c <DHT22_Times_To_Bits16>
	DHT22_Times_To_Bits(DHT22_Bit_Time, 45);
 8001870:	212d      	movs	r1, #45	; 0x2d
 8001872:	483b      	ldr	r0, [pc, #236]	; (8001960 <DHT22_Start_Read+0x184>)
 8001874:	f000 f8ec 	bl	8001a50 <DHT22_Times_To_Bits>
	if(DHT22_Buffer[5] == DHT22_Buffer[4])
 8001878:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <DHT22_Start_Read+0x188>)
 800187a:	795b      	ldrb	r3, [r3, #5]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b39      	ldr	r3, [pc, #228]	; (8001964 <DHT22_Start_Read+0x188>)
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	429a      	cmp	r2, r3
 8001886:	d149      	bne.n	800191c <DHT22_Start_Read+0x140>
	{
		previous_tempAndHumid->Humid = tempAndHumid->Humid;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	609a      	str	r2, [r3, #8]
		previous_tempAndHumid->Temp = tempAndHumid->Temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	605a      	str	r2, [r3, #4]
		previous_tempAndHumid->CheckSumPass = tempAndHumid->CheckSumPass;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	89da      	ldrh	r2, [r3, #14]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	81da      	strh	r2, [r3, #14]
		previous_tempAndHumid->CheckSumErrors = tempAndHumid->CheckSumErrors;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	899a      	ldrh	r2, [r3, #12]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	819a      	strh	r2, [r3, #12]
		tempAndHumid->CheckSumPass++;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	89db      	ldrh	r3, [r3, #14]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	81da      	strh	r2, [r3, #14]
		tempAndHumid->CurrentPass = 1;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	741a      	strb	r2, [r3, #16]

	//if(DHT22_Buffer16[0] < 999)
	//{
		humidTemp = DHT22_Buffer16[0];
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <DHT22_Start_Read+0x178>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <DHT22_Start_Read+0x18c>)
 80018c2:	801a      	strh	r2, [r3, #0]
		tempAndHumid->Humid = humidTemp/10.0;
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <DHT22_Start_Read+0x18c>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fda5 	bl	8000418 <__aeabi_i2d>
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <DHT22_Start_Read+0x190>)
 80018d4:	f7fe ff30 	bl	8000738 <__aeabi_ddiv>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	4618      	mov	r0, r3
 80018de:	4621      	mov	r1, r4
 80018e0:	f7ff f8d8 	bl	8000a94 <__aeabi_d2f>
 80018e4:	4602      	mov	r2, r0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	609a      	str	r2, [r3, #8]

	//}

	//if(DHT22_Buffer16[1] < 999)
	//{
		tempTemp = DHT22_Buffer16[1];
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <DHT22_Start_Read+0x178>)
 80018ec:	885b      	ldrh	r3, [r3, #2]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <DHT22_Start_Read+0x194>)
 80018f2:	801a      	strh	r2, [r3, #0]
//			}
//		}
//		else {
//			previous_tempAndHumid = tempAndHumid;
//		}
		tempAndHumid->Temp = tempTemp/10.0;
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <DHT22_Start_Read+0x194>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fd8d 	bl	8000418 <__aeabi_i2d>
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <DHT22_Start_Read+0x190>)
 8001904:	f7fe ff18 	bl	8000738 <__aeabi_ddiv>
 8001908:	4603      	mov	r3, r0
 800190a:	460c      	mov	r4, r1
 800190c:	4618      	mov	r0, r3
 800190e:	4621      	mov	r1, r4
 8001910:	f7ff f8c0 	bl	8000a94 <__aeabi_d2f>
 8001914:	4602      	mov	r2, r0
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	e008      	b.n	800192e <DHT22_Start_Read+0x152>

	//}
	}
	else {
		tempAndHumid->CheckSumErrors++;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	899b      	ldrh	r3, [r3, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	819a      	strh	r2, [r3, #12]
		tempAndHumid->CurrentPass = 0;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	741a      	strb	r2, [r3, #16]
	}


	//DHT_Value_Checksum();
	//DHT22_Buffer16[3] = DHT22_Buffer16[3]| DHT22_Buffer16[3]>>8;
	dhtTimeStamp = Millis();
 800192e:	f7ff fccd 	bl	80012cc <Millis>
 8001932:	4602      	mov	r2, r0
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <DHT22_Start_Read+0x17c>)
 8001936:	601a      	str	r2, [r3, #0]

	//Do something to check for data transmission completion

//Pull line low for at least 1ms

}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}
 8001940:	20000120 	.word	0x20000120
 8001944:	20000110 	.word	0x20000110
 8001948:	20000114 	.word	0x20000114
 800194c:	20000118 	.word	0x20000118
 8001950:	2000011c 	.word	0x2000011c
 8001954:	2000078c 	.word	0x2000078c
 8001958:	20000124 	.word	0x20000124
 800195c:	40010c00 	.word	0x40010c00
 8001960:	2000079c 	.word	0x2000079c
 8001964:	200007cc 	.word	0x200007cc
 8001968:	20000798 	.word	0x20000798
 800196c:	40240000 	.word	0x40240000
 8001970:	200007d2 	.word	0x200007d2

08001974 <DHT22_Config_CLK>:


void DHT22_Config_CLK()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001978:	2101      	movs	r1, #1
 800197a:	2008      	movs	r0, #8
 800197c:	f000 fce2 	bl	8002344 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8001980:	2101      	movs	r1, #1
 8001982:	2001      	movs	r0, #1
 8001984:	f000 fcde 	bl	8002344 <RCC_APB2PeriphClockCmd>

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <DHT22_Config_GPIO_INPUT>:


void DHT22_Config_GPIO_INPUT()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	DHT22_Pin_GPIO_Config.GPIO_Pin = DHT22_Pin;
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <DHT22_Config_GPIO_INPUT+0x24>)
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	801a      	strh	r2, [r3, #0]
	DHT22_Pin_GPIO_Config.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <DHT22_Config_GPIO_INPUT+0x24>)
 8001998:	2204      	movs	r2, #4
 800199a:	70da      	strb	r2, [r3, #3]
	DHT22_Pin_GPIO_Config.GPIO_Speed = GPIO_Speed_50MHz;
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <DHT22_Config_GPIO_INPUT+0x24>)
 800199e:	2203      	movs	r2, #3
 80019a0:	709a      	strb	r2, [r3, #2]
	GPIO_Init(GPIOB,&DHT22_Pin_GPIO_Config);
 80019a2:	4903      	ldr	r1, [pc, #12]	; (80019b0 <DHT22_Config_GPIO_INPUT+0x24>)
 80019a4:	4803      	ldr	r0, [pc, #12]	; (80019b4 <DHT22_Config_GPIO_INPUT+0x28>)
 80019a6:	f000 fd43 	bl	8002430 <GPIO_Init>
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000794 	.word	0x20000794
 80019b4:	40010c00 	.word	0x40010c00

080019b8 <DHT22_Config_GPIO_OUTPUT>:

void DHT22_Config_GPIO_OUTPUT()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	DHT22_Pin_GPIO_Config.GPIO_Pin = DHT22_Pin;
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <DHT22_Config_GPIO_OUTPUT+0x24>)
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	801a      	strh	r2, [r3, #0]
	DHT22_Pin_GPIO_Config.GPIO_Mode = GPIO_Mode_Out_PP;
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <DHT22_Config_GPIO_OUTPUT+0x24>)
 80019c4:	2210      	movs	r2, #16
 80019c6:	70da      	strb	r2, [r3, #3]
	DHT22_Pin_GPIO_Config.GPIO_Speed = GPIO_Speed_50MHz;
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <DHT22_Config_GPIO_OUTPUT+0x24>)
 80019ca:	2203      	movs	r2, #3
 80019cc:	709a      	strb	r2, [r3, #2]
	GPIO_Init(GPIOB,&DHT22_Pin_GPIO_Config);
 80019ce:	4903      	ldr	r1, [pc, #12]	; (80019dc <DHT22_Config_GPIO_OUTPUT+0x24>)
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <DHT22_Config_GPIO_OUTPUT+0x28>)
 80019d2:	f000 fd2d 	bl	8002430 <GPIO_Init>
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000794 	.word	0x20000794
 80019e0:	40010c00 	.word	0x40010c00

080019e4 <DHT22_Config_EXTInterrupt_Enable>:


void DHT22_Config_EXTInterrupt_Enable()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource6);
 80019ea:	2106      	movs	r1, #6
 80019ec:	2001      	movs	r0, #1
 80019ee:	f000 fdf5 	bl	80025dc <GPIO_EXTILineConfig>
	EXTI_InitTypeDef DHT22_IntConfig;
	DHT22_IntConfig.EXTI_Line = EXTI_Line6;
 80019f2:	2340      	movs	r3, #64	; 0x40
 80019f4:	603b      	str	r3, [r7, #0]
	DHT22_IntConfig.EXTI_Mode = EXTI_Mode_Interrupt;
 80019f6:	2300      	movs	r3, #0
 80019f8:	713b      	strb	r3, [r7, #4]
	DHT22_IntConfig.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 80019fa:	2310      	movs	r3, #16
 80019fc:	717b      	strb	r3, [r7, #5]
	DHT22_IntConfig.EXTI_LineCmd = ENABLE;
 80019fe:	2301      	movs	r3, #1
 8001a00:	71bb      	strb	r3, [r7, #6]

	EXTI_Init(&DHT22_IntConfig);
 8001a02:	463b      	mov	r3, r7
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fe47 	bl	8002698 <EXTI_Init>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop

08001a14 <DHT22_Config_NVIC>:

	EXTI_Init(&DHT22_IntConfig);
}

void DHT22_Config_NVIC()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
	NVIC_InitTypeDef DHT22_Interrupt;

	DHT22_Interrupt.NVIC_IRQChannel = EXTI9_5_IRQn;
 8001a1a:	2317      	movs	r3, #23
 8001a1c:	713b      	strb	r3, [r7, #4]
	DHT22_Interrupt.NVIC_IRQChannelPreemptionPriority = 4;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	717b      	strb	r3, [r7, #5]
	DHT22_Interrupt.NVIC_IRQChannelSubPriority = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	71bb      	strb	r3, [r7, #6]
	DHT22_Interrupt.NVIC_IRQChannelCmd = ENABLE;
 8001a26:	2301      	movs	r3, #1
 8001a28:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&DHT22_Interrupt);
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 f807 	bl	8002a40 <NVIC_Init>

	NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(4,15,0));
 8001a32:	2200      	movs	r2, #0
 8001a34:	210f      	movs	r1, #15
 8001a36:	2004      	movs	r0, #4
 8001a38:	f7ff fe94 	bl	8001764 <NVIC_EncodePriority>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	2017      	movs	r0, #23
 8001a42:	f7ff fe65 	bl	8001710 <NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop

08001a50 <DHT22_Times_To_Bits>:

void DHT22_Times_To_Bits(volatile uint8_t bitTimesArray[], uint8_t arraySize)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
	DHT22_Buffer[0] = 0;
 8001a5c:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
	DHT22_Buffer[1] = 0;
 8001a62:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	705a      	strb	r2, [r3, #1]
	DHT22_Buffer[2] = 0;
 8001a68:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	709a      	strb	r2, [r3, #2]
	DHT22_Buffer[3] = 0;
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	70da      	strb	r2, [r3, #3]
	DHT22_Buffer[4] = 0;
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	711a      	strb	r2, [r3, #4]
	DHT22_Buffer[5] = 0;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	715a      	strb	r2, [r3, #5]
	uint8_t count;
	uint8_t toValidate;
	uint8_t bitCount = 7;
 8001a80:	2307      	movs	r3, #7
 8001a82:	73bb      	strb	r3, [r7, #14]
	uint8_t byteNumber = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	737b      	strb	r3, [r7, #13]
	for(count = 2; count < arraySize; count++)
 8001a88:	2302      	movs	r3, #2
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e02e      	b.n	8001aec <DHT22_Times_To_Bits+0x9c>
	{
		toValidate = bitTimesArray[count];
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	733b      	strb	r3, [r7, #12]
		if(toValidate < 55)
 8001a98:	7b3b      	ldrb	r3, [r7, #12]
 8001a9a:	2b36      	cmp	r3, #54	; 0x36
 8001a9c:	d807      	bhi.n	8001aae <DHT22_Times_To_Bits+0x5e>
		{
			DHT22_Buffer[byteNumber] = DHT22_Buffer[byteNumber] | 0<<bitCount;
 8001a9e:	7b7b      	ldrb	r3, [r7, #13]
 8001aa0:	7b7a      	ldrb	r2, [r7, #13]
 8001aa2:	4921      	ldr	r1, [pc, #132]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001aa4:	5c8a      	ldrb	r2, [r1, r2]
 8001aa6:	b2d1      	uxtb	r1, r2
 8001aa8:	4a1f      	ldr	r2, [pc, #124]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001aaa:	54d1      	strb	r1, [r2, r3]
 8001aac:	e00f      	b.n	8001ace <DHT22_Times_To_Bits+0x7e>
		}
		else {
			DHT22_Buffer[byteNumber] = DHT22_Buffer[byteNumber] | 1<<bitCount;
 8001aae:	7b7b      	ldrb	r3, [r7, #13]
 8001ab0:	7b7a      	ldrb	r2, [r7, #13]
 8001ab2:	491d      	ldr	r1, [pc, #116]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001ab4:	5c8a      	ldrb	r2, [r1, r2]
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	b251      	sxtb	r1, r2
 8001aba:	7bba      	ldrb	r2, [r7, #14]
 8001abc:	2001      	movs	r0, #1
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	b252      	sxtb	r2, r2
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	b252      	sxtb	r2, r2
 8001ac8:	b2d1      	uxtb	r1, r2
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001acc:	54d1      	strb	r1, [r2, r3]
		}
		if(bitCount != 0)
 8001ace:	7bbb      	ldrb	r3, [r7, #14]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <DHT22_Times_To_Bits+0x8c>
		{
			bitCount--;
 8001ad4:	7bbb      	ldrb	r3, [r7, #14]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	73bb      	strb	r3, [r7, #14]
 8001ada:	e004      	b.n	8001ae6 <DHT22_Times_To_Bits+0x96>
		}
		else
		{
			bitCount = 7;
 8001adc:	2307      	movs	r3, #7
 8001ade:	73bb      	strb	r3, [r7, #14]
			byteNumber++;
 8001ae0:	7b7b      	ldrb	r3, [r7, #13]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	737b      	strb	r3, [r7, #13]
	DHT22_Buffer[5] = 0;
	uint8_t count;
	uint8_t toValidate;
	uint8_t bitCount = 7;
	uint8_t byteNumber = 0;
	for(count = 2; count < arraySize; count++)
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3cc      	bcc.n	8001a8e <DHT22_Times_To_Bits+0x3e>
			bitCount = 7;
			byteNumber++;
		}
	}

	DHT22_Buffer[5] = (DHT22_Buffer[0] + DHT22_Buffer[1] + DHT22_Buffer[2] + DHT22_Buffer[3]);
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001afc:	785b      	ldrb	r3, [r3, #1]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001b06:	789b      	ldrb	r3, [r3, #2]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001b10:	78db      	ldrb	r3, [r3, #3]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <DHT22_Times_To_Bits+0xd8>)
 8001b1a:	715a      	strb	r2, [r3, #5]

}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200007cc 	.word	0x200007cc

08001b2c <DHT22_Times_To_Bits16>:


void DHT22_Times_To_Bits16(volatile uint8_t bitTimesArray[], uint8_t arraySize)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
	uint8_t count;
	uint8_t toValidate;
	uint8_t bitCount = 15;
 8001b38:	230f      	movs	r3, #15
 8001b3a:	73bb      	strb	r3, [r7, #14]
	uint8_t byteNumber = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	737b      	strb	r3, [r7, #13]
	for(count = 2; count < arraySize; count++)
 8001b40:	2302      	movs	r3, #2
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e032      	b.n	8001bac <DHT22_Times_To_Bits16+0x80>
	{
		toValidate = bitTimesArray[count];
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	733b      	strb	r3, [r7, #12]
		if(toValidate < 55)
 8001b50:	7b3b      	ldrb	r3, [r7, #12]
 8001b52:	2b36      	cmp	r3, #54	; 0x36
 8001b54:	d809      	bhi.n	8001b6a <DHT22_Times_To_Bits16+0x3e>
		{
			DHT22_Buffer16[byteNumber] = DHT22_Buffer16[byteNumber] | 0<<bitCount;
 8001b56:	7b7b      	ldrb	r3, [r7, #13]
 8001b58:	7b7a      	ldrb	r2, [r7, #13]
 8001b5a:	491e      	ldr	r1, [pc, #120]	; (8001bd4 <DHT22_Times_To_Bits16+0xa8>)
 8001b5c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001b60:	b291      	uxth	r1, r2
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <DHT22_Times_To_Bits16+0xa8>)
 8001b64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001b68:	e011      	b.n	8001b8e <DHT22_Times_To_Bits16+0x62>
		}
		else {
			DHT22_Buffer16[byteNumber] = DHT22_Buffer16[byteNumber] | 1<<bitCount;
 8001b6a:	7b7b      	ldrb	r3, [r7, #13]
 8001b6c:	7b7a      	ldrb	r2, [r7, #13]
 8001b6e:	4919      	ldr	r1, [pc, #100]	; (8001bd4 <DHT22_Times_To_Bits16+0xa8>)
 8001b70:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001b74:	b292      	uxth	r2, r2
 8001b76:	b211      	sxth	r1, r2
 8001b78:	7bba      	ldrb	r2, [r7, #14]
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	fa00 f202 	lsl.w	r2, r0, r2
 8001b80:	b212      	sxth	r2, r2
 8001b82:	430a      	orrs	r2, r1
 8001b84:	b212      	sxth	r2, r2
 8001b86:	b291      	uxth	r1, r2
 8001b88:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <DHT22_Times_To_Bits16+0xa8>)
 8001b8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		if(bitCount != 0)
 8001b8e:	7bbb      	ldrb	r3, [r7, #14]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <DHT22_Times_To_Bits16+0x70>
		{
			bitCount--;
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	73bb      	strb	r3, [r7, #14]
 8001b9a:	e004      	b.n	8001ba6 <DHT22_Times_To_Bits16+0x7a>
		}
		else
		{
			bitCount = 15;
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	73bb      	strb	r3, [r7, #14]
			byteNumber++;
 8001ba0:	7b7b      	ldrb	r3, [r7, #13]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	737b      	strb	r3, [r7, #13]
{
	uint8_t count;
	uint8_t toValidate;
	uint8_t bitCount = 15;
	uint8_t byteNumber = 0;
	for(count = 2; count < arraySize; count++)
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d3c8      	bcc.n	8001b46 <DHT22_Times_To_Bits16+0x1a>
		{
			bitCount = 15;
			byteNumber++;
		}
	}
	DHT22_Buffer16[2] = DHT22_Buffer16[2] >>= 8;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <DHT22_Times_To_Bits16+0xa8>)
 8001bb6:	889b      	ldrh	r3, [r3, #4]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <DHT22_Times_To_Bits16+0xa8>)
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	8099      	strh	r1, [r3, #4]
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <DHT22_Times_To_Bits16+0xa8>)
 8001bc6:	809a      	strh	r2, [r3, #4]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2000078c 	.word	0x2000078c

08001bd8 <EXTI9_5_IRQHandler>:
	}

}

void EXTI9_5_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
if(EXTI_GetITStatus(EXTI_Line6) != RESET)
 8001bdc:	2040      	movs	r0, #64	; 0x40
 8001bde:	f000 fdcd 	bl	800277c <EXTI_GetITStatus>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d035      	beq.n	8001c54 <EXTI9_5_IRQHandler+0x7c>
  {

	if(GPIO_ReadInputDataBit(GPIOB,DHT22_Pin)) //If pin high
 8001be8:	2140      	movs	r1, #64	; 0x40
 8001bea:	481b      	ldr	r0, [pc, #108]	; (8001c58 <EXTI9_5_IRQHandler+0x80>)
 8001bec:	f000 fcdc 	bl	80025a8 <GPIO_ReadInputDataBit>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <EXTI9_5_IRQHandler+0x32>
	{
		//currentBit++;
		upTimeStart = Micros();
 8001bf6:	f7ff fb49 	bl	800128c <Micros>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <EXTI9_5_IRQHandler+0x84>)
 8001bfe:	601a      	str	r2, [r3, #0]
		//downTimeEnd = Micros();
		downTimeEnd = upTimeStart;
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <EXTI9_5_IRQHandler+0x84>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <EXTI9_5_IRQHandler+0x88>)
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	e021      	b.n	8001c4e <EXTI9_5_IRQHandler+0x76>
		//}
	}
	else
	{

		downTimeStart = Micros();
 8001c0a:	f7ff fb3f 	bl	800128c <Micros>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <EXTI9_5_IRQHandler+0x8c>)
 8001c12:	601a      	str	r2, [r3, #0]
		//upTimeEnd = Micros();
		upTimeEnd = downTimeStart;
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <EXTI9_5_IRQHandler+0x8c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <EXTI9_5_IRQHandler+0x90>)
 8001c1a:	6013      	str	r3, [r2, #0]
		if(upTimeStart != 0)
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <EXTI9_5_IRQHandler+0x84>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d014      	beq.n	8001c4e <EXTI9_5_IRQHandler+0x76>
		{
			DHT22_Bit_Time[currentBit] = upTimeEnd - upTimeStart;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <EXTI9_5_IRQHandler+0x94>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <EXTI9_5_IRQHandler+0x90>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <EXTI9_5_IRQHandler+0x84>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <EXTI9_5_IRQHandler+0x98>)
 8001c3e:	545a      	strb	r2, [r3, r1]
			currentBit++;
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <EXTI9_5_IRQHandler+0x94>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <EXTI9_5_IRQHandler+0x94>)
 8001c4c:	701a      	strb	r2, [r3, #0]


	//Need to count the length of pulses for DHT22 Data

    /* Clear the  EXTI line 8 pending bit */
    EXTI_ClearITPendingBit(EXTI_Line6);
 8001c4e:	2040      	movs	r0, #64	; 0x40
 8001c50:	f000 fdb8 	bl	80027c4 <EXTI_ClearITPendingBit>
  }
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40010c00 	.word	0x40010c00
 8001c5c:	20000110 	.word	0x20000110
 8001c60:	2000011c 	.word	0x2000011c
 8001c64:	20000118 	.word	0x20000118
 8001c68:	20000114 	.word	0x20000114
 8001c6c:	20000120 	.word	0x20000120
 8001c70:	2000079c 	.word	0x2000079c

08001c74 <ClearArray_Size>:
{
	memset(buffer, '1', size);
}

void ClearArray_Size(char buffer[], uint16_t size)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
	memset(buffer, '\0', size);
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	461a      	mov	r2, r3
 8001c84:	2100      	movs	r1, #0
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 ff8f 	bl	8002baa <memset>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	8a1b      	ldrh	r3, [r3, #16]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc0:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	88db      	ldrh	r3, [r3, #6]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	899b      	ldrh	r3, [r3, #12]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ce6:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001cea:	4013      	ands	r3, r2
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	889a      	ldrh	r2, [r3, #4]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	891b      	ldrh	r3, [r3, #8]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d06:	4313      	orrs	r3, r2
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	8a9b      	ldrh	r3, [r3, #20]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d1c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001d20:	4013      	ands	r3, r2
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	899b      	ldrh	r3, [r3, #12]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fa33 	bl	80021a8 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	4a2e      	ldr	r2, [pc, #184]	; (8001e00 <USART_Init+0x16c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d102      	bne.n	8001d50 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d4e:	e001      	b.n	8001d54 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	899b      	ldrh	r3, [r3, #12]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	da0c      	bge.n	8001d7a <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	009a      	lsls	r2, r3, #2
 8001d6a:	441a      	add	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
 8001d78:	e00b      	b.n	8001d92 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	009a      	lsls	r2, r3, #2
 8001d84:	441a      	add	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <USART_Init+0x170>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	2264      	movs	r2, #100	; 0x64
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	899b      	ldrh	r3, [r3, #12]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	da0c      	bge.n	8001dd6 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	3332      	adds	r3, #50	; 0x32
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <USART_Init+0x170>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	095b      	lsrs	r3, r3, #5
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd4:	e00b      	b.n	8001dee <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	3332      	adds	r3, #50	; 0x32
 8001ddc:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <USART_Init+0x170>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dea:	4313      	orrs	r3, r2
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	811a      	strh	r2, [r3, #8]
}
 8001df6:	bf00      	nop
 8001df8:	3730      	adds	r7, #48	; 0x30
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40013800 	.word	0x40013800
 8001e04:	51eb851f 	.word	0x51eb851f

08001e08 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d008      	beq.n	8001e2c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	899b      	ldrh	r3, [r3, #12]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8001e2a:	e007      	b.n	8001e3c <USART_Cmd+0x34>
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	899b      	ldrh	r3, [r3, #12]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	819a      	strh	r2, [r3, #12]
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d103      	bne.n	8001e96 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	330c      	adds	r3, #12
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e009      	b.n	8001eaa <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d103      	bne.n	8001ea4 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3310      	adds	r3, #16
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e002      	b.n	8001eaa <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3314      	adds	r3, #20
 8001ea8:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001eaa:	787b      	ldrb	r3, [r7, #1]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	6811      	ldr	r1, [r2, #0]
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001ebc:	e006      	b.n	8001ecc <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	6811      	ldr	r1, [r2, #0]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	43d2      	mvns	r2, r2
 8001ec8:	400a      	ands	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
  }
}
 8001ecc:	bf00      	nop
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	8a9b      	ldrh	r3, [r3, #20]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 8001efe:	e009      	b.n	8001f14 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	8a9b      	ldrh	r3, [r3, #20]
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	829a      	strh	r2, [r3, #20]
  }
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	809a      	strh	r2, [r3, #4]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop

08001f44 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e001      	b.n	8001f6e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop

08001f7c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f80:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <RCC_DeInit+0x54>)
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <RCC_DeInit+0x54>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001f8c:	4910      	ldr	r1, [pc, #64]	; (8001fd0 <RCC_DeInit+0x54>)
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <RCC_DeInit+0x54>)
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <RCC_DeInit+0x58>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <RCC_DeInit+0x54>)
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <RCC_DeInit+0x54>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fa8:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <RCC_DeInit+0x54>)
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <RCC_DeInit+0x54>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <RCC_DeInit+0x54>)
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <RCC_DeInit+0x54>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001fbe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <RCC_DeInit+0x54>)
 8001fc2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fc6:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	f8ff0000 	.word	0xf8ff0000

08001fd8 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8001fe0:	4a13      	ldr	r2, [pc, #76]	; (8002030 <RCC_HSEConfig+0x58>)
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <RCC_HSEConfig+0x58>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8001fec:	4a10      	ldr	r2, [pc, #64]	; (8002030 <RCC_HSEConfig+0x58>)
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <RCC_HSEConfig+0x58>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff6:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffe:	d003      	beq.n	8002008 <RCC_HSEConfig+0x30>
 8002000:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002004:	d007      	beq.n	8002016 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8002006:	e00d      	b.n	8002024 <RCC_HSEConfig+0x4c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8002008:	4a09      	ldr	r2, [pc, #36]	; (8002030 <RCC_HSEConfig+0x58>)
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <RCC_HSEConfig+0x58>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002012:	6013      	str	r3, [r2, #0]
      break;
 8002014:	e006      	b.n	8002024 <RCC_HSEConfig+0x4c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8002016:	4a06      	ldr	r2, [pc, #24]	; (8002030 <RCC_HSEConfig+0x58>)
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <RCC_HSEConfig+0x58>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8002020:	6013      	str	r3, [r2, #0]
      break;
 8002022:	bf00      	nop
      
    default:
      break;
  }
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000

08002034 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <RCC_PLLConfig+0x38>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800204e:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	4313      	orrs	r3, r2
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800205c:	4a03      	ldr	r2, [pc, #12]	; (800206c <RCC_PLLConfig+0x38>)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6053      	str	r3, [r2, #4]
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40021000 	.word	0x40021000

08002070 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <RCC_PLLCmd+0x1c>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	42420060 	.word	0x42420060

08002090 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <RCC_SYSCLKConfig+0x34>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f023 0303 	bic.w	r3, r3, #3
 80020a8:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <RCC_SYSCLKConfig+0x34>)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6053      	str	r3, [r2, #4]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000

080020c8 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <RCC_HCLKConfig+0x34>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020e0:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <RCC_HCLKConfig+0x34>)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6053      	str	r3, [r2, #4]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000

08002100 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <RCC_PCLK1Config+0x34>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002118:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <RCC_PCLK1Config+0x34>)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6053      	str	r3, [r2, #4]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000

08002138 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <RCC_PCLK2Config+0x34>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002150:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800215c:	4a03      	ldr	r2, [pc, #12]	; (800216c <RCC_PCLK2Config+0x34>)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6053      	str	r3, [r2, #4]
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	40021000 	.word	0x40021000

08002170 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <RCC_ADCCLKConfig+0x34>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002188:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002192:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <RCC_ADCCLKConfig+0x34>)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6053      	str	r3, [r2, #4]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000

080021a8 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80021c0:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <RCC_GetClocksFreq+0x14c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d007      	beq.n	80021e0 <RCC_GetClocksFreq+0x38>
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d009      	beq.n	80021e8 <RCC_GetClocksFreq+0x40>
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d133      	bne.n	8002240 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a47      	ldr	r2, [pc, #284]	; (80022f8 <RCC_GetClocksFreq+0x150>)
 80021dc:	601a      	str	r2, [r3, #0]
      break;
 80021de:	e033      	b.n	8002248 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <RCC_GetClocksFreq+0x150>)
 80021e4:	601a      	str	r2, [r3, #0]
      break;
 80021e6:	e02f      	b.n	8002248 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80021e8:	4b42      	ldr	r3, [pc, #264]	; (80022f4 <RCC_GetClocksFreq+0x14c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021f0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80021f2:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <RCC_GetClocksFreq+0x14c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	0c9b      	lsrs	r3, r3, #18
 8002200:	3302      	adds	r3, #2
 8002202:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4a3b      	ldr	r2, [pc, #236]	; (80022fc <RCC_GetClocksFreq+0x154>)
 800220e:	fb02 f203 	mul.w	r2, r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8002216:	e017      	b.n	8002248 <RCC_GetClocksFreq+0xa0>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8002218:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <RCC_GetClocksFreq+0x14c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4a35      	ldr	r2, [pc, #212]	; (80022fc <RCC_GetClocksFreq+0x154>)
 8002228:	fb02 f203 	mul.w	r2, r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8002230:	e00a      	b.n	8002248 <RCC_GetClocksFreq+0xa0>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4a30      	ldr	r2, [pc, #192]	; (80022f8 <RCC_GetClocksFreq+0x150>)
 8002236:	fb02 f203 	mul.w	r2, r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800223e:	e003      	b.n	8002248 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a2d      	ldr	r2, [pc, #180]	; (80022f8 <RCC_GetClocksFreq+0x150>)
 8002244:	601a      	str	r2, [r3, #0]
      break;
 8002246:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <RCC_GetClocksFreq+0x14c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002250:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8002258:	4a29      	ldr	r2, [pc, #164]	; (8002300 <RCC_GetClocksFreq+0x158>)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	4413      	add	r3, r2
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	40da      	lsrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <RCC_GetClocksFreq+0x14c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002278:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <RCC_GetClocksFreq+0x158>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	4413      	add	r3, r2
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	40da      	lsrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <RCC_GetClocksFreq+0x14c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022a0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	0adb      	lsrs	r3, r3, #11
 80022a6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80022a8:	4a15      	ldr	r2, [pc, #84]	; (8002300 <RCC_GetClocksFreq+0x158>)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	4413      	add	r3, r2
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	40da      	lsrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <RCC_GetClocksFreq+0x14c>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022c8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	0b9b      	lsrs	r3, r3, #14
 80022ce:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80022d0:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <RCC_GetClocksFreq+0x15c>)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	4413      	add	r3, r2
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40021000 	.word	0x40021000
 80022f8:	007a1200 	.word	0x007a1200
 80022fc:	003d0900 	.word	0x003d0900
 8002300:	20000028 	.word	0x20000028
 8002304:	20000038 	.word	0x20000038

08002308 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800231a:	4909      	ldr	r1, [pc, #36]	; (8002340 <RCC_AHBPeriphClockCmd+0x38>)
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <RCC_AHBPeriphClockCmd+0x38>)
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4313      	orrs	r3, r2
 8002324:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8002326:	e006      	b.n	8002336 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8002328:	4905      	ldr	r1, [pc, #20]	; (8002340 <RCC_AHBPeriphClockCmd+0x38>)
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <RCC_AHBPeriphClockCmd+0x38>)
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	43db      	mvns	r3, r3
 8002332:	4013      	ands	r3, r2
 8002334:	614b      	str	r3, [r1, #20]
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40021000 	.word	0x40021000

08002344 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002356:	4909      	ldr	r1, [pc, #36]	; (800237c <RCC_APB2PeriphClockCmd+0x38>)
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <RCC_APB2PeriphClockCmd+0x38>)
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4313      	orrs	r3, r2
 8002360:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002362:	e006      	b.n	8002372 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002364:	4905      	ldr	r1, [pc, #20]	; (800237c <RCC_APB2PeriphClockCmd+0x38>)
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <RCC_APB2PeriphClockCmd+0x38>)
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	43db      	mvns	r3, r3
 800236e:	4013      	ands	r3, r2
 8002370:	618b      	str	r3, [r1, #24]
  }
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	40021000 	.word	0x40021000

08002380 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002392:	4909      	ldr	r1, [pc, #36]	; (80023b8 <RCC_APB1PeriphClockCmd+0x38>)
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <RCC_APB1PeriphClockCmd+0x38>)
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4313      	orrs	r3, r2
 800239c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800239e:	e006      	b.n	80023ae <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80023a0:	4905      	ldr	r1, [pc, #20]	; (80023b8 <RCC_APB1PeriphClockCmd+0x38>)
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <RCC_APB1PeriphClockCmd+0x38>)
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4013      	ands	r3, r2
 80023ac:	61cb      	str	r3, [r1, #28]
  }
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000

080023bc <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d103      	bne.n	80023e8 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <RCC_GetFlagStatus+0x70>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e009      	b.n	80023fc <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d103      	bne.n	80023f6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <RCC_GetFlagStatus+0x70>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e002      	b.n	80023fc <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <RCC_GetFlagStatus+0x70>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8002414:	2301      	movs	r3, #1
 8002416:	74fb      	strb	r3, [r7, #19]
 8002418:	e001      	b.n	800241e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 800241e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002420:	4618      	mov	r0, r3
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000

08002430 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	78db      	ldrb	r3, [r3, #3]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	78db      	ldrb	r3, [r3, #3]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	789b      	ldrb	r3, [r3, #2]
 800246c:	461a      	mov	r2, r3
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	4313      	orrs	r3, r2
 8002472:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d044      	beq.n	8002508 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	e038      	b.n	80024fc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800248a:	2201      	movs	r2, #1
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d126      	bne.n	80024f6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80024ae:	220f      	movs	r2, #15
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4013      	ands	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	78db      	ldrb	r3, [r3, #3]
 80024d4:	2b28      	cmp	r3, #40	; 0x28
 80024d6:	d105      	bne.n	80024e4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80024d8:	2201      	movs	r2, #1
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	409a      	lsls	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	615a      	str	r2, [r3, #20]
 80024e2:	e008      	b.n	80024f6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	78db      	ldrb	r3, [r3, #3]
 80024e8:	2b48      	cmp	r3, #72	; 0x48
 80024ea:	d104      	bne.n	80024f6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80024ec:	2201      	movs	r2, #1
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	409a      	lsls	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b07      	cmp	r3, #7
 8002500:	d9c3      	bls.n	800248a <GPIO_Init+0x5a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	2bff      	cmp	r3, #255	; 0xff
 800250e:	d946      	bls.n	800259e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002516:	2300      	movs	r3, #0
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	e03a      	b.n	8002592 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	3308      	adds	r3, #8
 8002520:	2201      	movs	r2, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	429a      	cmp	r2, r3
 800253a:	d127      	bne.n	800258c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8002542:	220f      	movs	r2, #15
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	43db      	mvns	r3, r3
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4013      	ands	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	78db      	ldrb	r3, [r3, #3]
 8002568:	2b28      	cmp	r3, #40	; 0x28
 800256a:	d105      	bne.n	8002578 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	3308      	adds	r3, #8
 8002570:	2201      	movs	r2, #1
 8002572:	409a      	lsls	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	78db      	ldrb	r3, [r3, #3]
 800257c:	2b48      	cmp	r3, #72	; 0x48
 800257e:	d105      	bne.n	800258c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	3308      	adds	r3, #8
 8002584:	2201      	movs	r2, #1
 8002586:	409a      	lsls	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	3301      	adds	r3, #1
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b07      	cmp	r3, #7
 8002596:	d9c1      	bls.n	800251c <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	605a      	str	r2, [r3, #4]
  }
}
 800259e:	bf00      	nop
 80025a0:	3724      	adds	r7, #36	; 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e001      	b.n	80025ce <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop

080025dc <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80025dc:	b490      	push	{r4, r7}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	460a      	mov	r2, r1
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	4613      	mov	r3, r2
 80025ea:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8002600:	4916      	ldr	r1, [pc, #88]	; (800265c <GPIO_EXTILineConfig+0x80>)
 8002602:	79bb      	ldrb	r3, [r7, #6]
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	b2db      	uxtb	r3, r3
 8002608:	4618      	mov	r0, r3
 800260a:	4a14      	ldr	r2, [pc, #80]	; (800265c <GPIO_EXTILineConfig+0x80>)
 800260c:	79bb      	ldrb	r3, [r7, #6]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	b2db      	uxtb	r3, r3
 8002612:	3302      	adds	r3, #2
 8002614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	401a      	ands	r2, r3
 800261e:	1c83      	adds	r3, r0, #2
 8002620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8002624:	480d      	ldr	r0, [pc, #52]	; (800265c <GPIO_EXTILineConfig+0x80>)
 8002626:	79bb      	ldrb	r3, [r7, #6]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461c      	mov	r4, r3
 800262e:	4a0b      	ldr	r2, [pc, #44]	; (800265c <GPIO_EXTILineConfig+0x80>)
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3302      	adds	r3, #2
 8002638:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800263c:	79f9      	ldrb	r1, [r7, #7]
 800263e:	79bb      	ldrb	r3, [r7, #6]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	431a      	orrs	r2, r3
 800264c:	1ca3      	adds	r3, r4, #2
 800264e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bc90      	pop	{r4, r7}
 800265a:	4770      	bx	lr
 800265c:	40010000 	.word	0x40010000

08002660 <FLASH_SetLatency>:
  *     @arg FLASH_Latency_1: FLASH One Latency cycle
  *     @arg FLASH_Latency_2: FLASH Two Latency cycles
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <FLASH_SetLatency+0x34>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002678:	60fb      	str	r3, [r7, #12]
  tmpreg |= FLASH_Latency;
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <FLASH_SetLatency+0x34>)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40022000 	.word	0x40022000

08002698 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80026a4:	4b34      	ldr	r3, [pc, #208]	; (8002778 <EXTI_Init+0xe0>)
 80026a6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	799b      	ldrb	r3, [r3, #6]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d04f      	beq.n	8002750 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80026b0:	4931      	ldr	r1, [pc, #196]	; (8002778 <EXTI_Init+0xe0>)
 80026b2:	4b31      	ldr	r3, [pc, #196]	; (8002778 <EXTI_Init+0xe0>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	4013      	ands	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80026c0:	492d      	ldr	r1, [pc, #180]	; (8002778 <EXTI_Init+0xe0>)
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <EXTI_Init+0xe0>)
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	4013      	ands	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	791b      	ldrb	r3, [r3, #4]
 80026d4:	461a      	mov	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4413      	add	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	6811      	ldr	r1, [r2, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80026ea:	4923      	ldr	r1, [pc, #140]	; (8002778 <EXTI_Init+0xe0>)
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <EXTI_Init+0xe0>)
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	4013      	ands	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80026fa:	491f      	ldr	r1, [pc, #124]	; (8002778 <EXTI_Init+0xe0>)
 80026fc:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <EXTI_Init+0xe0>)
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	43db      	mvns	r3, r3
 8002706:	4013      	ands	r3, r2
 8002708:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	795b      	ldrb	r3, [r3, #5]
 800270e:	2b10      	cmp	r3, #16
 8002710:	d10e      	bne.n	8002730 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8002712:	4919      	ldr	r1, [pc, #100]	; (8002778 <EXTI_Init+0xe0>)
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <EXTI_Init+0xe0>)
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8002720:	4915      	ldr	r1, [pc, #84]	; (8002778 <EXTI_Init+0xe0>)
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <EXTI_Init+0xe0>)
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800272e:	e01d      	b.n	800276c <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <EXTI_Init+0xe0>)
 8002732:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	795b      	ldrb	r3, [r3, #5]
 8002738:	461a      	mov	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4413      	add	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	6811      	ldr	r1, [r2, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800274e:	e00d      	b.n	800276c <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	791b      	ldrb	r3, [r3, #4]
 8002754:	461a      	mov	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	6811      	ldr	r1, [r2, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	43d2      	mvns	r2, r2
 8002768:	400a      	ands	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
  }
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40010400 	.word	0x40010400

0800277c <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <EXTI_GetITStatus+0x44>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4013      	ands	r3, r2
 8002794:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <EXTI_GetITStatus+0x44>)
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <EXTI_GetITStatus+0x32>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	e001      	b.n	80027b2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40010400 	.word	0x40010400

080027c4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80027cc:	4a03      	ldr	r2, [pc, #12]	; (80027dc <EXTI_ClearITPendingBit+0x18>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6153      	str	r3, [r2, #20]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40010400 	.word	0x40010400

080027e0 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80027f0:	4013      	ands	r3, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a43      	ldr	r2, [pc, #268]	; (8002920 <DMA_DeInit+0x140>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d106      	bne.n	8002824 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8002816:	4a43      	ldr	r2, [pc, #268]	; (8002924 <DMA_DeInit+0x144>)
 8002818:	4b42      	ldr	r3, [pc, #264]	; (8002924 <DMA_DeInit+0x144>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f043 030f 	orr.w	r3, r3, #15
 8002820:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8002822:	e077      	b.n	8002914 <DMA_DeInit+0x134>
  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a40      	ldr	r2, [pc, #256]	; (8002928 <DMA_DeInit+0x148>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d106      	bne.n	800283a <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 800282c:	4a3d      	ldr	r2, [pc, #244]	; (8002924 <DMA_DeInit+0x144>)
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <DMA_DeInit+0x144>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002836:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8002838:	e06c      	b.n	8002914 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a3b      	ldr	r2, [pc, #236]	; (800292c <DMA_DeInit+0x14c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d106      	bne.n	8002850 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8002842:	4a38      	ldr	r2, [pc, #224]	; (8002924 <DMA_DeInit+0x144>)
 8002844:	4b37      	ldr	r3, [pc, #220]	; (8002924 <DMA_DeInit+0x144>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800284c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 800284e:	e061      	b.n	8002914 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a37      	ldr	r2, [pc, #220]	; (8002930 <DMA_DeInit+0x150>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d106      	bne.n	8002866 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8002858:	4a32      	ldr	r2, [pc, #200]	; (8002924 <DMA_DeInit+0x144>)
 800285a:	4b32      	ldr	r3, [pc, #200]	; (8002924 <DMA_DeInit+0x144>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8002862:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8002864:	e056      	b.n	8002914 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a32      	ldr	r2, [pc, #200]	; (8002934 <DMA_DeInit+0x154>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d106      	bne.n	800287c <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 800286e:	4a2d      	ldr	r2, [pc, #180]	; (8002924 <DMA_DeInit+0x144>)
 8002870:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <DMA_DeInit+0x144>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8002878:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 800287a:	e04b      	b.n	8002914 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a2e      	ldr	r2, [pc, #184]	; (8002938 <DMA_DeInit+0x158>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d106      	bne.n	8002892 <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8002884:	4a27      	ldr	r2, [pc, #156]	; (8002924 <DMA_DeInit+0x144>)
 8002886:	4b27      	ldr	r3, [pc, #156]	; (8002924 <DMA_DeInit+0x144>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800288e:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8002890:	e040      	b.n	8002914 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a29      	ldr	r2, [pc, #164]	; (800293c <DMA_DeInit+0x15c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d106      	bne.n	80028a8 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 800289a:	4a22      	ldr	r2, [pc, #136]	; (8002924 <DMA_DeInit+0x144>)
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <DMA_DeInit+0x144>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80028a4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 80028a6:	e035      	b.n	8002914 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a25      	ldr	r2, [pc, #148]	; (8002940 <DMA_DeInit+0x160>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d106      	bne.n	80028be <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 80028b0:	4a24      	ldr	r2, [pc, #144]	; (8002944 <DMA_DeInit+0x164>)
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <DMA_DeInit+0x164>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f043 030f 	orr.w	r3, r3, #15
 80028ba:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 80028bc:	e02a      	b.n	8002914 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a21      	ldr	r2, [pc, #132]	; (8002948 <DMA_DeInit+0x168>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d106      	bne.n	80028d4 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 80028c6:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <DMA_DeInit+0x164>)
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <DMA_DeInit+0x164>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80028d0:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 80028d2:	e01f      	b.n	8002914 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a1d      	ldr	r2, [pc, #116]	; (800294c <DMA_DeInit+0x16c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d106      	bne.n	80028ea <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 80028dc:	4a19      	ldr	r2, [pc, #100]	; (8002944 <DMA_DeInit+0x164>)
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <DMA_DeInit+0x164>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80028e6:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 80028e8:	e014      	b.n	8002914 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a18      	ldr	r2, [pc, #96]	; (8002950 <DMA_DeInit+0x170>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d106      	bne.n	8002900 <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 80028f2:	4a14      	ldr	r2, [pc, #80]	; (8002944 <DMA_DeInit+0x164>)
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <DMA_DeInit+0x164>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80028fc:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 80028fe:	e009      	b.n	8002914 <DMA_DeInit+0x134>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a14      	ldr	r2, [pc, #80]	; (8002954 <DMA_DeInit+0x174>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d105      	bne.n	8002914 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8002908:	4a0e      	ldr	r2, [pc, #56]	; (8002944 <DMA_DeInit+0x164>)
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <DMA_DeInit+0x164>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8002912:	6053      	str	r3, [r2, #4]
    }
  }
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40020008 	.word	0x40020008
 8002924:	40020000 	.word	0x40020000
 8002928:	4002001c 	.word	0x4002001c
 800292c:	40020030 	.word	0x40020030
 8002930:	40020044 	.word	0x40020044
 8002934:	40020058 	.word	0x40020058
 8002938:	4002006c 	.word	0x4002006c
 800293c:	40020080 	.word	0x40020080
 8002940:	40020408 	.word	0x40020408
 8002944:	40020400 	.word	0x40020400
 8002948:	4002041c 	.word	0x4002041c
 800294c:	40020430 	.word	0x40020430
 8002950:	40020444 	.word	0x40020444
 8002954:	40020458 	.word	0x40020458

08002958 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002976:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8002986:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002992:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800299e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	60da      	str	r2, [r3, #12]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 80029f2:	e006      	b.n	8002a02 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80029fc:	4013      	ands	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
  }
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8002a1e:	4a06      	ldr	r2, [pc, #24]	; (8002a38 <DMA_ClearFlag+0x2c>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8002a24:	e002      	b.n	8002a2c <DMA_ClearFlag+0x20>
    DMA2->IFCR = DMAy_FLAG;
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8002a26:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <DMA_ClearFlag+0x30>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6053      	str	r3, [r2, #4]
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	40020000 	.word	0x40020000

08002a40 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	230f      	movs	r3, #15
 8002a52:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	78db      	ldrb	r3, [r3, #3]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d03a      	beq.n	8002ad2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <NVIC_Init+0xbc>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f1c3 0304 	rsb	r3, r3, #4
 8002a70:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	461a      	mov	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	789b      	ldrb	r3, [r3, #2]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002aa0:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <NVIC_Init+0xc0>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	6979      	ldr	r1, [r7, #20]
 8002aa8:	b2c9      	uxtb	r1, r1
 8002aaa:	4413      	add	r3, r2
 8002aac:	460a      	mov	r2, r1
 8002aae:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <NVIC_Init+0xc0>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002acc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002ad0:	e00f      	b.n	8002af2 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002ad2:	490b      	ldr	r1, [pc, #44]	; (8002b00 <NVIC_Init+0xc0>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002aea:	f100 0320 	add.w	r3, r0, #32
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002af2:	bf00      	nop
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00
 8002b00:	e000e100 	.word	0xe000e100

08002b04 <atoi>:
 8002b04:	220a      	movs	r2, #10
 8002b06:	2100      	movs	r1, #0
 8002b08:	f000 bdd8 	b.w	80036bc <strtol>

08002b0c <__libc_init_array>:
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <__libc_init_array+0x3c>)
 8002b0e:	b570      	push	{r4, r5, r6, lr}
 8002b10:	461e      	mov	r6, r3
 8002b12:	4c0e      	ldr	r4, [pc, #56]	; (8002b4c <__libc_init_array+0x40>)
 8002b14:	2500      	movs	r5, #0
 8002b16:	1ae4      	subs	r4, r4, r3
 8002b18:	10a4      	asrs	r4, r4, #2
 8002b1a:	42a5      	cmp	r5, r4
 8002b1c:	d004      	beq.n	8002b28 <__libc_init_array+0x1c>
 8002b1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b22:	4798      	blx	r3
 8002b24:	3501      	adds	r5, #1
 8002b26:	e7f8      	b.n	8002b1a <__libc_init_array+0xe>
 8002b28:	f002 f966 	bl	8004df8 <_init>
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <__libc_init_array+0x44>)
 8002b2e:	4c09      	ldr	r4, [pc, #36]	; (8002b54 <__libc_init_array+0x48>)
 8002b30:	461e      	mov	r6, r3
 8002b32:	1ae4      	subs	r4, r4, r3
 8002b34:	10a4      	asrs	r4, r4, #2
 8002b36:	2500      	movs	r5, #0
 8002b38:	42a5      	cmp	r5, r4
 8002b3a:	d004      	beq.n	8002b46 <__libc_init_array+0x3a>
 8002b3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b40:	4798      	blx	r3
 8002b42:	3501      	adds	r5, #1
 8002b44:	e7f8      	b.n	8002b38 <__libc_init_array+0x2c>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	080051b0 	.word	0x080051b0
 8002b4c:	080051b0 	.word	0x080051b0
 8002b50:	080051b0 	.word	0x080051b0
 8002b54:	080051b4 	.word	0x080051b4

08002b58 <memcpy>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	1e43      	subs	r3, r0, #1
 8002b5c:	440a      	add	r2, r1
 8002b5e:	4291      	cmp	r1, r2
 8002b60:	d004      	beq.n	8002b6c <memcpy+0x14>
 8002b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b6a:	e7f8      	b.n	8002b5e <memcpy+0x6>
 8002b6c:	bd10      	pop	{r4, pc}

08002b6e <memmem>:
 8002b6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b72:	4607      	mov	r7, r0
 8002b74:	4688      	mov	r8, r1
 8002b76:	4691      	mov	r9, r2
 8002b78:	461e      	mov	r6, r3
 8002b7a:	b18b      	cbz	r3, 8002ba0 <memmem+0x32>
 8002b7c:	460d      	mov	r5, r1
 8002b7e:	ebc5 0008 	rsb	r0, r5, r8
 8002b82:	42b5      	cmp	r5, r6
 8002b84:	eb07 0400 	add.w	r4, r7, r0
 8002b88:	d307      	bcc.n	8002b9a <memmem+0x2c>
 8002b8a:	4632      	mov	r2, r6
 8002b8c:	4649      	mov	r1, r9
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f001 fbdc 	bl	800434c <memcmp>
 8002b94:	b130      	cbz	r0, 8002ba4 <memmem+0x36>
 8002b96:	3d01      	subs	r5, #1
 8002b98:	e7f1      	b.n	8002b7e <memmem+0x10>
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002baa <memset>:
 8002baa:	4603      	mov	r3, r0
 8002bac:	4402      	add	r2, r0
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d002      	beq.n	8002bb8 <memset+0xe>
 8002bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb6:	e7fa      	b.n	8002bae <memset+0x4>
 8002bb8:	4770      	bx	lr

08002bba <__cvt>:
 8002bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	461e      	mov	r6, r3
 8002bc6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002bc8:	bfb8      	it	lt
 8002bca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002bce:	f027 0720 	bic.w	r7, r7, #32
 8002bd2:	bfb6      	itet	lt
 8002bd4:	461e      	movlt	r6, r3
 8002bd6:	2300      	movge	r3, #0
 8002bd8:	232d      	movlt	r3, #45	; 0x2d
 8002bda:	2f46      	cmp	r7, #70	; 0x46
 8002bdc:	4614      	mov	r4, r2
 8002bde:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002be0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002be4:	700b      	strb	r3, [r1, #0]
 8002be6:	d003      	beq.n	8002bf0 <__cvt+0x36>
 8002be8:	2f45      	cmp	r7, #69	; 0x45
 8002bea:	d103      	bne.n	8002bf4 <__cvt+0x3a>
 8002bec:	3501      	adds	r5, #1
 8002bee:	e001      	b.n	8002bf4 <__cvt+0x3a>
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e000      	b.n	8002bf6 <__cvt+0x3c>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	aa07      	add	r2, sp, #28
 8002bf8:	9204      	str	r2, [sp, #16]
 8002bfa:	aa06      	add	r2, sp, #24
 8002bfc:	9203      	str	r2, [sp, #12]
 8002bfe:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8002c02:	4622      	mov	r2, r4
 8002c04:	4633      	mov	r3, r6
 8002c06:	f000 fdef 	bl	80037e8 <_dtoa_r>
 8002c0a:	2f47      	cmp	r7, #71	; 0x47
 8002c0c:	4680      	mov	r8, r0
 8002c0e:	d102      	bne.n	8002c16 <__cvt+0x5c>
 8002c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002c12:	07db      	lsls	r3, r3, #31
 8002c14:	d528      	bpl.n	8002c68 <__cvt+0xae>
 8002c16:	2f46      	cmp	r7, #70	; 0x46
 8002c18:	eb08 0905 	add.w	r9, r8, r5
 8002c1c:	d111      	bne.n	8002c42 <__cvt+0x88>
 8002c1e:	f898 3000 	ldrb.w	r3, [r8]
 8002c22:	2b30      	cmp	r3, #48	; 0x30
 8002c24:	d10a      	bne.n	8002c3c <__cvt+0x82>
 8002c26:	2200      	movs	r2, #0
 8002c28:	2300      	movs	r3, #0
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	4631      	mov	r1, r6
 8002c2e:	f7fd fec1 	bl	80009b4 <__aeabi_dcmpeq>
 8002c32:	b918      	cbnz	r0, 8002c3c <__cvt+0x82>
 8002c34:	f1c5 0501 	rsb	r5, r5, #1
 8002c38:	f8ca 5000 	str.w	r5, [sl]
 8002c3c:	f8da 3000 	ldr.w	r3, [sl]
 8002c40:	4499      	add	r9, r3
 8002c42:	2200      	movs	r2, #0
 8002c44:	2300      	movs	r3, #0
 8002c46:	4620      	mov	r0, r4
 8002c48:	4631      	mov	r1, r6
 8002c4a:	f7fd feb3 	bl	80009b4 <__aeabi_dcmpeq>
 8002c4e:	b908      	cbnz	r0, 8002c54 <__cvt+0x9a>
 8002c50:	2230      	movs	r2, #48	; 0x30
 8002c52:	e002      	b.n	8002c5a <__cvt+0xa0>
 8002c54:	f8cd 901c 	str.w	r9, [sp, #28]
 8002c58:	e006      	b.n	8002c68 <__cvt+0xae>
 8002c5a:	9b07      	ldr	r3, [sp, #28]
 8002c5c:	4599      	cmp	r9, r3
 8002c5e:	d903      	bls.n	8002c68 <__cvt+0xae>
 8002c60:	1c59      	adds	r1, r3, #1
 8002c62:	9107      	str	r1, [sp, #28]
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e7f8      	b.n	8002c5a <__cvt+0xa0>
 8002c68:	4640      	mov	r0, r8
 8002c6a:	9b07      	ldr	r3, [sp, #28]
 8002c6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002c6e:	ebc8 0303 	rsb	r3, r8, r3
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	b008      	add	sp, #32
 8002c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002c7a <__exponent>:
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c7e:	2900      	cmp	r1, #0
 8002c80:	bfb8      	it	lt
 8002c82:	4249      	neglt	r1, r1
 8002c84:	f803 2b02 	strb.w	r2, [r3], #2
 8002c88:	bfb4      	ite	lt
 8002c8a:	222d      	movlt	r2, #45	; 0x2d
 8002c8c:	222b      	movge	r2, #43	; 0x2b
 8002c8e:	2909      	cmp	r1, #9
 8002c90:	7042      	strb	r2, [r0, #1]
 8002c92:	dd1a      	ble.n	8002cca <__exponent+0x50>
 8002c94:	f10d 0207 	add.w	r2, sp, #7
 8002c98:	4616      	mov	r6, r2
 8002c9a:	250a      	movs	r5, #10
 8002c9c:	fb91 f4f5 	sdiv	r4, r1, r5
 8002ca0:	fb05 1114 	mls	r1, r5, r4, r1
 8002ca4:	2c09      	cmp	r4, #9
 8002ca6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002caa:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8002cae:	4621      	mov	r1, r4
 8002cb0:	dcf4      	bgt.n	8002c9c <__exponent+0x22>
 8002cb2:	3130      	adds	r1, #48	; 0x30
 8002cb4:	1e54      	subs	r4, r2, #1
 8002cb6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002cba:	42b4      	cmp	r4, r6
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	d20a      	bcs.n	8002cd6 <__exponent+0x5c>
 8002cc0:	f814 2b01 	ldrb.w	r2, [r4], #1
 8002cc4:	f803 2b01 	strb.w	r2, [r3], #1
 8002cc8:	e7f7      	b.n	8002cba <__exponent+0x40>
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2430      	movs	r4, #48	; 0x30
 8002cce:	4421      	add	r1, r4
 8002cd0:	f802 4b02 	strb.w	r4, [r2], #2
 8002cd4:	7059      	strb	r1, [r3, #1]
 8002cd6:	1a10      	subs	r0, r2, r0
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd70      	pop	{r4, r5, r6, pc}

08002cdc <_printf_float>:
 8002cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce0:	b091      	sub	sp, #68	; 0x44
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002ce8:	4616      	mov	r6, r2
 8002cea:	461f      	mov	r7, r3
 8002cec:	4605      	mov	r5, r0
 8002cee:	f001 fb13 	bl	8004318 <_localeconv_r>
 8002cf2:	6803      	ldr	r3, [r0, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cf8:	f7fd fa34 	bl	8000164 <strlen>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	930e      	str	r3, [sp, #56]	; 0x38
 8002d00:	f8d8 3000 	ldr.w	r3, [r8]
 8002d04:	900a      	str	r0, [sp, #40]	; 0x28
 8002d06:	3307      	adds	r3, #7
 8002d08:	f023 0307 	bic.w	r3, r3, #7
 8002d0c:	f103 0208 	add.w	r2, r3, #8
 8002d10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002d14:	f8d4 b000 	ldr.w	fp, [r4]
 8002d18:	f8c8 2000 	str.w	r2, [r8]
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002d24:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 8002d28:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
 8002d2c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002d30:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d32:	f04f 32ff 	mov.w	r2, #4294967295
 8002d36:	4ba7      	ldr	r3, [pc, #668]	; (8002fd4 <_printf_float+0x2f8>)
 8002d38:	4640      	mov	r0, r8
 8002d3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d3c:	f7fd fe6c 	bl	8000a18 <__aeabi_dcmpun>
 8002d40:	b9a0      	cbnz	r0, 8002d6c <_printf_float+0x90>
 8002d42:	f04f 32ff 	mov.w	r2, #4294967295
 8002d46:	4ba3      	ldr	r3, [pc, #652]	; (8002fd4 <_printf_float+0x2f8>)
 8002d48:	4640      	mov	r0, r8
 8002d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d4c:	f7fd fe46 	bl	80009dc <__aeabi_dcmple>
 8002d50:	b960      	cbnz	r0, 8002d6c <_printf_float+0x90>
 8002d52:	2200      	movs	r2, #0
 8002d54:	2300      	movs	r3, #0
 8002d56:	4640      	mov	r0, r8
 8002d58:	4651      	mov	r1, sl
 8002d5a:	f7fd fe35 	bl	80009c8 <__aeabi_dcmplt>
 8002d5e:	b110      	cbz	r0, 8002d66 <_printf_float+0x8a>
 8002d60:	232d      	movs	r3, #45	; 0x2d
 8002d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d66:	4b9c      	ldr	r3, [pc, #624]	; (8002fd8 <_printf_float+0x2fc>)
 8002d68:	4a9c      	ldr	r2, [pc, #624]	; (8002fdc <_printf_float+0x300>)
 8002d6a:	e00a      	b.n	8002d82 <_printf_float+0xa6>
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	4653      	mov	r3, sl
 8002d70:	4640      	mov	r0, r8
 8002d72:	4651      	mov	r1, sl
 8002d74:	f7fd fe50 	bl	8000a18 <__aeabi_dcmpun>
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	f000 8192 	beq.w	80030a2 <_printf_float+0x3c6>
 8002d7e:	4b98      	ldr	r3, [pc, #608]	; (8002fe0 <_printf_float+0x304>)
 8002d80:	4a98      	ldr	r2, [pc, #608]	; (8002fe4 <_printf_float+0x308>)
 8002d82:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002d86:	bf8c      	ite	hi
 8002d88:	4690      	movhi	r8, r2
 8002d8a:	4698      	movls	r8, r3
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	6123      	str	r3, [r4, #16]
 8002d90:	f02b 0304 	bic.w	r3, fp, #4
 8002d94:	6023      	str	r3, [r4, #0]
 8002d96:	f04f 0a00 	mov.w	sl, #0
 8002d9a:	e03d      	b.n	8002e18 <_printf_float+0x13c>
 8002d9c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8002da0:	f000 818a 	beq.w	80030b8 <_printf_float+0x3dc>
 8002da4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002da8:	f000 8186 	beq.w	80030b8 <_printf_float+0x3dc>
 8002dac:	6023      	str	r3, [r4, #0]
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	6863      	ldr	r3, [r4, #4]
 8002db2:	2100      	movs	r1, #0
 8002db4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002db8:	9005      	str	r0, [sp, #20]
 8002dba:	9202      	str	r2, [sp, #8]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4642      	mov	r2, r8
 8002dc0:	4653      	mov	r3, sl
 8002dc2:	9106      	str	r1, [sp, #24]
 8002dc4:	f8cd 9010 	str.w	r9, [sp, #16]
 8002dc8:	f8cd e00c 	str.w	lr, [sp, #12]
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f7ff fef4 	bl	8002bba <__cvt>
 8002dd2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8002dd6:	2b47      	cmp	r3, #71	; 0x47
 8002dd8:	4680      	mov	r8, r0
 8002dda:	f000 8184 	beq.w	80030e6 <_printf_float+0x40a>
 8002dde:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002de2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002de4:	f200 818d 	bhi.w	8003102 <_printf_float+0x426>
 8002de8:	3901      	subs	r1, #1
 8002dea:	464a      	mov	r2, r9
 8002dec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002df0:	910d      	str	r1, [sp, #52]	; 0x34
 8002df2:	f7ff ff42 	bl	8002c7a <__exponent>
 8002df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002df8:	4682      	mov	sl, r0
 8002dfa:	1883      	adds	r3, r0, r2
 8002dfc:	2a01      	cmp	r2, #1
 8002dfe:	6123      	str	r3, [r4, #16]
 8002e00:	f300 817c 	bgt.w	80030fc <_printf_float+0x420>
 8002e04:	6822      	ldr	r2, [r4, #0]
 8002e06:	07d1      	lsls	r1, r2, #31
 8002e08:	f100 8178 	bmi.w	80030fc <_printf_float+0x420>
 8002e0c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002e10:	b113      	cbz	r3, 8002e18 <_printf_float+0x13c>
 8002e12:	232d      	movs	r3, #45	; 0x2d
 8002e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e18:	9700      	str	r7, [sp, #0]
 8002e1a:	4633      	mov	r3, r6
 8002e1c:	aa0f      	add	r2, sp, #60	; 0x3c
 8002e1e:	4621      	mov	r1, r4
 8002e20:	4628      	mov	r0, r5
 8002e22:	f000 f99f 	bl	8003164 <_printf_common>
 8002e26:	3001      	adds	r0, #1
 8002e28:	d102      	bne.n	8002e30 <_printf_float+0x154>
 8002e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2e:	e196      	b.n	800315e <_printf_float+0x482>
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	055a      	lsls	r2, r3, #21
 8002e34:	d401      	bmi.n	8002e3a <_printf_float+0x15e>
 8002e36:	6923      	ldr	r3, [r4, #16]
 8002e38:	e065      	b.n	8002f06 <_printf_float+0x22a>
 8002e3a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002e3e:	f240 80d5 	bls.w	8002fec <_printf_float+0x310>
 8002e42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e46:	2200      	movs	r2, #0
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f7fd fdb3 	bl	80009b4 <__aeabi_dcmpeq>
 8002e4e:	b378      	cbz	r0, 8002eb0 <_printf_float+0x1d4>
 8002e50:	2301      	movs	r3, #1
 8002e52:	4a65      	ldr	r2, [pc, #404]	; (8002fe8 <_printf_float+0x30c>)
 8002e54:	4631      	mov	r1, r6
 8002e56:	4628      	mov	r0, r5
 8002e58:	47b8      	blx	r7
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d0e5      	beq.n	8002e2a <_printf_float+0x14e>
 8002e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e62:	429a      	cmp	r2, r3
 8002e64:	db0b      	blt.n	8002e7e <_printf_float+0x1a2>
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	07d8      	lsls	r0, r3, #31
 8002e6a:	d408      	bmi.n	8002e7e <_printf_float+0x1a2>
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	079b      	lsls	r3, r3, #30
 8002e70:	f140 8111 	bpl.w	8003096 <_printf_float+0x3ba>
 8002e74:	f04f 0800 	mov.w	r8, #0
 8002e78:	f104 0919 	add.w	r9, r4, #25
 8002e7c:	e106      	b.n	800308c <_printf_float+0x3b0>
 8002e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e82:	4631      	mov	r1, r6
 8002e84:	4628      	mov	r0, r5
 8002e86:	47b8      	blx	r7
 8002e88:	3001      	adds	r0, #1
 8002e8a:	d0ce      	beq.n	8002e2a <_printf_float+0x14e>
 8002e8c:	f04f 0800 	mov.w	r8, #0
 8002e90:	f104 091a 	add.w	r9, r4, #26
 8002e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e96:	3b01      	subs	r3, #1
 8002e98:	4598      	cmp	r8, r3
 8002e9a:	dae7      	bge.n	8002e6c <_printf_float+0x190>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	464a      	mov	r2, r9
 8002ea0:	4631      	mov	r1, r6
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	47b8      	blx	r7
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d0bf      	beq.n	8002e2a <_printf_float+0x14e>
 8002eaa:	f108 0801 	add.w	r8, r8, #1
 8002eae:	e7f1      	b.n	8002e94 <_printf_float+0x1b8>
 8002eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	dc29      	bgt.n	8002f0a <_printf_float+0x22e>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	4a4b      	ldr	r2, [pc, #300]	; (8002fe8 <_printf_float+0x30c>)
 8002eba:	4631      	mov	r1, r6
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	47b8      	blx	r7
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	d0b2      	beq.n	8002e2a <_printf_float+0x14e>
 8002ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ec6:	b923      	cbnz	r3, 8002ed2 <_printf_float+0x1f6>
 8002ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002eca:	b913      	cbnz	r3, 8002ed2 <_printf_float+0x1f6>
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	07d9      	lsls	r1, r3, #31
 8002ed0:	d5cc      	bpl.n	8002e6c <_printf_float+0x190>
 8002ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ed6:	4631      	mov	r1, r6
 8002ed8:	4628      	mov	r0, r5
 8002eda:	47b8      	blx	r7
 8002edc:	3001      	adds	r0, #1
 8002ede:	d0a4      	beq.n	8002e2a <_printf_float+0x14e>
 8002ee0:	f04f 0900 	mov.w	r9, #0
 8002ee4:	f104 0a1a 	add.w	sl, r4, #26
 8002ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002eea:	425b      	negs	r3, r3
 8002eec:	4599      	cmp	r9, r3
 8002eee:	da09      	bge.n	8002f04 <_printf_float+0x228>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4652      	mov	r2, sl
 8002ef4:	4631      	mov	r1, r6
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	47b8      	blx	r7
 8002efa:	3001      	adds	r0, #1
 8002efc:	d095      	beq.n	8002e2a <_printf_float+0x14e>
 8002efe:	f109 0901 	add.w	r9, r9, #1
 8002f02:	e7f1      	b.n	8002ee8 <_printf_float+0x20c>
 8002f04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f06:	4642      	mov	r2, r8
 8002f08:	e0a7      	b.n	800305a <_printf_float+0x37e>
 8002f0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	bfa8      	it	ge
 8002f12:	461a      	movge	r2, r3
 8002f14:	2a00      	cmp	r2, #0
 8002f16:	4691      	mov	r9, r2
 8002f18:	dc06      	bgt.n	8002f28 <_printf_float+0x24c>
 8002f1a:	f04f 0a00 	mov.w	sl, #0
 8002f1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f22:	f104 0b1a 	add.w	fp, r4, #26
 8002f26:	e011      	b.n	8002f4c <_printf_float+0x270>
 8002f28:	4613      	mov	r3, r2
 8002f2a:	4631      	mov	r1, r6
 8002f2c:	4642      	mov	r2, r8
 8002f2e:	4628      	mov	r0, r5
 8002f30:	47b8      	blx	r7
 8002f32:	3001      	adds	r0, #1
 8002f34:	d1f1      	bne.n	8002f1a <_printf_float+0x23e>
 8002f36:	e778      	b.n	8002e2a <_printf_float+0x14e>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	465a      	mov	r2, fp
 8002f3c:	4631      	mov	r1, r6
 8002f3e:	4628      	mov	r0, r5
 8002f40:	47b8      	blx	r7
 8002f42:	3001      	adds	r0, #1
 8002f44:	f43f af71 	beq.w	8002e2a <_printf_float+0x14e>
 8002f48:	f10a 0a01 	add.w	sl, sl, #1
 8002f4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f4e:	ebc9 0203 	rsb	r2, r9, r3
 8002f52:	4592      	cmp	sl, r2
 8002f54:	dbf0      	blt.n	8002f38 <_printf_float+0x25c>
 8002f56:	eb08 0903 	add.w	r9, r8, r3
 8002f5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	db0f      	blt.n	8002f82 <_printf_float+0x2a6>
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	07da      	lsls	r2, r3, #31
 8002f66:	d40c      	bmi.n	8002f82 <_printf_float+0x2a6>
 8002f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002f6c:	4498      	add	r8, r3
 8002f6e:	ebc9 0808 	rsb	r8, r9, r8
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	4598      	cmp	r8, r3
 8002f76:	bfa8      	it	ge
 8002f78:	4698      	movge	r8, r3
 8002f7a:	f1b8 0f00 	cmp.w	r8, #0
 8002f7e:	dc08      	bgt.n	8002f92 <_printf_float+0x2b6>
 8002f80:	e00f      	b.n	8002fa2 <_printf_float+0x2c6>
 8002f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f86:	4631      	mov	r1, r6
 8002f88:	4628      	mov	r0, r5
 8002f8a:	47b8      	blx	r7
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	d1eb      	bne.n	8002f68 <_printf_float+0x28c>
 8002f90:	e74b      	b.n	8002e2a <_printf_float+0x14e>
 8002f92:	4643      	mov	r3, r8
 8002f94:	464a      	mov	r2, r9
 8002f96:	4631      	mov	r1, r6
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47b8      	blx	r7
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	f43f af44 	beq.w	8002e2a <_printf_float+0x14e>
 8002fa2:	f04f 0900 	mov.w	r9, #0
 8002fa6:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002faa:	f104 0a1a 	add.w	sl, r4, #26
 8002fae:	e009      	b.n	8002fc4 <_printf_float+0x2e8>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	4652      	mov	r2, sl
 8002fb4:	4631      	mov	r1, r6
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	47b8      	blx	r7
 8002fba:	3001      	adds	r0, #1
 8002fbc:	f43f af35 	beq.w	8002e2a <_printf_float+0x14e>
 8002fc0:	f109 0901 	add.w	r9, r9, #1
 8002fc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	ebc8 0303 	rsb	r3, r8, r3
 8002fce:	4599      	cmp	r9, r3
 8002fd0:	dbee      	blt.n	8002fb0 <_printf_float+0x2d4>
 8002fd2:	e74b      	b.n	8002e6c <_printf_float+0x190>
 8002fd4:	7fefffff 	.word	0x7fefffff
 8002fd8:	08004f52 	.word	0x08004f52
 8002fdc:	08004f56 	.word	0x08004f56
 8002fe0:	08004f5a 	.word	0x08004f5a
 8002fe4:	08004f5e 	.word	0x08004f5e
 8002fe8:	08004f62 	.word	0x08004f62
 8002fec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fee:	2a01      	cmp	r2, #1
 8002ff0:	dc01      	bgt.n	8002ff6 <_printf_float+0x31a>
 8002ff2:	07db      	lsls	r3, r3, #31
 8002ff4:	d538      	bpl.n	8003068 <_printf_float+0x38c>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	4631      	mov	r1, r6
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	47b8      	blx	r7
 8003000:	3001      	adds	r0, #1
 8003002:	f43f af12 	beq.w	8002e2a <_printf_float+0x14e>
 8003006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800300a:	4631      	mov	r1, r6
 800300c:	4628      	mov	r0, r5
 800300e:	47b8      	blx	r7
 8003010:	3001      	adds	r0, #1
 8003012:	f43f af0a 	beq.w	8002e2a <_printf_float+0x14e>
 8003016:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800301a:	2200      	movs	r2, #0
 800301c:	2300      	movs	r3, #0
 800301e:	f7fd fcc9 	bl	80009b4 <__aeabi_dcmpeq>
 8003022:	b120      	cbz	r0, 800302e <_printf_float+0x352>
 8003024:	f04f 0800 	mov.w	r8, #0
 8003028:	f104 091a 	add.w	r9, r4, #26
 800302c:	e00e      	b.n	800304c <_printf_float+0x370>
 800302e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003030:	f108 0201 	add.w	r2, r8, #1
 8003034:	3b01      	subs	r3, #1
 8003036:	e019      	b.n	800306c <_printf_float+0x390>
 8003038:	2301      	movs	r3, #1
 800303a:	464a      	mov	r2, r9
 800303c:	4631      	mov	r1, r6
 800303e:	4628      	mov	r0, r5
 8003040:	47b8      	blx	r7
 8003042:	3001      	adds	r0, #1
 8003044:	f43f aef1 	beq.w	8002e2a <_printf_float+0x14e>
 8003048:	f108 0801 	add.w	r8, r8, #1
 800304c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800304e:	3b01      	subs	r3, #1
 8003050:	4598      	cmp	r8, r3
 8003052:	dbf1      	blt.n	8003038 <_printf_float+0x35c>
 8003054:	4653      	mov	r3, sl
 8003056:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800305a:	4631      	mov	r1, r6
 800305c:	4628      	mov	r0, r5
 800305e:	47b8      	blx	r7
 8003060:	3001      	adds	r0, #1
 8003062:	f47f af03 	bne.w	8002e6c <_printf_float+0x190>
 8003066:	e6e0      	b.n	8002e2a <_printf_float+0x14e>
 8003068:	4642      	mov	r2, r8
 800306a:	2301      	movs	r3, #1
 800306c:	4631      	mov	r1, r6
 800306e:	4628      	mov	r0, r5
 8003070:	47b8      	blx	r7
 8003072:	3001      	adds	r0, #1
 8003074:	d1ee      	bne.n	8003054 <_printf_float+0x378>
 8003076:	e6d8      	b.n	8002e2a <_printf_float+0x14e>
 8003078:	2301      	movs	r3, #1
 800307a:	464a      	mov	r2, r9
 800307c:	4631      	mov	r1, r6
 800307e:	4628      	mov	r0, r5
 8003080:	47b8      	blx	r7
 8003082:	3001      	adds	r0, #1
 8003084:	f43f aed1 	beq.w	8002e2a <_printf_float+0x14e>
 8003088:	f108 0801 	add.w	r8, r8, #1
 800308c:	68e3      	ldr	r3, [r4, #12]
 800308e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	4598      	cmp	r8, r3
 8003094:	dbf0      	blt.n	8003078 <_printf_float+0x39c>
 8003096:	68e0      	ldr	r0, [r4, #12]
 8003098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800309a:	4298      	cmp	r0, r3
 800309c:	bfb8      	it	lt
 800309e:	4618      	movlt	r0, r3
 80030a0:	e05d      	b.n	800315e <_printf_float+0x482>
 80030a2:	6862      	ldr	r2, [r4, #4]
 80030a4:	a80e      	add	r0, sp, #56	; 0x38
 80030a6:	1c53      	adds	r3, r2, #1
 80030a8:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80030ac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80030b0:	f47f ae74 	bne.w	8002d9c <_printf_float+0xc0>
 80030b4:	2206      	movs	r2, #6
 80030b6:	e001      	b.n	80030bc <_printf_float+0x3e0>
 80030b8:	b912      	cbnz	r2, 80030c0 <_printf_float+0x3e4>
 80030ba:	2201      	movs	r2, #1
 80030bc:	6062      	str	r2, [r4, #4]
 80030be:	e675      	b.n	8002dac <_printf_float+0xd0>
 80030c0:	2100      	movs	r1, #0
 80030c2:	9106      	str	r1, [sp, #24]
 80030c4:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80030c8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	9005      	str	r0, [sp, #20]
 80030d0:	4642      	mov	r2, r8
 80030d2:	f8cd 9010 	str.w	r9, [sp, #16]
 80030d6:	f8cd e00c 	str.w	lr, [sp, #12]
 80030da:	9102      	str	r1, [sp, #8]
 80030dc:	4653      	mov	r3, sl
 80030de:	4628      	mov	r0, r5
 80030e0:	f7ff fd6b 	bl	8002bba <__cvt>
 80030e4:	4680      	mov	r8, r0
 80030e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030e8:	1cd8      	adds	r0, r3, #3
 80030ea:	db02      	blt.n	80030f2 <_printf_float+0x416>
 80030ec:	6862      	ldr	r2, [r4, #4]
 80030ee:	4293      	cmp	r3, r2
 80030f0:	dd1d      	ble.n	800312e <_printf_float+0x452>
 80030f2:	f1a9 0902 	sub.w	r9, r9, #2
 80030f6:	fa5f f989 	uxtb.w	r9, r9
 80030fa:	e670      	b.n	8002dde <_printf_float+0x102>
 80030fc:	3301      	adds	r3, #1
 80030fe:	6123      	str	r3, [r4, #16]
 8003100:	e684      	b.n	8002e0c <_printf_float+0x130>
 8003102:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003106:	d114      	bne.n	8003132 <_printf_float+0x456>
 8003108:	2900      	cmp	r1, #0
 800310a:	6863      	ldr	r3, [r4, #4]
 800310c:	dd07      	ble.n	800311e <_printf_float+0x442>
 800310e:	6121      	str	r1, [r4, #16]
 8003110:	b913      	cbnz	r3, 8003118 <_printf_float+0x43c>
 8003112:	6822      	ldr	r2, [r4, #0]
 8003114:	07d2      	lsls	r2, r2, #31
 8003116:	d51d      	bpl.n	8003154 <_printf_float+0x478>
 8003118:	3301      	adds	r3, #1
 800311a:	440b      	add	r3, r1
 800311c:	e019      	b.n	8003152 <_printf_float+0x476>
 800311e:	b913      	cbnz	r3, 8003126 <_printf_float+0x44a>
 8003120:	6822      	ldr	r2, [r4, #0]
 8003122:	07d0      	lsls	r0, r2, #31
 8003124:	d501      	bpl.n	800312a <_printf_float+0x44e>
 8003126:	3302      	adds	r3, #2
 8003128:	e013      	b.n	8003152 <_printf_float+0x476>
 800312a:	2301      	movs	r3, #1
 800312c:	e011      	b.n	8003152 <_printf_float+0x476>
 800312e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003134:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003136:	4293      	cmp	r3, r2
 8003138:	db05      	blt.n	8003146 <_printf_float+0x46a>
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	6123      	str	r3, [r4, #16]
 800313e:	07d1      	lsls	r1, r2, #31
 8003140:	d508      	bpl.n	8003154 <_printf_float+0x478>
 8003142:	3301      	adds	r3, #1
 8003144:	e005      	b.n	8003152 <_printf_float+0x476>
 8003146:	2b00      	cmp	r3, #0
 8003148:	bfd4      	ite	le
 800314a:	f1c3 0302 	rsble	r3, r3, #2
 800314e:	2301      	movgt	r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	6123      	str	r3, [r4, #16]
 8003154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003156:	f04f 0a00 	mov.w	sl, #0
 800315a:	65a3      	str	r3, [r4, #88]	; 0x58
 800315c:	e656      	b.n	8002e0c <_printf_float+0x130>
 800315e:	b011      	add	sp, #68	; 0x44
 8003160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003164 <_printf_common>:
 8003164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003168:	4691      	mov	r9, r2
 800316a:	461f      	mov	r7, r3
 800316c:	690a      	ldr	r2, [r1, #16]
 800316e:	688b      	ldr	r3, [r1, #8]
 8003170:	4606      	mov	r6, r0
 8003172:	4293      	cmp	r3, r2
 8003174:	bfb8      	it	lt
 8003176:	4613      	movlt	r3, r2
 8003178:	f8c9 3000 	str.w	r3, [r9]
 800317c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003180:	460c      	mov	r4, r1
 8003182:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003186:	b112      	cbz	r2, 800318e <_printf_common+0x2a>
 8003188:	3301      	adds	r3, #1
 800318a:	f8c9 3000 	str.w	r3, [r9]
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	0699      	lsls	r1, r3, #26
 8003192:	bf42      	ittt	mi
 8003194:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003198:	3302      	addmi	r3, #2
 800319a:	f8c9 3000 	strmi.w	r3, [r9]
 800319e:	6825      	ldr	r5, [r4, #0]
 80031a0:	f015 0506 	ands.w	r5, r5, #6
 80031a4:	d110      	bne.n	80031c8 <_printf_common+0x64>
 80031a6:	f104 0a19 	add.w	sl, r4, #25
 80031aa:	e007      	b.n	80031bc <_printf_common+0x58>
 80031ac:	2301      	movs	r3, #1
 80031ae:	4652      	mov	r2, sl
 80031b0:	4639      	mov	r1, r7
 80031b2:	4630      	mov	r0, r6
 80031b4:	47c0      	blx	r8
 80031b6:	3001      	adds	r0, #1
 80031b8:	d01a      	beq.n	80031f0 <_printf_common+0x8c>
 80031ba:	3501      	adds	r5, #1
 80031bc:	68e3      	ldr	r3, [r4, #12]
 80031be:	f8d9 2000 	ldr.w	r2, [r9]
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	429d      	cmp	r5, r3
 80031c6:	dbf1      	blt.n	80031ac <_printf_common+0x48>
 80031c8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80031cc:	6822      	ldr	r2, [r4, #0]
 80031ce:	3300      	adds	r3, #0
 80031d0:	bf18      	it	ne
 80031d2:	2301      	movne	r3, #1
 80031d4:	0692      	lsls	r2, r2, #26
 80031d6:	d50f      	bpl.n	80031f8 <_printf_common+0x94>
 80031d8:	18e1      	adds	r1, r4, r3
 80031da:	2030      	movs	r0, #48	; 0x30
 80031dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031e6:	4422      	add	r2, r4
 80031e8:	3302      	adds	r3, #2
 80031ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031ee:	e003      	b.n	80031f8 <_printf_common+0x94>
 80031f0:	f04f 30ff 	mov.w	r0, #4294967295
 80031f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031fc:	4639      	mov	r1, r7
 80031fe:	4630      	mov	r0, r6
 8003200:	47c0      	blx	r8
 8003202:	3001      	adds	r0, #1
 8003204:	d0f4      	beq.n	80031f0 <_printf_common+0x8c>
 8003206:	6822      	ldr	r2, [r4, #0]
 8003208:	f8d9 5000 	ldr.w	r5, [r9]
 800320c:	68e3      	ldr	r3, [r4, #12]
 800320e:	f002 0206 	and.w	r2, r2, #6
 8003212:	2a04      	cmp	r2, #4
 8003214:	bf08      	it	eq
 8003216:	1b5d      	subeq	r5, r3, r5
 8003218:	6922      	ldr	r2, [r4, #16]
 800321a:	68a3      	ldr	r3, [r4, #8]
 800321c:	bf0c      	ite	eq
 800321e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003222:	2500      	movne	r5, #0
 8003224:	4293      	cmp	r3, r2
 8003226:	bfc4      	itt	gt
 8003228:	1a9b      	subgt	r3, r3, r2
 800322a:	18ed      	addgt	r5, r5, r3
 800322c:	f04f 0900 	mov.w	r9, #0
 8003230:	341a      	adds	r4, #26
 8003232:	454d      	cmp	r5, r9
 8003234:	d009      	beq.n	800324a <_printf_common+0xe6>
 8003236:	2301      	movs	r3, #1
 8003238:	4622      	mov	r2, r4
 800323a:	4639      	mov	r1, r7
 800323c:	4630      	mov	r0, r6
 800323e:	47c0      	blx	r8
 8003240:	3001      	adds	r0, #1
 8003242:	d0d5      	beq.n	80031f0 <_printf_common+0x8c>
 8003244:	f109 0901 	add.w	r9, r9, #1
 8003248:	e7f3      	b.n	8003232 <_printf_common+0xce>
 800324a:	2000      	movs	r0, #0
 800324c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003250 <_printf_i>:
 8003250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003254:	4617      	mov	r7, r2
 8003256:	7e0a      	ldrb	r2, [r1, #24]
 8003258:	b085      	sub	sp, #20
 800325a:	2a6e      	cmp	r2, #110	; 0x6e
 800325c:	4698      	mov	r8, r3
 800325e:	4606      	mov	r6, r0
 8003260:	460c      	mov	r4, r1
 8003262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003264:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003268:	f000 80ae 	beq.w	80033c8 <_printf_i+0x178>
 800326c:	d811      	bhi.n	8003292 <_printf_i+0x42>
 800326e:	2a63      	cmp	r2, #99	; 0x63
 8003270:	d022      	beq.n	80032b8 <_printf_i+0x68>
 8003272:	d809      	bhi.n	8003288 <_printf_i+0x38>
 8003274:	2a00      	cmp	r2, #0
 8003276:	f000 80bb 	beq.w	80033f0 <_printf_i+0x1a0>
 800327a:	2a58      	cmp	r2, #88	; 0x58
 800327c:	f040 80ca 	bne.w	8003414 <_printf_i+0x1c4>
 8003280:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003284:	4983      	ldr	r1, [pc, #524]	; (8003494 <_printf_i+0x244>)
 8003286:	e055      	b.n	8003334 <_printf_i+0xe4>
 8003288:	2a64      	cmp	r2, #100	; 0x64
 800328a:	d01e      	beq.n	80032ca <_printf_i+0x7a>
 800328c:	2a69      	cmp	r2, #105	; 0x69
 800328e:	d01c      	beq.n	80032ca <_printf_i+0x7a>
 8003290:	e0c0      	b.n	8003414 <_printf_i+0x1c4>
 8003292:	2a73      	cmp	r2, #115	; 0x73
 8003294:	f000 80b0 	beq.w	80033f8 <_printf_i+0x1a8>
 8003298:	d809      	bhi.n	80032ae <_printf_i+0x5e>
 800329a:	2a6f      	cmp	r2, #111	; 0x6f
 800329c:	d02e      	beq.n	80032fc <_printf_i+0xac>
 800329e:	2a70      	cmp	r2, #112	; 0x70
 80032a0:	f040 80b8 	bne.w	8003414 <_printf_i+0x1c4>
 80032a4:	680a      	ldr	r2, [r1, #0]
 80032a6:	f042 0220 	orr.w	r2, r2, #32
 80032aa:	600a      	str	r2, [r1, #0]
 80032ac:	e03e      	b.n	800332c <_printf_i+0xdc>
 80032ae:	2a75      	cmp	r2, #117	; 0x75
 80032b0:	d024      	beq.n	80032fc <_printf_i+0xac>
 80032b2:	2a78      	cmp	r2, #120	; 0x78
 80032b4:	d03a      	beq.n	800332c <_printf_i+0xdc>
 80032b6:	e0ad      	b.n	8003414 <_printf_i+0x1c4>
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80032be:	1d11      	adds	r1, r2, #4
 80032c0:	6019      	str	r1, [r3, #0]
 80032c2:	6813      	ldr	r3, [r2, #0]
 80032c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032c8:	e0a8      	b.n	800341c <_printf_i+0x1cc>
 80032ca:	6821      	ldr	r1, [r4, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80032d2:	d002      	beq.n	80032da <_printf_i+0x8a>
 80032d4:	1d11      	adds	r1, r2, #4
 80032d6:	6019      	str	r1, [r3, #0]
 80032d8:	e008      	b.n	80032ec <_printf_i+0x9c>
 80032da:	f011 0f40 	tst.w	r1, #64	; 0x40
 80032de:	f102 0104 	add.w	r1, r2, #4
 80032e2:	6019      	str	r1, [r3, #0]
 80032e4:	d002      	beq.n	80032ec <_printf_i+0x9c>
 80032e6:	f9b2 3000 	ldrsh.w	r3, [r2]
 80032ea:	e000      	b.n	80032ee <_printf_i+0x9e>
 80032ec:	6813      	ldr	r3, [r2, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	da3c      	bge.n	800336c <_printf_i+0x11c>
 80032f2:	222d      	movs	r2, #45	; 0x2d
 80032f4:	425b      	negs	r3, r3
 80032f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80032fa:	e037      	b.n	800336c <_printf_i+0x11c>
 80032fc:	6821      	ldr	r1, [r4, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003304:	d002      	beq.n	800330c <_printf_i+0xbc>
 8003306:	1d11      	adds	r1, r2, #4
 8003308:	6019      	str	r1, [r3, #0]
 800330a:	e007      	b.n	800331c <_printf_i+0xcc>
 800330c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003310:	f102 0104 	add.w	r1, r2, #4
 8003314:	6019      	str	r1, [r3, #0]
 8003316:	d001      	beq.n	800331c <_printf_i+0xcc>
 8003318:	8813      	ldrh	r3, [r2, #0]
 800331a:	e000      	b.n	800331e <_printf_i+0xce>
 800331c:	6813      	ldr	r3, [r2, #0]
 800331e:	7e22      	ldrb	r2, [r4, #24]
 8003320:	495c      	ldr	r1, [pc, #368]	; (8003494 <_printf_i+0x244>)
 8003322:	2a6f      	cmp	r2, #111	; 0x6f
 8003324:	bf14      	ite	ne
 8003326:	220a      	movne	r2, #10
 8003328:	2208      	moveq	r2, #8
 800332a:	e01b      	b.n	8003364 <_printf_i+0x114>
 800332c:	2278      	movs	r2, #120	; 0x78
 800332e:	495a      	ldr	r1, [pc, #360]	; (8003498 <_printf_i+0x248>)
 8003330:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003334:	6822      	ldr	r2, [r4, #0]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	f012 0f80 	tst.w	r2, #128	; 0x80
 800333c:	f100 0504 	add.w	r5, r0, #4
 8003340:	601d      	str	r5, [r3, #0]
 8003342:	d103      	bne.n	800334c <_printf_i+0xfc>
 8003344:	0655      	lsls	r5, r2, #25
 8003346:	d501      	bpl.n	800334c <_printf_i+0xfc>
 8003348:	8803      	ldrh	r3, [r0, #0]
 800334a:	e000      	b.n	800334e <_printf_i+0xfe>
 800334c:	6803      	ldr	r3, [r0, #0]
 800334e:	07d0      	lsls	r0, r2, #31
 8003350:	bf44      	itt	mi
 8003352:	f042 0220 	orrmi.w	r2, r2, #32
 8003356:	6022      	strmi	r2, [r4, #0]
 8003358:	b91b      	cbnz	r3, 8003362 <_printf_i+0x112>
 800335a:	6822      	ldr	r2, [r4, #0]
 800335c:	f022 0220 	bic.w	r2, r2, #32
 8003360:	6022      	str	r2, [r4, #0]
 8003362:	2210      	movs	r2, #16
 8003364:	2000      	movs	r0, #0
 8003366:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800336a:	e001      	b.n	8003370 <_printf_i+0x120>
 800336c:	4949      	ldr	r1, [pc, #292]	; (8003494 <_printf_i+0x244>)
 800336e:	220a      	movs	r2, #10
 8003370:	6865      	ldr	r5, [r4, #4]
 8003372:	2d00      	cmp	r5, #0
 8003374:	60a5      	str	r5, [r4, #8]
 8003376:	db08      	blt.n	800338a <_printf_i+0x13a>
 8003378:	6820      	ldr	r0, [r4, #0]
 800337a:	f020 0004 	bic.w	r0, r0, #4
 800337e:	6020      	str	r0, [r4, #0]
 8003380:	b92b      	cbnz	r3, 800338e <_printf_i+0x13e>
 8003382:	2d00      	cmp	r5, #0
 8003384:	d17d      	bne.n	8003482 <_printf_i+0x232>
 8003386:	4675      	mov	r5, lr
 8003388:	e00c      	b.n	80033a4 <_printf_i+0x154>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d079      	beq.n	8003482 <_printf_i+0x232>
 800338e:	4675      	mov	r5, lr
 8003390:	fbb3 f0f2 	udiv	r0, r3, r2
 8003394:	fb02 3310 	mls	r3, r2, r0, r3
 8003398:	5ccb      	ldrb	r3, [r1, r3]
 800339a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800339e:	4603      	mov	r3, r0
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d1f5      	bne.n	8003390 <_printf_i+0x140>
 80033a4:	2a08      	cmp	r2, #8
 80033a6:	d10b      	bne.n	80033c0 <_printf_i+0x170>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	07da      	lsls	r2, r3, #31
 80033ac:	d508      	bpl.n	80033c0 <_printf_i+0x170>
 80033ae:	6923      	ldr	r3, [r4, #16]
 80033b0:	6862      	ldr	r2, [r4, #4]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	bfde      	ittt	le
 80033b6:	2330      	movle	r3, #48	; 0x30
 80033b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033c0:	ebc5 030e 	rsb	r3, r5, lr
 80033c4:	6123      	str	r3, [r4, #16]
 80033c6:	e02e      	b.n	8003426 <_printf_i+0x1d6>
 80033c8:	6808      	ldr	r0, [r1, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	f010 0f80 	tst.w	r0, #128	; 0x80
 80033d0:	6949      	ldr	r1, [r1, #20]
 80033d2:	d003      	beq.n	80033dc <_printf_i+0x18c>
 80033d4:	1d10      	adds	r0, r2, #4
 80033d6:	6018      	str	r0, [r3, #0]
 80033d8:	6813      	ldr	r3, [r2, #0]
 80033da:	e008      	b.n	80033ee <_printf_i+0x19e>
 80033dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033e0:	f102 0004 	add.w	r0, r2, #4
 80033e4:	6018      	str	r0, [r3, #0]
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	d001      	beq.n	80033ee <_printf_i+0x19e>
 80033ea:	8019      	strh	r1, [r3, #0]
 80033ec:	e000      	b.n	80033f0 <_printf_i+0x1a0>
 80033ee:	6019      	str	r1, [r3, #0]
 80033f0:	2300      	movs	r3, #0
 80033f2:	6123      	str	r3, [r4, #16]
 80033f4:	4675      	mov	r5, lr
 80033f6:	e016      	b.n	8003426 <_printf_i+0x1d6>
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	1d11      	adds	r1, r2, #4
 80033fc:	6019      	str	r1, [r3, #0]
 80033fe:	6815      	ldr	r5, [r2, #0]
 8003400:	2100      	movs	r1, #0
 8003402:	6862      	ldr	r2, [r4, #4]
 8003404:	4628      	mov	r0, r5
 8003406:	f000 ff93 	bl	8004330 <memchr>
 800340a:	b108      	cbz	r0, 8003410 <_printf_i+0x1c0>
 800340c:	1b40      	subs	r0, r0, r5
 800340e:	6060      	str	r0, [r4, #4]
 8003410:	6863      	ldr	r3, [r4, #4]
 8003412:	e004      	b.n	800341e <_printf_i+0x1ce>
 8003414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003418:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800341c:	2301      	movs	r3, #1
 800341e:	6123      	str	r3, [r4, #16]
 8003420:	2300      	movs	r3, #0
 8003422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003426:	f8cd 8000 	str.w	r8, [sp]
 800342a:	463b      	mov	r3, r7
 800342c:	aa03      	add	r2, sp, #12
 800342e:	4621      	mov	r1, r4
 8003430:	4630      	mov	r0, r6
 8003432:	f7ff fe97 	bl	8003164 <_printf_common>
 8003436:	3001      	adds	r0, #1
 8003438:	d102      	bne.n	8003440 <_printf_i+0x1f0>
 800343a:	f04f 30ff 	mov.w	r0, #4294967295
 800343e:	e026      	b.n	800348e <_printf_i+0x23e>
 8003440:	6923      	ldr	r3, [r4, #16]
 8003442:	462a      	mov	r2, r5
 8003444:	4639      	mov	r1, r7
 8003446:	4630      	mov	r0, r6
 8003448:	47c0      	blx	r8
 800344a:	3001      	adds	r0, #1
 800344c:	d0f5      	beq.n	800343a <_printf_i+0x1ea>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	079b      	lsls	r3, r3, #30
 8003452:	d510      	bpl.n	8003476 <_printf_i+0x226>
 8003454:	2500      	movs	r5, #0
 8003456:	f104 0919 	add.w	r9, r4, #25
 800345a:	e007      	b.n	800346c <_printf_i+0x21c>
 800345c:	2301      	movs	r3, #1
 800345e:	464a      	mov	r2, r9
 8003460:	4639      	mov	r1, r7
 8003462:	4630      	mov	r0, r6
 8003464:	47c0      	blx	r8
 8003466:	3001      	adds	r0, #1
 8003468:	d0e7      	beq.n	800343a <_printf_i+0x1ea>
 800346a:	3501      	adds	r5, #1
 800346c:	68e3      	ldr	r3, [r4, #12]
 800346e:	9a03      	ldr	r2, [sp, #12]
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	429d      	cmp	r5, r3
 8003474:	dbf2      	blt.n	800345c <_printf_i+0x20c>
 8003476:	68e0      	ldr	r0, [r4, #12]
 8003478:	9b03      	ldr	r3, [sp, #12]
 800347a:	4298      	cmp	r0, r3
 800347c:	bfb8      	it	lt
 800347e:	4618      	movlt	r0, r3
 8003480:	e005      	b.n	800348e <_printf_i+0x23e>
 8003482:	780b      	ldrb	r3, [r1, #0]
 8003484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800348c:	e78a      	b.n	80033a4 <_printf_i+0x154>
 800348e:	b005      	add	sp, #20
 8003490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003494:	08004f64 	.word	0x08004f64
 8003498:	08004f75 	.word	0x08004f75

0800349c <siprintf>:
 800349c:	b40e      	push	{r1, r2, r3}
 800349e:	b500      	push	{lr}
 80034a0:	f44f 7102 	mov.w	r1, #520	; 0x208
 80034a4:	b09c      	sub	sp, #112	; 0x70
 80034a6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80034aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034ae:	9104      	str	r1, [sp, #16]
 80034b0:	9107      	str	r1, [sp, #28]
 80034b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80034b6:	ab1d      	add	r3, sp, #116	; 0x74
 80034b8:	9002      	str	r0, [sp, #8]
 80034ba:	9006      	str	r0, [sp, #24]
 80034bc:	4808      	ldr	r0, [pc, #32]	; (80034e0 <siprintf+0x44>)
 80034be:	f853 2b04 	ldr.w	r2, [r3], #4
 80034c2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80034c6:	6800      	ldr	r0, [r0, #0]
 80034c8:	a902      	add	r1, sp, #8
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	f001 fb34 	bl	8004b38 <_svfiprintf_r>
 80034d0:	9b02      	ldr	r3, [sp, #8]
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	b01c      	add	sp, #112	; 0x70
 80034d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80034dc:	b003      	add	sp, #12
 80034de:	4770      	bx	lr
 80034e0:	200000a0 	.word	0x200000a0

080034e4 <strcpy>:
 80034e4:	4603      	mov	r3, r0
 80034e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034ea:	f803 2b01 	strb.w	r2, [r3], #1
 80034ee:	2a00      	cmp	r2, #0
 80034f0:	d1f9      	bne.n	80034e6 <strcpy+0x2>
 80034f2:	4770      	bx	lr

080034f4 <strtok>:
 80034f4:	4b17      	ldr	r3, [pc, #92]	; (8003554 <strtok+0x60>)
 80034f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034fa:	681d      	ldr	r5, [r3, #0]
 80034fc:	4606      	mov	r6, r0
 80034fe:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003500:	460f      	mov	r7, r1
 8003502:	b9fc      	cbnz	r4, 8003544 <strtok+0x50>
 8003504:	2050      	movs	r0, #80	; 0x50
 8003506:	f000 ff0b 	bl	8004320 <malloc>
 800350a:	65a8      	str	r0, [r5, #88]	; 0x58
 800350c:	6084      	str	r4, [r0, #8]
 800350e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003510:	6004      	str	r4, [r0, #0]
 8003512:	6044      	str	r4, [r0, #4]
 8003514:	611c      	str	r4, [r3, #16]
 8003516:	60dc      	str	r4, [r3, #12]
 8003518:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800351a:	619c      	str	r4, [r3, #24]
 800351c:	615c      	str	r4, [r3, #20]
 800351e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003520:	62dc      	str	r4, [r3, #44]	; 0x2c
 8003522:	629c      	str	r4, [r3, #40]	; 0x28
 8003524:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003526:	635c      	str	r4, [r3, #52]	; 0x34
 8003528:	631c      	str	r4, [r3, #48]	; 0x30
 800352a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800352c:	63dc      	str	r4, [r3, #60]	; 0x3c
 800352e:	639c      	str	r4, [r3, #56]	; 0x38
 8003530:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003532:	645c      	str	r4, [r3, #68]	; 0x44
 8003534:	641c      	str	r4, [r3, #64]	; 0x40
 8003536:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003538:	64dc      	str	r4, [r3, #76]	; 0x4c
 800353a:	649c      	str	r4, [r3, #72]	; 0x48
 800353c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800353e:	771c      	strb	r4, [r3, #28]
 8003540:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003542:	625c      	str	r4, [r3, #36]	; 0x24
 8003544:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003546:	4639      	mov	r1, r7
 8003548:	4630      	mov	r0, r6
 800354a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800354e:	2301      	movs	r3, #1
 8003550:	f000 b802 	b.w	8003558 <__strtok_r>
 8003554:	200000a0 	.word	0x200000a0

08003558 <__strtok_r>:
 8003558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355a:	b948      	cbnz	r0, 8003570 <__strtok_r+0x18>
 800355c:	6810      	ldr	r0, [r2, #0]
 800355e:	b938      	cbnz	r0, 8003570 <__strtok_r+0x18>
 8003560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003562:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003566:	b15e      	cbz	r6, 8003580 <__strtok_r+0x28>
 8003568:	42b5      	cmp	r5, r6
 800356a:	d1fa      	bne.n	8003562 <__strtok_r+0xa>
 800356c:	b12b      	cbz	r3, 800357a <__strtok_r+0x22>
 800356e:	4620      	mov	r0, r4
 8003570:	4604      	mov	r4, r0
 8003572:	460f      	mov	r7, r1
 8003574:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003578:	e7f3      	b.n	8003562 <__strtok_r+0xa>
 800357a:	6014      	str	r4, [r2, #0]
 800357c:	7003      	strb	r3, [r0, #0]
 800357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003580:	b94d      	cbnz	r5, 8003596 <__strtok_r+0x3e>
 8003582:	6015      	str	r5, [r2, #0]
 8003584:	4628      	mov	r0, r5
 8003586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003588:	f817 6b01 	ldrb.w	r6, [r7], #1
 800358c:	42b5      	cmp	r5, r6
 800358e:	d007      	beq.n	80035a0 <__strtok_r+0x48>
 8003590:	2e00      	cmp	r6, #0
 8003592:	d1f9      	bne.n	8003588 <__strtok_r+0x30>
 8003594:	461c      	mov	r4, r3
 8003596:	4623      	mov	r3, r4
 8003598:	460f      	mov	r7, r1
 800359a:	f813 5b01 	ldrb.w	r5, [r3], #1
 800359e:	e7f3      	b.n	8003588 <__strtok_r+0x30>
 80035a0:	b115      	cbz	r5, 80035a8 <__strtok_r+0x50>
 80035a2:	2100      	movs	r1, #0
 80035a4:	7021      	strb	r1, [r4, #0]
 80035a6:	e000      	b.n	80035aa <__strtok_r+0x52>
 80035a8:	462b      	mov	r3, r5
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080035b0 <_strtol_r>:
 80035b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035b4:	460f      	mov	r7, r1
 80035b6:	4680      	mov	r8, r0
 80035b8:	483f      	ldr	r0, [pc, #252]	; (80036b8 <_strtol_r+0x108>)
 80035ba:	f8d0 9000 	ldr.w	r9, [r0]
 80035be:	463d      	mov	r5, r7
 80035c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035c4:	eb09 0004 	add.w	r0, r9, r4
 80035c8:	7840      	ldrb	r0, [r0, #1]
 80035ca:	f000 0008 	and.w	r0, r0, #8
 80035ce:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80035d2:	b108      	cbz	r0, 80035d8 <_strtol_r+0x28>
 80035d4:	462f      	mov	r7, r5
 80035d6:	e7f2      	b.n	80035be <_strtol_r+0xe>
 80035d8:	2c2d      	cmp	r4, #45	; 0x2d
 80035da:	d103      	bne.n	80035e4 <_strtol_r+0x34>
 80035dc:	1cbd      	adds	r5, r7, #2
 80035de:	787c      	ldrb	r4, [r7, #1]
 80035e0:	2601      	movs	r6, #1
 80035e2:	e003      	b.n	80035ec <_strtol_r+0x3c>
 80035e4:	2c2b      	cmp	r4, #43	; 0x2b
 80035e6:	bf04      	itt	eq
 80035e8:	787c      	ldrbeq	r4, [r7, #1]
 80035ea:	1cbd      	addeq	r5, r7, #2
 80035ec:	b113      	cbz	r3, 80035f4 <_strtol_r+0x44>
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d10a      	bne.n	8003608 <_strtol_r+0x58>
 80035f2:	e05b      	b.n	80036ac <_strtol_r+0xfc>
 80035f4:	2c30      	cmp	r4, #48	; 0x30
 80035f6:	d157      	bne.n	80036a8 <_strtol_r+0xf8>
 80035f8:	7828      	ldrb	r0, [r5, #0]
 80035fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80035fe:	2858      	cmp	r0, #88	; 0x58
 8003600:	d14d      	bne.n	800369e <_strtol_r+0xee>
 8003602:	786c      	ldrb	r4, [r5, #1]
 8003604:	2310      	movs	r3, #16
 8003606:	3502      	adds	r5, #2
 8003608:	2e00      	cmp	r6, #0
 800360a:	bf14      	ite	ne
 800360c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8003610:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8003614:	fbbc faf3 	udiv	sl, ip, r3
 8003618:	2700      	movs	r7, #0
 800361a:	4638      	mov	r0, r7
 800361c:	fb03 cc1a 	mls	ip, r3, sl, ip
 8003620:	eb09 0e04 	add.w	lr, r9, r4
 8003624:	f89e e001 	ldrb.w	lr, [lr, #1]
 8003628:	f01e 0f04 	tst.w	lr, #4
 800362c:	d001      	beq.n	8003632 <_strtol_r+0x82>
 800362e:	3c30      	subs	r4, #48	; 0x30
 8003630:	e00b      	b.n	800364a <_strtol_r+0x9a>
 8003632:	f01e 0e03 	ands.w	lr, lr, #3
 8003636:	d01b      	beq.n	8003670 <_strtol_r+0xc0>
 8003638:	f1be 0f01 	cmp.w	lr, #1
 800363c:	bf0c      	ite	eq
 800363e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8003642:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8003646:	ebce 0404 	rsb	r4, lr, r4
 800364a:	42a3      	cmp	r3, r4
 800364c:	dd10      	ble.n	8003670 <_strtol_r+0xc0>
 800364e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003652:	d00a      	beq.n	800366a <_strtol_r+0xba>
 8003654:	4550      	cmp	r0, sl
 8003656:	d806      	bhi.n	8003666 <_strtol_r+0xb6>
 8003658:	d101      	bne.n	800365e <_strtol_r+0xae>
 800365a:	4564      	cmp	r4, ip
 800365c:	dc03      	bgt.n	8003666 <_strtol_r+0xb6>
 800365e:	fb03 4000 	mla	r0, r3, r0, r4
 8003662:	2701      	movs	r7, #1
 8003664:	e001      	b.n	800366a <_strtol_r+0xba>
 8003666:	f04f 37ff 	mov.w	r7, #4294967295
 800366a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800366e:	e7d7      	b.n	8003620 <_strtol_r+0x70>
 8003670:	1c7b      	adds	r3, r7, #1
 8003672:	d10c      	bne.n	800368e <_strtol_r+0xde>
 8003674:	2e00      	cmp	r6, #0
 8003676:	f04f 0322 	mov.w	r3, #34	; 0x22
 800367a:	bf14      	ite	ne
 800367c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8003680:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8003684:	f8c8 3000 	str.w	r3, [r8]
 8003688:	b92a      	cbnz	r2, 8003696 <_strtol_r+0xe6>
 800368a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800368e:	b106      	cbz	r6, 8003692 <_strtol_r+0xe2>
 8003690:	4240      	negs	r0, r0
 8003692:	b172      	cbz	r2, 80036b2 <_strtol_r+0x102>
 8003694:	b107      	cbz	r7, 8003698 <_strtol_r+0xe8>
 8003696:	1e69      	subs	r1, r5, #1
 8003698:	6011      	str	r1, [r2, #0]
 800369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800369e:	2430      	movs	r4, #48	; 0x30
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1b1      	bne.n	8003608 <_strtol_r+0x58>
 80036a4:	2308      	movs	r3, #8
 80036a6:	e7af      	b.n	8003608 <_strtol_r+0x58>
 80036a8:	230a      	movs	r3, #10
 80036aa:	e7ad      	b.n	8003608 <_strtol_r+0x58>
 80036ac:	2c30      	cmp	r4, #48	; 0x30
 80036ae:	d0a3      	beq.n	80035f8 <_strtol_r+0x48>
 80036b0:	e7aa      	b.n	8003608 <_strtol_r+0x58>
 80036b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b6:	bf00      	nop
 80036b8:	2000003c 	.word	0x2000003c

080036bc <strtol>:
 80036bc:	4613      	mov	r3, r2
 80036be:	460a      	mov	r2, r1
 80036c0:	4601      	mov	r1, r0
 80036c2:	4802      	ldr	r0, [pc, #8]	; (80036cc <strtol+0x10>)
 80036c4:	6800      	ldr	r0, [r0, #0]
 80036c6:	f7ff bf73 	b.w	80035b0 <_strtol_r>
 80036ca:	bf00      	nop
 80036cc:	200000a0 	.word	0x200000a0

080036d0 <quorem>:
 80036d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d4:	6903      	ldr	r3, [r0, #16]
 80036d6:	690c      	ldr	r4, [r1, #16]
 80036d8:	4680      	mov	r8, r0
 80036da:	429c      	cmp	r4, r3
 80036dc:	dc7f      	bgt.n	80037de <quorem+0x10e>
 80036de:	3c01      	subs	r4, #1
 80036e0:	f101 0714 	add.w	r7, r1, #20
 80036e4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80036e8:	f100 0614 	add.w	r6, r0, #20
 80036ec:	eb06 030e 	add.w	r3, r6, lr
 80036f0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80036fa:	3501      	adds	r5, #1
 80036fc:	fbb3 f5f5 	udiv	r5, r3, r5
 8003700:	eb07 090e 	add.w	r9, r7, lr
 8003704:	b3c5      	cbz	r5, 8003778 <quorem+0xa8>
 8003706:	f04f 0a00 	mov.w	sl, #0
 800370a:	4638      	mov	r0, r7
 800370c:	46b4      	mov	ip, r6
 800370e:	46d3      	mov	fp, sl
 8003710:	f850 3b04 	ldr.w	r3, [r0], #4
 8003714:	b29a      	uxth	r2, r3
 8003716:	fb05 a202 	mla	r2, r5, r2, sl
 800371a:	0c1b      	lsrs	r3, r3, #16
 800371c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003720:	fb05 a303 	mla	r3, r5, r3, sl
 8003724:	b292      	uxth	r2, r2
 8003726:	ebc2 0b0b 	rsb	fp, r2, fp
 800372a:	f8bc 2000 	ldrh.w	r2, [ip]
 800372e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003732:	445a      	add	r2, fp
 8003734:	fa1f fb83 	uxth.w	fp, r3
 8003738:	f8dc 3000 	ldr.w	r3, [ip]
 800373c:	4581      	cmp	r9, r0
 800373e:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8003742:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8003746:	b292      	uxth	r2, r2
 8003748:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800374c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003750:	f84c 2b04 	str.w	r2, [ip], #4
 8003754:	d2dc      	bcs.n	8003710 <quorem+0x40>
 8003756:	f856 300e 	ldr.w	r3, [r6, lr]
 800375a:	b96b      	cbnz	r3, 8003778 <quorem+0xa8>
 800375c:	9b01      	ldr	r3, [sp, #4]
 800375e:	3b04      	subs	r3, #4
 8003760:	429e      	cmp	r6, r3
 8003762:	461a      	mov	r2, r3
 8003764:	d302      	bcc.n	800376c <quorem+0x9c>
 8003766:	f8c8 4010 	str.w	r4, [r8, #16]
 800376a:	e005      	b.n	8003778 <quorem+0xa8>
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	3b04      	subs	r3, #4
 8003770:	2a00      	cmp	r2, #0
 8003772:	d1f8      	bne.n	8003766 <quorem+0x96>
 8003774:	3c01      	subs	r4, #1
 8003776:	e7f3      	b.n	8003760 <quorem+0x90>
 8003778:	4640      	mov	r0, r8
 800377a:	f001 f802 	bl	8004782 <__mcmp>
 800377e:	2800      	cmp	r0, #0
 8003780:	db2b      	blt.n	80037da <quorem+0x10a>
 8003782:	4630      	mov	r0, r6
 8003784:	3501      	adds	r5, #1
 8003786:	f04f 0e00 	mov.w	lr, #0
 800378a:	f857 2b04 	ldr.w	r2, [r7], #4
 800378e:	6803      	ldr	r3, [r0, #0]
 8003790:	b291      	uxth	r1, r2
 8003792:	ebc1 0e0e 	rsb	lr, r1, lr
 8003796:	0c12      	lsrs	r2, r2, #16
 8003798:	b299      	uxth	r1, r3
 800379a:	4471      	add	r1, lr
 800379c:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 80037a0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80037a4:	b289      	uxth	r1, r1
 80037a6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80037aa:	45b9      	cmp	r9, r7
 80037ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80037b0:	f840 3b04 	str.w	r3, [r0], #4
 80037b4:	d2e9      	bcs.n	800378a <quorem+0xba>
 80037b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80037ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80037be:	b962      	cbnz	r2, 80037da <quorem+0x10a>
 80037c0:	3b04      	subs	r3, #4
 80037c2:	429e      	cmp	r6, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	d302      	bcc.n	80037ce <quorem+0xfe>
 80037c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80037cc:	e005      	b.n	80037da <quorem+0x10a>
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	3b04      	subs	r3, #4
 80037d2:	2a00      	cmp	r2, #0
 80037d4:	d1f8      	bne.n	80037c8 <quorem+0xf8>
 80037d6:	3c01      	subs	r4, #1
 80037d8:	e7f3      	b.n	80037c2 <quorem+0xf2>
 80037da:	4628      	mov	r0, r5
 80037dc:	e000      	b.n	80037e0 <quorem+0x110>
 80037de:	2000      	movs	r0, #0
 80037e0:	b003      	add	sp, #12
 80037e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080037e8 <_dtoa_r>:
 80037e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80037ee:	b095      	sub	sp, #84	; 0x54
 80037f0:	4682      	mov	sl, r0
 80037f2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80037f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80037f8:	b945      	cbnz	r5, 800380c <_dtoa_r+0x24>
 80037fa:	2010      	movs	r0, #16
 80037fc:	f000 fd90 	bl	8004320 <malloc>
 8003800:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8003804:	6045      	str	r5, [r0, #4]
 8003806:	6085      	str	r5, [r0, #8]
 8003808:	6005      	str	r5, [r0, #0]
 800380a:	60c5      	str	r5, [r0, #12]
 800380c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	b159      	cbz	r1, 800382c <_dtoa_r+0x44>
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	2301      	movs	r3, #1
 8003818:	4093      	lsls	r3, r2
 800381a:	604a      	str	r2, [r1, #4]
 800381c:	608b      	str	r3, [r1, #8]
 800381e:	4650      	mov	r0, sl
 8003820:	f000 fdd8 	bl	80043d4 <_Bfree>
 8003824:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	9b03      	ldr	r3, [sp, #12]
 800382e:	4aa0      	ldr	r2, [pc, #640]	; (8003ab0 <_dtoa_r+0x2c8>)
 8003830:	2b00      	cmp	r3, #0
 8003832:	bfbd      	ittte	lt
 8003834:	2301      	movlt	r3, #1
 8003836:	6023      	strlt	r3, [r4, #0]
 8003838:	9b03      	ldrlt	r3, [sp, #12]
 800383a:	2300      	movge	r3, #0
 800383c:	bfbc      	itt	lt
 800383e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003842:	9303      	strlt	r3, [sp, #12]
 8003844:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003848:	bfa8      	it	ge
 800384a:	6023      	strge	r3, [r4, #0]
 800384c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003850:	0d1b      	lsrs	r3, r3, #20
 8003852:	051b      	lsls	r3, r3, #20
 8003854:	4293      	cmp	r3, r2
 8003856:	d11d      	bne.n	8003894 <_dtoa_r+0xac>
 8003858:	f242 730f 	movw	r3, #9999	; 0x270f
 800385c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	9b02      	ldr	r3, [sp, #8]
 8003862:	b943      	cbnz	r3, 8003876 <_dtoa_r+0x8e>
 8003864:	4a93      	ldr	r2, [pc, #588]	; (8003ab4 <_dtoa_r+0x2cc>)
 8003866:	4b94      	ldr	r3, [pc, #592]	; (8003ab8 <_dtoa_r+0x2d0>)
 8003868:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800386c:	2800      	cmp	r0, #0
 800386e:	bf14      	ite	ne
 8003870:	4618      	movne	r0, r3
 8003872:	4610      	moveq	r0, r2
 8003874:	e000      	b.n	8003878 <_dtoa_r+0x90>
 8003876:	4890      	ldr	r0, [pc, #576]	; (8003ab8 <_dtoa_r+0x2d0>)
 8003878:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8546 	beq.w	800430c <_dtoa_r+0xb24>
 8003880:	78c3      	ldrb	r3, [r0, #3]
 8003882:	b113      	cbz	r3, 800388a <_dtoa_r+0xa2>
 8003884:	f100 0308 	add.w	r3, r0, #8
 8003888:	e000      	b.n	800388c <_dtoa_r+0xa4>
 800388a:	1cc3      	adds	r3, r0, #3
 800388c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	f000 bd3c 	b.w	800430c <_dtoa_r+0xb24>
 8003894:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003898:	2200      	movs	r2, #0
 800389a:	2300      	movs	r3, #0
 800389c:	4620      	mov	r0, r4
 800389e:	4629      	mov	r1, r5
 80038a0:	f7fd f888 	bl	80009b4 <__aeabi_dcmpeq>
 80038a4:	4607      	mov	r7, r0
 80038a6:	b158      	cbz	r0, 80038c0 <_dtoa_r+0xd8>
 80038a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80038aa:	2301      	movs	r3, #1
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 851e 	beq.w	80042f2 <_dtoa_r+0xb0a>
 80038b6:	4881      	ldr	r0, [pc, #516]	; (8003abc <_dtoa_r+0x2d4>)
 80038b8:	6018      	str	r0, [r3, #0]
 80038ba:	3801      	subs	r0, #1
 80038bc:	f000 bd26 	b.w	800430c <_dtoa_r+0xb24>
 80038c0:	ab12      	add	r3, sp, #72	; 0x48
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	ab13      	add	r3, sp, #76	; 0x4c
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4622      	mov	r2, r4
 80038ca:	462b      	mov	r3, r5
 80038cc:	4650      	mov	r0, sl
 80038ce:	f000 ffd3 	bl	8004878 <__d2b>
 80038d2:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80038d6:	9004      	str	r0, [sp, #16]
 80038d8:	b156      	cbz	r6, 80038f0 <_dtoa_r+0x108>
 80038da:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80038de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80038e2:	4620      	mov	r0, r4
 80038e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80038e8:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80038ec:	9711      	str	r7, [sp, #68]	; 0x44
 80038ee:	e01d      	b.n	800392c <_dtoa_r+0x144>
 80038f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80038f2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80038f4:	441e      	add	r6, r3
 80038f6:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	dd0a      	ble.n	8003914 <_dtoa_r+0x12c>
 80038fe:	9a02      	ldr	r2, [sp, #8]
 8003900:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8003904:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003908:	fa22 f000 	lsr.w	r0, r2, r0
 800390c:	fa08 f303 	lsl.w	r3, r8, r3
 8003910:	4318      	orrs	r0, r3
 8003912:	e004      	b.n	800391e <_dtoa_r+0x136>
 8003914:	f1c3 0020 	rsb	r0, r3, #32
 8003918:	9b02      	ldr	r3, [sp, #8]
 800391a:	fa03 f000 	lsl.w	r0, r3, r0
 800391e:	f7fc fd6b 	bl	80003f8 <__aeabi_ui2d>
 8003922:	2301      	movs	r3, #1
 8003924:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003928:	3e01      	subs	r6, #1
 800392a:	9311      	str	r3, [sp, #68]	; 0x44
 800392c:	2200      	movs	r2, #0
 800392e:	4b64      	ldr	r3, [pc, #400]	; (8003ac0 <_dtoa_r+0x2d8>)
 8003930:	f7fc fc24 	bl	800017c <__aeabi_dsub>
 8003934:	a358      	add	r3, pc, #352	; (adr r3, 8003a98 <_dtoa_r+0x2b0>)
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f7fc fdd3 	bl	80004e4 <__aeabi_dmul>
 800393e:	a358      	add	r3, pc, #352	; (adr r3, 8003aa0 <_dtoa_r+0x2b8>)
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f7fc fc1c 	bl	8000180 <__adddf3>
 8003948:	4604      	mov	r4, r0
 800394a:	4630      	mov	r0, r6
 800394c:	460d      	mov	r5, r1
 800394e:	f7fc fd63 	bl	8000418 <__aeabi_i2d>
 8003952:	a355      	add	r3, pc, #340	; (adr r3, 8003aa8 <_dtoa_r+0x2c0>)
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f7fc fdc4 	bl	80004e4 <__aeabi_dmul>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4620      	mov	r0, r4
 8003962:	4629      	mov	r1, r5
 8003964:	f7fc fc0c 	bl	8000180 <__adddf3>
 8003968:	4604      	mov	r4, r0
 800396a:	460d      	mov	r5, r1
 800396c:	f7fd f86a 	bl	8000a44 <__aeabi_d2iz>
 8003970:	2200      	movs	r2, #0
 8003972:	4683      	mov	fp, r0
 8003974:	2300      	movs	r3, #0
 8003976:	4620      	mov	r0, r4
 8003978:	4629      	mov	r1, r5
 800397a:	f7fd f825 	bl	80009c8 <__aeabi_dcmplt>
 800397e:	b158      	cbz	r0, 8003998 <_dtoa_r+0x1b0>
 8003980:	4658      	mov	r0, fp
 8003982:	f7fc fd49 	bl	8000418 <__aeabi_i2d>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4620      	mov	r0, r4
 800398c:	4629      	mov	r1, r5
 800398e:	f7fd f811 	bl	80009b4 <__aeabi_dcmpeq>
 8003992:	b908      	cbnz	r0, 8003998 <_dtoa_r+0x1b0>
 8003994:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003998:	f1bb 0f16 	cmp.w	fp, #22
 800399c:	d80d      	bhi.n	80039ba <_dtoa_r+0x1d2>
 800399e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039a2:	4948      	ldr	r1, [pc, #288]	; (8003ac4 <_dtoa_r+0x2dc>)
 80039a4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80039a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039ac:	f7fd f82a 	bl	8000a04 <__aeabi_dcmpgt>
 80039b0:	b130      	cbz	r0, 80039c0 <_dtoa_r+0x1d8>
 80039b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80039b6:	2300      	movs	r3, #0
 80039b8:	e000      	b.n	80039bc <_dtoa_r+0x1d4>
 80039ba:	2301      	movs	r3, #1
 80039bc:	9310      	str	r3, [sp, #64]	; 0x40
 80039be:	e000      	b.n	80039c2 <_dtoa_r+0x1da>
 80039c0:	9010      	str	r0, [sp, #64]	; 0x40
 80039c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80039c4:	1b9e      	subs	r6, r3, r6
 80039c6:	1e73      	subs	r3, r6, #1
 80039c8:	9307      	str	r3, [sp, #28]
 80039ca:	bf43      	ittte	mi
 80039cc:	f1c3 0800 	rsbmi	r8, r3, #0
 80039d0:	2300      	movmi	r3, #0
 80039d2:	9307      	strmi	r3, [sp, #28]
 80039d4:	f04f 0800 	movpl.w	r8, #0
 80039d8:	f1bb 0f00 	cmp.w	fp, #0
 80039dc:	db06      	blt.n	80039ec <_dtoa_r+0x204>
 80039de:	9b07      	ldr	r3, [sp, #28]
 80039e0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80039e4:	445b      	add	r3, fp
 80039e6:	9307      	str	r3, [sp, #28]
 80039e8:	2700      	movs	r7, #0
 80039ea:	e005      	b.n	80039f8 <_dtoa_r+0x210>
 80039ec:	2300      	movs	r3, #0
 80039ee:	ebcb 0808 	rsb	r8, fp, r8
 80039f2:	f1cb 0700 	rsb	r7, fp, #0
 80039f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80039f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80039fa:	2b09      	cmp	r3, #9
 80039fc:	d828      	bhi.n	8003a50 <_dtoa_r+0x268>
 80039fe:	2b05      	cmp	r3, #5
 8003a00:	bfc4      	itt	gt
 8003a02:	3b04      	subgt	r3, #4
 8003a04:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003a06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a08:	bfc8      	it	gt
 8003a0a:	2500      	movgt	r5, #0
 8003a0c:	f1a3 0302 	sub.w	r3, r3, #2
 8003a10:	bfd8      	it	le
 8003a12:	2501      	movle	r5, #1
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d820      	bhi.n	8003a5a <_dtoa_r+0x272>
 8003a18:	e8df f003 	tbb	[pc, r3]
 8003a1c:	04020e06 	.word	0x04020e06
 8003a20:	2301      	movs	r3, #1
 8003a22:	e002      	b.n	8003a2a <_dtoa_r+0x242>
 8003a24:	2301      	movs	r3, #1
 8003a26:	e008      	b.n	8003a3a <_dtoa_r+0x252>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8003a2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	dd1d      	ble.n	8003a6e <_dtoa_r+0x286>
 8003a32:	4699      	mov	r9, r3
 8003a34:	9305      	str	r3, [sp, #20]
 8003a36:	e021      	b.n	8003a7c <_dtoa_r+0x294>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8003a3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a3e:	eb0b 0903 	add.w	r9, fp, r3
 8003a42:	f109 0301 	add.w	r3, r9, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	9305      	str	r3, [sp, #20]
 8003a4a:	bfb8      	it	lt
 8003a4c:	2301      	movlt	r3, #1
 8003a4e:	e015      	b.n	8003a7c <_dtoa_r+0x294>
 8003a50:	2501      	movs	r5, #1
 8003a52:	2300      	movs	r3, #0
 8003a54:	931e      	str	r3, [sp, #120]	; 0x78
 8003a56:	950a      	str	r5, [sp, #40]	; 0x28
 8003a58:	e001      	b.n	8003a5e <_dtoa_r+0x276>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8003a5e:	f04f 39ff 	mov.w	r9, #4294967295
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8cd 9014 	str.w	r9, [sp, #20]
 8003a68:	2312      	movs	r3, #18
 8003a6a:	921f      	str	r2, [sp, #124]	; 0x7c
 8003a6c:	e006      	b.n	8003a7c <_dtoa_r+0x294>
 8003a6e:	f04f 0901 	mov.w	r9, #1
 8003a72:	464b      	mov	r3, r9
 8003a74:	f8cd 9014 	str.w	r9, [sp, #20]
 8003a78:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8003a7c:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8003a80:	2200      	movs	r2, #0
 8003a82:	6062      	str	r2, [r4, #4]
 8003a84:	2104      	movs	r1, #4
 8003a86:	f101 0214 	add.w	r2, r1, #20
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d81c      	bhi.n	8003ac8 <_dtoa_r+0x2e0>
 8003a8e:	6862      	ldr	r2, [r4, #4]
 8003a90:	0049      	lsls	r1, r1, #1
 8003a92:	3201      	adds	r2, #1
 8003a94:	6062      	str	r2, [r4, #4]
 8003a96:	e7f6      	b.n	8003a86 <_dtoa_r+0x29e>
 8003a98:	636f4361 	.word	0x636f4361
 8003a9c:	3fd287a7 	.word	0x3fd287a7
 8003aa0:	8b60c8b3 	.word	0x8b60c8b3
 8003aa4:	3fc68a28 	.word	0x3fc68a28
 8003aa8:	509f79fb 	.word	0x509f79fb
 8003aac:	3fd34413 	.word	0x3fd34413
 8003ab0:	7ff00000 	.word	0x7ff00000
 8003ab4:	08005087 	.word	0x08005087
 8003ab8:	08005090 	.word	0x08005090
 8003abc:	08004f63 	.word	0x08004f63
 8003ac0:	3ff80000 	.word	0x3ff80000
 8003ac4:	080050a0 	.word	0x080050a0
 8003ac8:	6861      	ldr	r1, [r4, #4]
 8003aca:	4650      	mov	r0, sl
 8003acc:	f000 fc4d 	bl	800436a <_Balloc>
 8003ad0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003ad4:	6020      	str	r0, [r4, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	9306      	str	r3, [sp, #24]
 8003ada:	9b05      	ldr	r3, [sp, #20]
 8003adc:	2b0e      	cmp	r3, #14
 8003ade:	f200 815b 	bhi.w	8003d98 <_dtoa_r+0x5b0>
 8003ae2:	2d00      	cmp	r5, #0
 8003ae4:	f000 8158 	beq.w	8003d98 <_dtoa_r+0x5b0>
 8003ae8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8003aec:	f1bb 0f00 	cmp.w	fp, #0
 8003af0:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8003af4:	dd30      	ble.n	8003b58 <_dtoa_r+0x370>
 8003af6:	4a9f      	ldr	r2, [pc, #636]	; (8003d74 <_dtoa_r+0x58c>)
 8003af8:	f00b 030f 	and.w	r3, fp, #15
 8003afc:	ea4f 152b 	mov.w	r5, fp, asr #4
 8003b00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003b04:	06e8      	lsls	r0, r5, #27
 8003b06:	cb18      	ldmia	r3, {r3, r4}
 8003b08:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003b0c:	d50c      	bpl.n	8003b28 <_dtoa_r+0x340>
 8003b0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003b12:	4b99      	ldr	r3, [pc, #612]	; (8003d78 <_dtoa_r+0x590>)
 8003b14:	f005 050f 	and.w	r5, r5, #15
 8003b18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b1c:	f7fc fe0c 	bl	8000738 <__aeabi_ddiv>
 8003b20:	2403      	movs	r4, #3
 8003b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b26:	e000      	b.n	8003b2a <_dtoa_r+0x342>
 8003b28:	2402      	movs	r4, #2
 8003b2a:	4e93      	ldr	r6, [pc, #588]	; (8003d78 <_dtoa_r+0x590>)
 8003b2c:	b16d      	cbz	r5, 8003b4a <_dtoa_r+0x362>
 8003b2e:	07e9      	lsls	r1, r5, #31
 8003b30:	d508      	bpl.n	8003b44 <_dtoa_r+0x35c>
 8003b32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003b36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003b3a:	f7fc fcd3 	bl	80004e4 <__aeabi_dmul>
 8003b3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003b42:	3401      	adds	r4, #1
 8003b44:	106d      	asrs	r5, r5, #1
 8003b46:	3608      	adds	r6, #8
 8003b48:	e7f0      	b.n	8003b2c <_dtoa_r+0x344>
 8003b4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b52:	f7fc fdf1 	bl	8000738 <__aeabi_ddiv>
 8003b56:	e020      	b.n	8003b9a <_dtoa_r+0x3b2>
 8003b58:	f1cb 0500 	rsb	r5, fp, #0
 8003b5c:	b305      	cbz	r5, 8003ba0 <_dtoa_r+0x3b8>
 8003b5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003b62:	4b84      	ldr	r3, [pc, #528]	; (8003d74 <_dtoa_r+0x58c>)
 8003b64:	f005 020f 	and.w	r2, r5, #15
 8003b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f7fc fcb8 	bl	80004e4 <__aeabi_dmul>
 8003b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b78:	4e7f      	ldr	r6, [pc, #508]	; (8003d78 <_dtoa_r+0x590>)
 8003b7a:	112d      	asrs	r5, r5, #4
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2402      	movs	r4, #2
 8003b80:	b155      	cbz	r5, 8003b98 <_dtoa_r+0x3b0>
 8003b82:	07ea      	lsls	r2, r5, #31
 8003b84:	d505      	bpl.n	8003b92 <_dtoa_r+0x3aa>
 8003b86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003b8a:	f7fc fcab 	bl	80004e4 <__aeabi_dmul>
 8003b8e:	3401      	adds	r4, #1
 8003b90:	2301      	movs	r3, #1
 8003b92:	106d      	asrs	r5, r5, #1
 8003b94:	3608      	adds	r6, #8
 8003b96:	e7f3      	b.n	8003b80 <_dtoa_r+0x398>
 8003b98:	b11b      	cbz	r3, 8003ba2 <_dtoa_r+0x3ba>
 8003b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b9e:	e000      	b.n	8003ba2 <_dtoa_r+0x3ba>
 8003ba0:	2402      	movs	r4, #2
 8003ba2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ba4:	b1e3      	cbz	r3, 8003be0 <_dtoa_r+0x3f8>
 8003ba6:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 8003baa:	2200      	movs	r2, #0
 8003bac:	4b73      	ldr	r3, [pc, #460]	; (8003d7c <_dtoa_r+0x594>)
 8003bae:	4628      	mov	r0, r5
 8003bb0:	4631      	mov	r1, r6
 8003bb2:	f7fc ff09 	bl	80009c8 <__aeabi_dcmplt>
 8003bb6:	b198      	cbz	r0, 8003be0 <_dtoa_r+0x3f8>
 8003bb8:	9b05      	ldr	r3, [sp, #20]
 8003bba:	b18b      	cbz	r3, 8003be0 <_dtoa_r+0x3f8>
 8003bbc:	f1b9 0f00 	cmp.w	r9, #0
 8003bc0:	f340 80e6 	ble.w	8003d90 <_dtoa_r+0x5a8>
 8003bc4:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003bc8:	9308      	str	r3, [sp, #32]
 8003bca:	4631      	mov	r1, r6
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4b6c      	ldr	r3, [pc, #432]	; (8003d80 <_dtoa_r+0x598>)
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f7fc fc87 	bl	80004e4 <__aeabi_dmul>
 8003bd6:	3401      	adds	r4, #1
 8003bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bdc:	464e      	mov	r6, r9
 8003bde:	e002      	b.n	8003be6 <_dtoa_r+0x3fe>
 8003be0:	9e05      	ldr	r6, [sp, #20]
 8003be2:	f8cd b020 	str.w	fp, [sp, #32]
 8003be6:	4620      	mov	r0, r4
 8003be8:	f7fc fc16 	bl	8000418 <__aeabi_i2d>
 8003bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bf0:	f7fc fc78 	bl	80004e4 <__aeabi_dmul>
 8003bf4:	4b63      	ldr	r3, [pc, #396]	; (8003d84 <_dtoa_r+0x59c>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f7fc fac2 	bl	8000180 <__adddf3>
 8003bfc:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003c00:	4604      	mov	r4, r0
 8003c02:	930c      	str	r3, [sp, #48]	; 0x30
 8003c04:	461d      	mov	r5, r3
 8003c06:	b9d6      	cbnz	r6, 8003c3e <_dtoa_r+0x456>
 8003c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4b5e      	ldr	r3, [pc, #376]	; (8003d88 <_dtoa_r+0x5a0>)
 8003c10:	f7fc fab4 	bl	800017c <__aeabi_dsub>
 8003c14:	4622      	mov	r2, r4
 8003c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c1c:	f7fc fef2 	bl	8000a04 <__aeabi_dcmpgt>
 8003c20:	2800      	cmp	r0, #0
 8003c22:	f040 823f 	bne.w	80040a4 <_dtoa_r+0x8bc>
 8003c26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c28:	4622      	mov	r2, r4
 8003c2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c32:	f7fc fec9 	bl	80009c8 <__aeabi_dcmplt>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	f040 822b 	bne.w	8004092 <_dtoa_r+0x8aa>
 8003c3c:	e0a8      	b.n	8003d90 <_dtoa_r+0x5a8>
 8003c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c40:	4b4c      	ldr	r3, [pc, #304]	; (8003d74 <_dtoa_r+0x58c>)
 8003c42:	1e71      	subs	r1, r6, #1
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	d049      	beq.n	8003cdc <_dtoa_r+0x4f4>
 8003c48:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	2000      	movs	r0, #0
 8003c52:	494e      	ldr	r1, [pc, #312]	; (8003d8c <_dtoa_r+0x5a4>)
 8003c54:	f7fc fd70 	bl	8000738 <__aeabi_ddiv>
 8003c58:	4622      	mov	r2, r4
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	f7fc fa8e 	bl	800017c <__aeabi_dsub>
 8003c60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003c64:	9c06      	ldr	r4, [sp, #24]
 8003c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c6a:	f7fc feeb 	bl	8000a44 <__aeabi_d2iz>
 8003c6e:	4605      	mov	r5, r0
 8003c70:	f7fc fbd2 	bl	8000418 <__aeabi_i2d>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c7c:	f7fc fa7e 	bl	800017c <__aeabi_dsub>
 8003c80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003c84:	3530      	adds	r5, #48	; 0x30
 8003c86:	f804 5b01 	strb.w	r5, [r4], #1
 8003c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c8e:	f7fc fe9b 	bl	80009c8 <__aeabi_dcmplt>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	f040 831d 	bne.w	80042d2 <_dtoa_r+0xaea>
 8003c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	4937      	ldr	r1, [pc, #220]	; (8003d7c <_dtoa_r+0x594>)
 8003ca0:	f7fc fa6c 	bl	800017c <__aeabi_dsub>
 8003ca4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003ca8:	f7fc fe8e 	bl	80009c8 <__aeabi_dcmplt>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	f040 80d1 	bne.w	8003e54 <_dtoa_r+0x66c>
 8003cb2:	9b06      	ldr	r3, [sp, #24]
 8003cb4:	1ae3      	subs	r3, r4, r3
 8003cb6:	42b3      	cmp	r3, r6
 8003cb8:	da6a      	bge.n	8003d90 <_dtoa_r+0x5a8>
 8003cba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4b2f      	ldr	r3, [pc, #188]	; (8003d80 <_dtoa_r+0x598>)
 8003cc2:	f7fc fc0f 	bl	80004e4 <__aeabi_dmul>
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <_dtoa_r+0x598>)
 8003cd2:	f7fc fc07 	bl	80004e4 <__aeabi_dmul>
 8003cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cda:	e7c4      	b.n	8003c66 <_dtoa_r+0x47e>
 8003cdc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003ce0:	4622      	mov	r2, r4
 8003ce2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ce6:	462b      	mov	r3, r5
 8003ce8:	f7fc fbfc 	bl	80004e4 <__aeabi_dmul>
 8003cec:	9b06      	ldr	r3, [sp, #24]
 8003cee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	199c      	adds	r4, r3, r6
 8003cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cfa:	f7fc fea3 	bl	8000a44 <__aeabi_d2iz>
 8003cfe:	4606      	mov	r6, r0
 8003d00:	f7fc fb8a 	bl	8000418 <__aeabi_i2d>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d0c:	f7fc fa36 	bl	800017c <__aeabi_dsub>
 8003d10:	3630      	adds	r6, #48	; 0x30
 8003d12:	f805 6b01 	strb.w	r6, [r5], #1
 8003d16:	42ac      	cmp	r4, r5
 8003d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	d122      	bne.n	8003d68 <_dtoa_r+0x580>
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <_dtoa_r+0x5a4>)
 8003d24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d28:	f7fc fa2a 	bl	8000180 <__adddf3>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d34:	f7fc fe66 	bl	8000a04 <__aeabi_dcmpgt>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	f040 808b 	bne.w	8003e54 <_dtoa_r+0x66c>
 8003d3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003d42:	2000      	movs	r0, #0
 8003d44:	4911      	ldr	r1, [pc, #68]	; (8003d8c <_dtoa_r+0x5a4>)
 8003d46:	f7fc fa19 	bl	800017c <__aeabi_dsub>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d52:	f7fc fe39 	bl	80009c8 <__aeabi_dcmplt>
 8003d56:	b1d8      	cbz	r0, 8003d90 <_dtoa_r+0x5a8>
 8003d58:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8003d5c:	1e62      	subs	r2, r4, #1
 8003d5e:	2b30      	cmp	r3, #48	; 0x30
 8003d60:	f040 82b7 	bne.w	80042d2 <_dtoa_r+0xaea>
 8003d64:	4614      	mov	r4, r2
 8003d66:	e7f7      	b.n	8003d58 <_dtoa_r+0x570>
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <_dtoa_r+0x598>)
 8003d6a:	f7fc fbbb 	bl	80004e4 <__aeabi_dmul>
 8003d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d72:	e7c0      	b.n	8003cf6 <_dtoa_r+0x50e>
 8003d74:	080050a0 	.word	0x080050a0
 8003d78:	08005168 	.word	0x08005168
 8003d7c:	3ff00000 	.word	0x3ff00000
 8003d80:	40240000 	.word	0x40240000
 8003d84:	401c0000 	.word	0x401c0000
 8003d88:	40140000 	.word	0x40140000
 8003d8c:	3fe00000 	.word	0x3fe00000
 8003d90:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8003d94:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	db7c      	blt.n	8003e98 <_dtoa_r+0x6b0>
 8003d9e:	f1bb 0f0e 	cmp.w	fp, #14
 8003da2:	dc79      	bgt.n	8003e98 <_dtoa_r+0x6b0>
 8003da4:	4bab      	ldr	r3, [pc, #684]	; (8004054 <_dtoa_r+0x86c>)
 8003da6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003daa:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003dae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	da14      	bge.n	8003dde <_dtoa_r+0x5f6>
 8003db4:	9b05      	ldr	r3, [sp, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	dc11      	bgt.n	8003dde <_dtoa_r+0x5f6>
 8003dba:	f040 816c 	bne.w	8004096 <_dtoa_r+0x8ae>
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4ba5      	ldr	r3, [pc, #660]	; (8004058 <_dtoa_r+0x870>)
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	4639      	mov	r1, r7
 8003dc6:	f7fc fb8d 	bl	80004e4 <__aeabi_dmul>
 8003dca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dce:	f7fc fe0f 	bl	80009f0 <__aeabi_dcmpge>
 8003dd2:	9d05      	ldr	r5, [sp, #20]
 8003dd4:	462e      	mov	r6, r5
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	f040 815f 	bne.w	800409a <_dtoa_r+0x8b2>
 8003ddc:	e165      	b.n	80040aa <_dtoa_r+0x8c2>
 8003dde:	9c06      	ldr	r4, [sp, #24]
 8003de0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003de4:	4632      	mov	r2, r6
 8003de6:	463b      	mov	r3, r7
 8003de8:	4640      	mov	r0, r8
 8003dea:	4649      	mov	r1, r9
 8003dec:	f7fc fca4 	bl	8000738 <__aeabi_ddiv>
 8003df0:	f7fc fe28 	bl	8000a44 <__aeabi_d2iz>
 8003df4:	4605      	mov	r5, r0
 8003df6:	f7fc fb0f 	bl	8000418 <__aeabi_i2d>
 8003dfa:	4632      	mov	r2, r6
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	f7fc fb71 	bl	80004e4 <__aeabi_dmul>
 8003e02:	460b      	mov	r3, r1
 8003e04:	4602      	mov	r2, r0
 8003e06:	4649      	mov	r1, r9
 8003e08:	4640      	mov	r0, r8
 8003e0a:	f7fc f9b7 	bl	800017c <__aeabi_dsub>
 8003e0e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8003e12:	9b06      	ldr	r3, [sp, #24]
 8003e14:	f804 eb01 	strb.w	lr, [r4], #1
 8003e18:	ebc3 0e04 	rsb	lr, r3, r4
 8003e1c:	9b05      	ldr	r3, [sp, #20]
 8003e1e:	4573      	cmp	r3, lr
 8003e20:	d12d      	bne.n	8003e7e <_dtoa_r+0x696>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	f7fc f9ab 	bl	8000180 <__adddf3>
 8003e2a:	4680      	mov	r8, r0
 8003e2c:	4689      	mov	r9, r1
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4630      	mov	r0, r6
 8003e34:	4639      	mov	r1, r7
 8003e36:	f7fc fdc7 	bl	80009c8 <__aeabi_dcmplt>
 8003e3a:	b978      	cbnz	r0, 8003e5c <_dtoa_r+0x674>
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	464b      	mov	r3, r9
 8003e40:	4630      	mov	r0, r6
 8003e42:	4639      	mov	r1, r7
 8003e44:	f7fc fdb6 	bl	80009b4 <__aeabi_dcmpeq>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	f000 8244 	beq.w	80042d6 <_dtoa_r+0xaee>
 8003e4e:	07eb      	lsls	r3, r5, #31
 8003e50:	d404      	bmi.n	8003e5c <_dtoa_r+0x674>
 8003e52:	e240      	b.n	80042d6 <_dtoa_r+0xaee>
 8003e54:	f8dd b020 	ldr.w	fp, [sp, #32]
 8003e58:	e000      	b.n	8003e5c <_dtoa_r+0x674>
 8003e5a:	461c      	mov	r4, r3
 8003e5c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8003e60:	1e63      	subs	r3, r4, #1
 8003e62:	2a39      	cmp	r2, #57	; 0x39
 8003e64:	d107      	bne.n	8003e76 <_dtoa_r+0x68e>
 8003e66:	9a06      	ldr	r2, [sp, #24]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d1f6      	bne.n	8003e5a <_dtoa_r+0x672>
 8003e6c:	9906      	ldr	r1, [sp, #24]
 8003e6e:	2230      	movs	r2, #48	; 0x30
 8003e70:	f10b 0b01 	add.w	fp, fp, #1
 8003e74:	700a      	strb	r2, [r1, #0]
 8003e76:	781a      	ldrb	r2, [r3, #0]
 8003e78:	3201      	adds	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	e22b      	b.n	80042d6 <_dtoa_r+0xaee>
 8003e7e:	2200      	movs	r2, #0
 8003e80:	4b76      	ldr	r3, [pc, #472]	; (800405c <_dtoa_r+0x874>)
 8003e82:	f7fc fb2f 	bl	80004e4 <__aeabi_dmul>
 8003e86:	2200      	movs	r2, #0
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4680      	mov	r8, r0
 8003e8c:	4689      	mov	r9, r1
 8003e8e:	f7fc fd91 	bl	80009b4 <__aeabi_dcmpeq>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d0a6      	beq.n	8003de4 <_dtoa_r+0x5fc>
 8003e96:	e21e      	b.n	80042d6 <_dtoa_r+0xaee>
 8003e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e9a:	2a00      	cmp	r2, #0
 8003e9c:	d02b      	beq.n	8003ef6 <_dtoa_r+0x70e>
 8003e9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003ea0:	2a01      	cmp	r2, #1
 8003ea2:	dc0a      	bgt.n	8003eba <_dtoa_r+0x6d2>
 8003ea4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003ea6:	b112      	cbz	r2, 8003eae <_dtoa_r+0x6c6>
 8003ea8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003eac:	e002      	b.n	8003eb4 <_dtoa_r+0x6cc>
 8003eae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003eb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003eb4:	463d      	mov	r5, r7
 8003eb6:	4644      	mov	r4, r8
 8003eb8:	e013      	b.n	8003ee2 <_dtoa_r+0x6fa>
 8003eba:	9b05      	ldr	r3, [sp, #20]
 8003ebc:	1e5d      	subs	r5, r3, #1
 8003ebe:	42af      	cmp	r7, r5
 8003ec0:	bfbf      	itttt	lt
 8003ec2:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8003ec4:	1bea      	sublt	r2, r5, r7
 8003ec6:	189b      	addlt	r3, r3, r2
 8003ec8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8003eca:	9b05      	ldr	r3, [sp, #20]
 8003ecc:	bfb6      	itet	lt
 8003ece:	462f      	movlt	r7, r5
 8003ed0:	1b7d      	subge	r5, r7, r5
 8003ed2:	2500      	movlt	r5, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bfa7      	ittee	ge
 8003ed8:	4644      	movge	r4, r8
 8003eda:	9b05      	ldrge	r3, [sp, #20]
 8003edc:	ebc3 0408 	rsblt	r4, r3, r8
 8003ee0:	2300      	movlt	r3, #0
 8003ee2:	9a07      	ldr	r2, [sp, #28]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	441a      	add	r2, r3
 8003ee8:	4650      	mov	r0, sl
 8003eea:	4498      	add	r8, r3
 8003eec:	9207      	str	r2, [sp, #28]
 8003eee:	f000 fb10 	bl	8004512 <__i2b>
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	e002      	b.n	8003efc <_dtoa_r+0x714>
 8003ef6:	463d      	mov	r5, r7
 8003ef8:	4644      	mov	r4, r8
 8003efa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003efc:	b15c      	cbz	r4, 8003f16 <_dtoa_r+0x72e>
 8003efe:	9b07      	ldr	r3, [sp, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	dd08      	ble.n	8003f16 <_dtoa_r+0x72e>
 8003f04:	42a3      	cmp	r3, r4
 8003f06:	bfa8      	it	ge
 8003f08:	4623      	movge	r3, r4
 8003f0a:	9a07      	ldr	r2, [sp, #28]
 8003f0c:	ebc3 0808 	rsb	r8, r3, r8
 8003f10:	1ae4      	subs	r4, r4, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	9307      	str	r3, [sp, #28]
 8003f16:	2f00      	cmp	r7, #0
 8003f18:	dd1d      	ble.n	8003f56 <_dtoa_r+0x76e>
 8003f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f1c:	b1ab      	cbz	r3, 8003f4a <_dtoa_r+0x762>
 8003f1e:	b18d      	cbz	r5, 8003f44 <_dtoa_r+0x75c>
 8003f20:	4631      	mov	r1, r6
 8003f22:	462a      	mov	r2, r5
 8003f24:	4650      	mov	r0, sl
 8003f26:	f000 fb8d 	bl	8004644 <__pow5mult>
 8003f2a:	9a04      	ldr	r2, [sp, #16]
 8003f2c:	4601      	mov	r1, r0
 8003f2e:	4606      	mov	r6, r0
 8003f30:	4650      	mov	r0, sl
 8003f32:	f000 faf7 	bl	8004524 <__multiply>
 8003f36:	9904      	ldr	r1, [sp, #16]
 8003f38:	9008      	str	r0, [sp, #32]
 8003f3a:	4650      	mov	r0, sl
 8003f3c:	f000 fa4a 	bl	80043d4 <_Bfree>
 8003f40:	9b08      	ldr	r3, [sp, #32]
 8003f42:	9304      	str	r3, [sp, #16]
 8003f44:	1b7a      	subs	r2, r7, r5
 8003f46:	d006      	beq.n	8003f56 <_dtoa_r+0x76e>
 8003f48:	e000      	b.n	8003f4c <_dtoa_r+0x764>
 8003f4a:	463a      	mov	r2, r7
 8003f4c:	9904      	ldr	r1, [sp, #16]
 8003f4e:	4650      	mov	r0, sl
 8003f50:	f000 fb78 	bl	8004644 <__pow5mult>
 8003f54:	9004      	str	r0, [sp, #16]
 8003f56:	2101      	movs	r1, #1
 8003f58:	4650      	mov	r0, sl
 8003f5a:	f000 fada 	bl	8004512 <__i2b>
 8003f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f60:	4605      	mov	r5, r0
 8003f62:	b35b      	cbz	r3, 8003fbc <_dtoa_r+0x7d4>
 8003f64:	461a      	mov	r2, r3
 8003f66:	4601      	mov	r1, r0
 8003f68:	4650      	mov	r0, sl
 8003f6a:	f000 fb6b 	bl	8004644 <__pow5mult>
 8003f6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f70:	4605      	mov	r5, r0
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	dc18      	bgt.n	8003fa8 <_dtoa_r+0x7c0>
 8003f76:	9b02      	ldr	r3, [sp, #8]
 8003f78:	b983      	cbnz	r3, 8003f9c <_dtoa_r+0x7b4>
 8003f7a:	9b03      	ldr	r3, [sp, #12]
 8003f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f80:	b973      	cbnz	r3, 8003fa0 <_dtoa_r+0x7b8>
 8003f82:	9b03      	ldr	r3, [sp, #12]
 8003f84:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8003f88:	0d3f      	lsrs	r7, r7, #20
 8003f8a:	053f      	lsls	r7, r7, #20
 8003f8c:	b14f      	cbz	r7, 8003fa2 <_dtoa_r+0x7ba>
 8003f8e:	9b07      	ldr	r3, [sp, #28]
 8003f90:	f108 0801 	add.w	r8, r8, #1
 8003f94:	3301      	adds	r3, #1
 8003f96:	9307      	str	r3, [sp, #28]
 8003f98:	2701      	movs	r7, #1
 8003f9a:	e002      	b.n	8003fa2 <_dtoa_r+0x7ba>
 8003f9c:	2700      	movs	r7, #0
 8003f9e:	e000      	b.n	8003fa2 <_dtoa_r+0x7ba>
 8003fa0:	9f02      	ldr	r7, [sp, #8]
 8003fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fa4:	b173      	cbz	r3, 8003fc4 <_dtoa_r+0x7dc>
 8003fa6:	e000      	b.n	8003faa <_dtoa_r+0x7c2>
 8003fa8:	2700      	movs	r7, #0
 8003faa:	692b      	ldr	r3, [r5, #16]
 8003fac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003fb0:	6918      	ldr	r0, [r3, #16]
 8003fb2:	f000 fa61 	bl	8004478 <__hi0bits>
 8003fb6:	f1c0 0020 	rsb	r0, r0, #32
 8003fba:	e004      	b.n	8003fc6 <_dtoa_r+0x7de>
 8003fbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	ddd9      	ble.n	8003f76 <_dtoa_r+0x78e>
 8003fc2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	9b07      	ldr	r3, [sp, #28]
 8003fc8:	4418      	add	r0, r3
 8003fca:	f010 001f 	ands.w	r0, r0, #31
 8003fce:	d008      	beq.n	8003fe2 <_dtoa_r+0x7fa>
 8003fd0:	f1c0 0320 	rsb	r3, r0, #32
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	dd02      	ble.n	8003fde <_dtoa_r+0x7f6>
 8003fd8:	f1c0 001c 	rsb	r0, r0, #28
 8003fdc:	e002      	b.n	8003fe4 <_dtoa_r+0x7fc>
 8003fde:	d006      	beq.n	8003fee <_dtoa_r+0x806>
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	301c      	adds	r0, #28
 8003fe4:	9b07      	ldr	r3, [sp, #28]
 8003fe6:	4480      	add	r8, r0
 8003fe8:	4403      	add	r3, r0
 8003fea:	4404      	add	r4, r0
 8003fec:	9307      	str	r3, [sp, #28]
 8003fee:	f1b8 0f00 	cmp.w	r8, #0
 8003ff2:	dd05      	ble.n	8004000 <_dtoa_r+0x818>
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	9904      	ldr	r1, [sp, #16]
 8003ff8:	4650      	mov	r0, sl
 8003ffa:	f000 fb71 	bl	80046e0 <__lshift>
 8003ffe:	9004      	str	r0, [sp, #16]
 8004000:	9b07      	ldr	r3, [sp, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	dd05      	ble.n	8004012 <_dtoa_r+0x82a>
 8004006:	4629      	mov	r1, r5
 8004008:	461a      	mov	r2, r3
 800400a:	4650      	mov	r0, sl
 800400c:	f000 fb68 	bl	80046e0 <__lshift>
 8004010:	4605      	mov	r5, r0
 8004012:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004014:	b323      	cbz	r3, 8004060 <_dtoa_r+0x878>
 8004016:	4629      	mov	r1, r5
 8004018:	9804      	ldr	r0, [sp, #16]
 800401a:	f000 fbb2 	bl	8004782 <__mcmp>
 800401e:	2800      	cmp	r0, #0
 8004020:	da1e      	bge.n	8004060 <_dtoa_r+0x878>
 8004022:	2300      	movs	r3, #0
 8004024:	220a      	movs	r2, #10
 8004026:	9904      	ldr	r1, [sp, #16]
 8004028:	4650      	mov	r0, sl
 800402a:	f000 f9ea 	bl	8004402 <__multadd>
 800402e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004030:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004034:	9004      	str	r0, [sp, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 815f 	beq.w	80042fa <_dtoa_r+0xb12>
 800403c:	4631      	mov	r1, r6
 800403e:	2300      	movs	r3, #0
 8004040:	220a      	movs	r2, #10
 8004042:	4650      	mov	r0, sl
 8004044:	f000 f9dd 	bl	8004402 <__multadd>
 8004048:	f1b9 0f00 	cmp.w	r9, #0
 800404c:	4606      	mov	r6, r0
 800404e:	dc3f      	bgt.n	80040d0 <_dtoa_r+0x8e8>
 8004050:	e03b      	b.n	80040ca <_dtoa_r+0x8e2>
 8004052:	bf00      	nop
 8004054:	080050a0 	.word	0x080050a0
 8004058:	40140000 	.word	0x40140000
 800405c:	40240000 	.word	0x40240000
 8004060:	9b05      	ldr	r3, [sp, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	dc2b      	bgt.n	80040be <_dtoa_r+0x8d6>
 8004066:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004068:	2b02      	cmp	r3, #2
 800406a:	dd28      	ble.n	80040be <_dtoa_r+0x8d6>
 800406c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004070:	f1b9 0f00 	cmp.w	r9, #0
 8004074:	d111      	bne.n	800409a <_dtoa_r+0x8b2>
 8004076:	4629      	mov	r1, r5
 8004078:	464b      	mov	r3, r9
 800407a:	2205      	movs	r2, #5
 800407c:	4650      	mov	r0, sl
 800407e:	f000 f9c0 	bl	8004402 <__multadd>
 8004082:	4601      	mov	r1, r0
 8004084:	4605      	mov	r5, r0
 8004086:	9804      	ldr	r0, [sp, #16]
 8004088:	f000 fb7b 	bl	8004782 <__mcmp>
 800408c:	2800      	cmp	r0, #0
 800408e:	dc0c      	bgt.n	80040aa <_dtoa_r+0x8c2>
 8004090:	e003      	b.n	800409a <_dtoa_r+0x8b2>
 8004092:	4635      	mov	r5, r6
 8004094:	e000      	b.n	8004098 <_dtoa_r+0x8b0>
 8004096:	2500      	movs	r5, #0
 8004098:	462e      	mov	r6, r5
 800409a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800409c:	9c06      	ldr	r4, [sp, #24]
 800409e:	ea6f 0b03 	mvn.w	fp, r3
 80040a2:	e009      	b.n	80040b8 <_dtoa_r+0x8d0>
 80040a4:	4635      	mov	r5, r6
 80040a6:	f8dd b020 	ldr.w	fp, [sp, #32]
 80040aa:	9b06      	ldr	r3, [sp, #24]
 80040ac:	9a06      	ldr	r2, [sp, #24]
 80040ae:	1c5c      	adds	r4, r3, #1
 80040b0:	2331      	movs	r3, #49	; 0x31
 80040b2:	7013      	strb	r3, [r2, #0]
 80040b4:	f10b 0b01 	add.w	fp, fp, #1
 80040b8:	9605      	str	r6, [sp, #20]
 80040ba:	2600      	movs	r6, #0
 80040bc:	e0f7      	b.n	80042ae <_dtoa_r+0xac6>
 80040be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040c0:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80040c4:	b923      	cbnz	r3, 80040d0 <_dtoa_r+0x8e8>
 80040c6:	9c06      	ldr	r4, [sp, #24]
 80040c8:	e0b2      	b.n	8004230 <_dtoa_r+0xa48>
 80040ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	dccf      	bgt.n	8004070 <_dtoa_r+0x888>
 80040d0:	2c00      	cmp	r4, #0
 80040d2:	dd05      	ble.n	80040e0 <_dtoa_r+0x8f8>
 80040d4:	4631      	mov	r1, r6
 80040d6:	4622      	mov	r2, r4
 80040d8:	4650      	mov	r0, sl
 80040da:	f000 fb01 	bl	80046e0 <__lshift>
 80040de:	4606      	mov	r6, r0
 80040e0:	b19f      	cbz	r7, 800410a <_dtoa_r+0x922>
 80040e2:	6871      	ldr	r1, [r6, #4]
 80040e4:	4650      	mov	r0, sl
 80040e6:	f000 f940 	bl	800436a <_Balloc>
 80040ea:	4604      	mov	r4, r0
 80040ec:	6932      	ldr	r2, [r6, #16]
 80040ee:	f106 010c 	add.w	r1, r6, #12
 80040f2:	3202      	adds	r2, #2
 80040f4:	0092      	lsls	r2, r2, #2
 80040f6:	300c      	adds	r0, #12
 80040f8:	f7fe fd2e 	bl	8002b58 <memcpy>
 80040fc:	2201      	movs	r2, #1
 80040fe:	4621      	mov	r1, r4
 8004100:	4650      	mov	r0, sl
 8004102:	f000 faed 	bl	80046e0 <__lshift>
 8004106:	9005      	str	r0, [sp, #20]
 8004108:	e000      	b.n	800410c <_dtoa_r+0x924>
 800410a:	9605      	str	r6, [sp, #20]
 800410c:	9b02      	ldr	r3, [sp, #8]
 800410e:	9f06      	ldr	r7, [sp, #24]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	9307      	str	r3, [sp, #28]
 8004116:	4629      	mov	r1, r5
 8004118:	9804      	ldr	r0, [sp, #16]
 800411a:	f7ff fad9 	bl	80036d0 <quorem>
 800411e:	4631      	mov	r1, r6
 8004120:	4604      	mov	r4, r0
 8004122:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004126:	9804      	ldr	r0, [sp, #16]
 8004128:	f000 fb2b 	bl	8004782 <__mcmp>
 800412c:	9a05      	ldr	r2, [sp, #20]
 800412e:	9002      	str	r0, [sp, #8]
 8004130:	4629      	mov	r1, r5
 8004132:	4650      	mov	r0, sl
 8004134:	f000 fb41 	bl	80047ba <__mdiff>
 8004138:	68c3      	ldr	r3, [r0, #12]
 800413a:	4602      	mov	r2, r0
 800413c:	b93b      	cbnz	r3, 800414e <_dtoa_r+0x966>
 800413e:	4601      	mov	r1, r0
 8004140:	900a      	str	r0, [sp, #40]	; 0x28
 8004142:	9804      	ldr	r0, [sp, #16]
 8004144:	f000 fb1d 	bl	8004782 <__mcmp>
 8004148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800414a:	4603      	mov	r3, r0
 800414c:	e000      	b.n	8004150 <_dtoa_r+0x968>
 800414e:	2301      	movs	r3, #1
 8004150:	4611      	mov	r1, r2
 8004152:	4650      	mov	r0, sl
 8004154:	930a      	str	r3, [sp, #40]	; 0x28
 8004156:	f000 f93d 	bl	80043d4 <_Bfree>
 800415a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800415c:	b953      	cbnz	r3, 8004174 <_dtoa_r+0x98c>
 800415e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004160:	b942      	cbnz	r2, 8004174 <_dtoa_r+0x98c>
 8004162:	9a07      	ldr	r2, [sp, #28]
 8004164:	b932      	cbnz	r2, 8004174 <_dtoa_r+0x98c>
 8004166:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800416a:	d02a      	beq.n	80041c2 <_dtoa_r+0x9da>
 800416c:	9b02      	ldr	r3, [sp, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	dc1c      	bgt.n	80041ac <_dtoa_r+0x9c4>
 8004172:	e01d      	b.n	80041b0 <_dtoa_r+0x9c8>
 8004174:	9a02      	ldr	r2, [sp, #8]
 8004176:	2a00      	cmp	r2, #0
 8004178:	db04      	blt.n	8004184 <_dtoa_r+0x99c>
 800417a:	d11b      	bne.n	80041b4 <_dtoa_r+0x9cc>
 800417c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800417e:	b9ca      	cbnz	r2, 80041b4 <_dtoa_r+0x9cc>
 8004180:	9a07      	ldr	r2, [sp, #28]
 8004182:	b9ba      	cbnz	r2, 80041b4 <_dtoa_r+0x9cc>
 8004184:	2b00      	cmp	r3, #0
 8004186:	dd13      	ble.n	80041b0 <_dtoa_r+0x9c8>
 8004188:	2201      	movs	r2, #1
 800418a:	9904      	ldr	r1, [sp, #16]
 800418c:	4650      	mov	r0, sl
 800418e:	f000 faa7 	bl	80046e0 <__lshift>
 8004192:	4629      	mov	r1, r5
 8004194:	9004      	str	r0, [sp, #16]
 8004196:	f000 faf4 	bl	8004782 <__mcmp>
 800419a:	2800      	cmp	r0, #0
 800419c:	dc03      	bgt.n	80041a6 <_dtoa_r+0x9be>
 800419e:	d107      	bne.n	80041b0 <_dtoa_r+0x9c8>
 80041a0:	f018 0f01 	tst.w	r8, #1
 80041a4:	d004      	beq.n	80041b0 <_dtoa_r+0x9c8>
 80041a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80041aa:	d00a      	beq.n	80041c2 <_dtoa_r+0x9da>
 80041ac:	f104 0831 	add.w	r8, r4, #49	; 0x31
 80041b0:	1c7c      	adds	r4, r7, #1
 80041b2:	e00c      	b.n	80041ce <_dtoa_r+0x9e6>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f107 0401 	add.w	r4, r7, #1
 80041ba:	dd0b      	ble.n	80041d4 <_dtoa_r+0x9ec>
 80041bc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80041c0:	d103      	bne.n	80041ca <_dtoa_r+0x9e2>
 80041c2:	2339      	movs	r3, #57	; 0x39
 80041c4:	703b      	strb	r3, [r7, #0]
 80041c6:	3701      	adds	r7, #1
 80041c8:	e056      	b.n	8004278 <_dtoa_r+0xa90>
 80041ca:	f108 0801 	add.w	r8, r8, #1
 80041ce:	f887 8000 	strb.w	r8, [r7]
 80041d2:	e06c      	b.n	80042ae <_dtoa_r+0xac6>
 80041d4:	9b06      	ldr	r3, [sp, #24]
 80041d6:	4627      	mov	r7, r4
 80041d8:	1ae3      	subs	r3, r4, r3
 80041da:	454b      	cmp	r3, r9
 80041dc:	f804 8c01 	strb.w	r8, [r4, #-1]
 80041e0:	d03b      	beq.n	800425a <_dtoa_r+0xa72>
 80041e2:	2300      	movs	r3, #0
 80041e4:	220a      	movs	r2, #10
 80041e6:	9904      	ldr	r1, [sp, #16]
 80041e8:	4650      	mov	r0, sl
 80041ea:	f000 f90a 	bl	8004402 <__multadd>
 80041ee:	9b05      	ldr	r3, [sp, #20]
 80041f0:	9004      	str	r0, [sp, #16]
 80041f2:	429e      	cmp	r6, r3
 80041f4:	f04f 020a 	mov.w	r2, #10
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	4631      	mov	r1, r6
 80041fe:	4650      	mov	r0, sl
 8004200:	d104      	bne.n	800420c <_dtoa_r+0xa24>
 8004202:	f000 f8fe 	bl	8004402 <__multadd>
 8004206:	4606      	mov	r6, r0
 8004208:	9005      	str	r0, [sp, #20]
 800420a:	e784      	b.n	8004116 <_dtoa_r+0x92e>
 800420c:	f000 f8f9 	bl	8004402 <__multadd>
 8004210:	2300      	movs	r3, #0
 8004212:	4606      	mov	r6, r0
 8004214:	220a      	movs	r2, #10
 8004216:	9905      	ldr	r1, [sp, #20]
 8004218:	4650      	mov	r0, sl
 800421a:	f000 f8f2 	bl	8004402 <__multadd>
 800421e:	9005      	str	r0, [sp, #20]
 8004220:	e779      	b.n	8004116 <_dtoa_r+0x92e>
 8004222:	2300      	movs	r3, #0
 8004224:	220a      	movs	r2, #10
 8004226:	9904      	ldr	r1, [sp, #16]
 8004228:	4650      	mov	r0, sl
 800422a:	f000 f8ea 	bl	8004402 <__multadd>
 800422e:	9004      	str	r0, [sp, #16]
 8004230:	4629      	mov	r1, r5
 8004232:	9804      	ldr	r0, [sp, #16]
 8004234:	f7ff fa4c 	bl	80036d0 <quorem>
 8004238:	9b06      	ldr	r3, [sp, #24]
 800423a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800423e:	f804 8b01 	strb.w	r8, [r4], #1
 8004242:	1ae3      	subs	r3, r4, r3
 8004244:	454b      	cmp	r3, r9
 8004246:	dbec      	blt.n	8004222 <_dtoa_r+0xa3a>
 8004248:	9b06      	ldr	r3, [sp, #24]
 800424a:	9605      	str	r6, [sp, #20]
 800424c:	f1b9 0f01 	cmp.w	r9, #1
 8004250:	bfac      	ite	ge
 8004252:	444b      	addge	r3, r9
 8004254:	3301      	addlt	r3, #1
 8004256:	461f      	mov	r7, r3
 8004258:	2600      	movs	r6, #0
 800425a:	2201      	movs	r2, #1
 800425c:	9904      	ldr	r1, [sp, #16]
 800425e:	4650      	mov	r0, sl
 8004260:	f000 fa3e 	bl	80046e0 <__lshift>
 8004264:	4629      	mov	r1, r5
 8004266:	9004      	str	r0, [sp, #16]
 8004268:	f000 fa8b 	bl	8004782 <__mcmp>
 800426c:	2800      	cmp	r0, #0
 800426e:	dc03      	bgt.n	8004278 <_dtoa_r+0xa90>
 8004270:	d115      	bne.n	800429e <_dtoa_r+0xab6>
 8004272:	f018 0f01 	tst.w	r8, #1
 8004276:	d012      	beq.n	800429e <_dtoa_r+0xab6>
 8004278:	463c      	mov	r4, r7
 800427a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800427e:	1e62      	subs	r2, r4, #1
 8004280:	2b39      	cmp	r3, #57	; 0x39
 8004282:	d109      	bne.n	8004298 <_dtoa_r+0xab0>
 8004284:	9b06      	ldr	r3, [sp, #24]
 8004286:	4293      	cmp	r3, r2
 8004288:	d104      	bne.n	8004294 <_dtoa_r+0xaac>
 800428a:	f10b 0b01 	add.w	fp, fp, #1
 800428e:	2331      	movs	r3, #49	; 0x31
 8004290:	9a06      	ldr	r2, [sp, #24]
 8004292:	e002      	b.n	800429a <_dtoa_r+0xab2>
 8004294:	4614      	mov	r4, r2
 8004296:	e7f0      	b.n	800427a <_dtoa_r+0xa92>
 8004298:	3301      	adds	r3, #1
 800429a:	7013      	strb	r3, [r2, #0]
 800429c:	e007      	b.n	80042ae <_dtoa_r+0xac6>
 800429e:	463c      	mov	r4, r7
 80042a0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80042a4:	1e62      	subs	r2, r4, #1
 80042a6:	2b30      	cmp	r3, #48	; 0x30
 80042a8:	d101      	bne.n	80042ae <_dtoa_r+0xac6>
 80042aa:	4614      	mov	r4, r2
 80042ac:	e7f8      	b.n	80042a0 <_dtoa_r+0xab8>
 80042ae:	4629      	mov	r1, r5
 80042b0:	4650      	mov	r0, sl
 80042b2:	f000 f88f 	bl	80043d4 <_Bfree>
 80042b6:	9b05      	ldr	r3, [sp, #20]
 80042b8:	b16b      	cbz	r3, 80042d6 <_dtoa_r+0xaee>
 80042ba:	b12e      	cbz	r6, 80042c8 <_dtoa_r+0xae0>
 80042bc:	429e      	cmp	r6, r3
 80042be:	d003      	beq.n	80042c8 <_dtoa_r+0xae0>
 80042c0:	4631      	mov	r1, r6
 80042c2:	4650      	mov	r0, sl
 80042c4:	f000 f886 	bl	80043d4 <_Bfree>
 80042c8:	9905      	ldr	r1, [sp, #20]
 80042ca:	4650      	mov	r0, sl
 80042cc:	f000 f882 	bl	80043d4 <_Bfree>
 80042d0:	e001      	b.n	80042d6 <_dtoa_r+0xaee>
 80042d2:	f8dd b020 	ldr.w	fp, [sp, #32]
 80042d6:	9904      	ldr	r1, [sp, #16]
 80042d8:	4650      	mov	r0, sl
 80042da:	f000 f87b 	bl	80043d4 <_Bfree>
 80042de:	2300      	movs	r3, #0
 80042e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042e2:	7023      	strb	r3, [r4, #0]
 80042e4:	f10b 0301 	add.w	r3, fp, #1
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042ec:	b11b      	cbz	r3, 80042f6 <_dtoa_r+0xb0e>
 80042ee:	601c      	str	r4, [r3, #0]
 80042f0:	e001      	b.n	80042f6 <_dtoa_r+0xb0e>
 80042f2:	4808      	ldr	r0, [pc, #32]	; (8004314 <_dtoa_r+0xb2c>)
 80042f4:	e00a      	b.n	800430c <_dtoa_r+0xb24>
 80042f6:	9806      	ldr	r0, [sp, #24]
 80042f8:	e008      	b.n	800430c <_dtoa_r+0xb24>
 80042fa:	f1b9 0f00 	cmp.w	r9, #0
 80042fe:	f73f aee2 	bgt.w	80040c6 <_dtoa_r+0x8de>
 8004302:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004304:	2b02      	cmp	r3, #2
 8004306:	f77f aede 	ble.w	80040c6 <_dtoa_r+0x8de>
 800430a:	e6b1      	b.n	8004070 <_dtoa_r+0x888>
 800430c:	b015      	add	sp, #84	; 0x54
 800430e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004312:	bf00      	nop
 8004314:	08004f62 	.word	0x08004f62

08004318 <_localeconv_r>:
 8004318:	4800      	ldr	r0, [pc, #0]	; (800431c <_localeconv_r+0x4>)
 800431a:	4770      	bx	lr
 800431c:	200000a4 	.word	0x200000a4

08004320 <malloc>:
 8004320:	4b02      	ldr	r3, [pc, #8]	; (800432c <malloc+0xc>)
 8004322:	4601      	mov	r1, r0
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	f000 bb4f 	b.w	80049c8 <_malloc_r>
 800432a:	bf00      	nop
 800432c:	200000a0 	.word	0x200000a0

08004330 <memchr>:
 8004330:	b510      	push	{r4, lr}
 8004332:	b2c9      	uxtb	r1, r1
 8004334:	4402      	add	r2, r0
 8004336:	4290      	cmp	r0, r2
 8004338:	4603      	mov	r3, r0
 800433a:	d005      	beq.n	8004348 <memchr+0x18>
 800433c:	781c      	ldrb	r4, [r3, #0]
 800433e:	3001      	adds	r0, #1
 8004340:	428c      	cmp	r4, r1
 8004342:	d1f8      	bne.n	8004336 <memchr+0x6>
 8004344:	4618      	mov	r0, r3
 8004346:	bd10      	pop	{r4, pc}
 8004348:	2000      	movs	r0, #0
 800434a:	bd10      	pop	{r4, pc}

0800434c <memcmp>:
 800434c:	b510      	push	{r4, lr}
 800434e:	3901      	subs	r1, #1
 8004350:	4402      	add	r2, r0
 8004352:	4290      	cmp	r0, r2
 8004354:	d007      	beq.n	8004366 <memcmp+0x1a>
 8004356:	f810 3b01 	ldrb.w	r3, [r0], #1
 800435a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800435e:	42a3      	cmp	r3, r4
 8004360:	d0f7      	beq.n	8004352 <memcmp+0x6>
 8004362:	1b18      	subs	r0, r3, r4
 8004364:	bd10      	pop	{r4, pc}
 8004366:	2000      	movs	r0, #0
 8004368:	bd10      	pop	{r4, pc}

0800436a <_Balloc>:
 800436a:	b570      	push	{r4, r5, r6, lr}
 800436c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800436e:	4604      	mov	r4, r0
 8004370:	460e      	mov	r6, r1
 8004372:	b93d      	cbnz	r5, 8004384 <_Balloc+0x1a>
 8004374:	2010      	movs	r0, #16
 8004376:	f7ff ffd3 	bl	8004320 <malloc>
 800437a:	6260      	str	r0, [r4, #36]	; 0x24
 800437c:	6045      	str	r5, [r0, #4]
 800437e:	6085      	str	r5, [r0, #8]
 8004380:	6005      	str	r5, [r0, #0]
 8004382:	60c5      	str	r5, [r0, #12]
 8004384:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004386:	68eb      	ldr	r3, [r5, #12]
 8004388:	b143      	cbz	r3, 800439c <_Balloc+0x32>
 800438a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004392:	b178      	cbz	r0, 80043b4 <_Balloc+0x4a>
 8004394:	6802      	ldr	r2, [r0, #0]
 8004396:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800439a:	e017      	b.n	80043cc <_Balloc+0x62>
 800439c:	2221      	movs	r2, #33	; 0x21
 800439e:	2104      	movs	r1, #4
 80043a0:	4620      	mov	r0, r4
 80043a2:	f000 fab7 	bl	8004914 <_calloc_r>
 80043a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043a8:	60e8      	str	r0, [r5, #12]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ec      	bne.n	800438a <_Balloc+0x20>
 80043b0:	2000      	movs	r0, #0
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	2101      	movs	r1, #1
 80043b6:	fa01 f506 	lsl.w	r5, r1, r6
 80043ba:	1d6a      	adds	r2, r5, #5
 80043bc:	0092      	lsls	r2, r2, #2
 80043be:	4620      	mov	r0, r4
 80043c0:	f000 faa8 	bl	8004914 <_calloc_r>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d0f3      	beq.n	80043b0 <_Balloc+0x46>
 80043c8:	6046      	str	r6, [r0, #4]
 80043ca:	6085      	str	r5, [r0, #8]
 80043cc:	2300      	movs	r3, #0
 80043ce:	6103      	str	r3, [r0, #16]
 80043d0:	60c3      	str	r3, [r0, #12]
 80043d2:	bd70      	pop	{r4, r5, r6, pc}

080043d4 <_Bfree>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80043d8:	4606      	mov	r6, r0
 80043da:	460d      	mov	r5, r1
 80043dc:	b93c      	cbnz	r4, 80043ee <_Bfree+0x1a>
 80043de:	2010      	movs	r0, #16
 80043e0:	f7ff ff9e 	bl	8004320 <malloc>
 80043e4:	6270      	str	r0, [r6, #36]	; 0x24
 80043e6:	6044      	str	r4, [r0, #4]
 80043e8:	6084      	str	r4, [r0, #8]
 80043ea:	6004      	str	r4, [r0, #0]
 80043ec:	60c4      	str	r4, [r0, #12]
 80043ee:	b13d      	cbz	r5, 8004400 <_Bfree+0x2c>
 80043f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80043f2:	686a      	ldr	r2, [r5, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043fa:	6029      	str	r1, [r5, #0]
 80043fc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004400:	bd70      	pop	{r4, r5, r6, pc}

08004402 <__multadd>:
 8004402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004406:	4606      	mov	r6, r0
 8004408:	460c      	mov	r4, r1
 800440a:	690d      	ldr	r5, [r1, #16]
 800440c:	461f      	mov	r7, r3
 800440e:	f101 0e14 	add.w	lr, r1, #20
 8004412:	2300      	movs	r3, #0
 8004414:	f8de 0000 	ldr.w	r0, [lr]
 8004418:	3301      	adds	r3, #1
 800441a:	b281      	uxth	r1, r0
 800441c:	fb02 7101 	mla	r1, r2, r1, r7
 8004420:	0c00      	lsrs	r0, r0, #16
 8004422:	0c0f      	lsrs	r7, r1, #16
 8004424:	fb02 7000 	mla	r0, r2, r0, r7
 8004428:	b289      	uxth	r1, r1
 800442a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800442e:	429d      	cmp	r5, r3
 8004430:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004434:	f84e 1b04 	str.w	r1, [lr], #4
 8004438:	dcec      	bgt.n	8004414 <__multadd+0x12>
 800443a:	b1d7      	cbz	r7, 8004472 <__multadd+0x70>
 800443c:	68a3      	ldr	r3, [r4, #8]
 800443e:	429d      	cmp	r5, r3
 8004440:	db12      	blt.n	8004468 <__multadd+0x66>
 8004442:	6861      	ldr	r1, [r4, #4]
 8004444:	4630      	mov	r0, r6
 8004446:	3101      	adds	r1, #1
 8004448:	f7ff ff8f 	bl	800436a <_Balloc>
 800444c:	4680      	mov	r8, r0
 800444e:	6922      	ldr	r2, [r4, #16]
 8004450:	f104 010c 	add.w	r1, r4, #12
 8004454:	3202      	adds	r2, #2
 8004456:	0092      	lsls	r2, r2, #2
 8004458:	300c      	adds	r0, #12
 800445a:	f7fe fb7d 	bl	8002b58 <memcpy>
 800445e:	4621      	mov	r1, r4
 8004460:	4630      	mov	r0, r6
 8004462:	f7ff ffb7 	bl	80043d4 <_Bfree>
 8004466:	4644      	mov	r4, r8
 8004468:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800446c:	3501      	adds	r5, #1
 800446e:	615f      	str	r7, [r3, #20]
 8004470:	6125      	str	r5, [r4, #16]
 8004472:	4620      	mov	r0, r4
 8004474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004478 <__hi0bits>:
 8004478:	0c03      	lsrs	r3, r0, #16
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	b913      	cbnz	r3, 8004484 <__hi0bits+0xc>
 800447e:	0400      	lsls	r0, r0, #16
 8004480:	2310      	movs	r3, #16
 8004482:	e000      	b.n	8004486 <__hi0bits+0xe>
 8004484:	2300      	movs	r3, #0
 8004486:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800448a:	bf04      	itt	eq
 800448c:	0200      	lsleq	r0, r0, #8
 800448e:	3308      	addeq	r3, #8
 8004490:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004494:	bf04      	itt	eq
 8004496:	0100      	lsleq	r0, r0, #4
 8004498:	3304      	addeq	r3, #4
 800449a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800449e:	bf04      	itt	eq
 80044a0:	0080      	lsleq	r0, r0, #2
 80044a2:	3302      	addeq	r3, #2
 80044a4:	2800      	cmp	r0, #0
 80044a6:	db03      	blt.n	80044b0 <__hi0bits+0x38>
 80044a8:	0042      	lsls	r2, r0, #1
 80044aa:	d503      	bpl.n	80044b4 <__hi0bits+0x3c>
 80044ac:	1c58      	adds	r0, r3, #1
 80044ae:	4770      	bx	lr
 80044b0:	4618      	mov	r0, r3
 80044b2:	4770      	bx	lr
 80044b4:	2020      	movs	r0, #32
 80044b6:	4770      	bx	lr

080044b8 <__lo0bits>:
 80044b8:	6803      	ldr	r3, [r0, #0]
 80044ba:	f013 0207 	ands.w	r2, r3, #7
 80044be:	d00b      	beq.n	80044d8 <__lo0bits+0x20>
 80044c0:	07d9      	lsls	r1, r3, #31
 80044c2:	d422      	bmi.n	800450a <__lo0bits+0x52>
 80044c4:	079a      	lsls	r2, r3, #30
 80044c6:	bf4b      	itete	mi
 80044c8:	085b      	lsrmi	r3, r3, #1
 80044ca:	089b      	lsrpl	r3, r3, #2
 80044cc:	6003      	strmi	r3, [r0, #0]
 80044ce:	6003      	strpl	r3, [r0, #0]
 80044d0:	bf4c      	ite	mi
 80044d2:	2001      	movmi	r0, #1
 80044d4:	2002      	movpl	r0, #2
 80044d6:	4770      	bx	lr
 80044d8:	b299      	uxth	r1, r3
 80044da:	b909      	cbnz	r1, 80044e0 <__lo0bits+0x28>
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	2210      	movs	r2, #16
 80044e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80044e4:	bf04      	itt	eq
 80044e6:	0a1b      	lsreq	r3, r3, #8
 80044e8:	3208      	addeq	r2, #8
 80044ea:	0719      	lsls	r1, r3, #28
 80044ec:	bf04      	itt	eq
 80044ee:	091b      	lsreq	r3, r3, #4
 80044f0:	3204      	addeq	r2, #4
 80044f2:	0799      	lsls	r1, r3, #30
 80044f4:	bf04      	itt	eq
 80044f6:	089b      	lsreq	r3, r3, #2
 80044f8:	3202      	addeq	r2, #2
 80044fa:	07d9      	lsls	r1, r3, #31
 80044fc:	d402      	bmi.n	8004504 <__lo0bits+0x4c>
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	d005      	beq.n	800450e <__lo0bits+0x56>
 8004502:	3201      	adds	r2, #1
 8004504:	6003      	str	r3, [r0, #0]
 8004506:	4610      	mov	r0, r2
 8004508:	4770      	bx	lr
 800450a:	2000      	movs	r0, #0
 800450c:	4770      	bx	lr
 800450e:	2020      	movs	r0, #32
 8004510:	4770      	bx	lr

08004512 <__i2b>:
 8004512:	b510      	push	{r4, lr}
 8004514:	460c      	mov	r4, r1
 8004516:	2101      	movs	r1, #1
 8004518:	f7ff ff27 	bl	800436a <_Balloc>
 800451c:	2201      	movs	r2, #1
 800451e:	6144      	str	r4, [r0, #20]
 8004520:	6102      	str	r2, [r0, #16]
 8004522:	bd10      	pop	{r4, pc}

08004524 <__multiply>:
 8004524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004528:	4614      	mov	r4, r2
 800452a:	690a      	ldr	r2, [r1, #16]
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	4688      	mov	r8, r1
 8004530:	429a      	cmp	r2, r3
 8004532:	bfbe      	ittt	lt
 8004534:	460b      	movlt	r3, r1
 8004536:	46a0      	movlt	r8, r4
 8004538:	461c      	movlt	r4, r3
 800453a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800453e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004542:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004546:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800454a:	eb07 0609 	add.w	r6, r7, r9
 800454e:	429e      	cmp	r6, r3
 8004550:	bfc8      	it	gt
 8004552:	3101      	addgt	r1, #1
 8004554:	f7ff ff09 	bl	800436a <_Balloc>
 8004558:	f100 0514 	add.w	r5, r0, #20
 800455c:	462b      	mov	r3, r5
 800455e:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8004562:	2200      	movs	r2, #0
 8004564:	4563      	cmp	r3, ip
 8004566:	d202      	bcs.n	800456e <__multiply+0x4a>
 8004568:	f843 2b04 	str.w	r2, [r3], #4
 800456c:	e7fa      	b.n	8004564 <__multiply+0x40>
 800456e:	f104 0214 	add.w	r2, r4, #20
 8004572:	f108 0114 	add.w	r1, r8, #20
 8004576:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800457a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	9b00      	ldr	r3, [sp, #0]
 8004582:	9201      	str	r2, [sp, #4]
 8004584:	4293      	cmp	r3, r2
 8004586:	d957      	bls.n	8004638 <__multiply+0x114>
 8004588:	f8b2 b000 	ldrh.w	fp, [r2]
 800458c:	f1bb 0f00 	cmp.w	fp, #0
 8004590:	d023      	beq.n	80045da <__multiply+0xb6>
 8004592:	4689      	mov	r9, r1
 8004594:	46ae      	mov	lr, r5
 8004596:	f04f 0800 	mov.w	r8, #0
 800459a:	f859 4b04 	ldr.w	r4, [r9], #4
 800459e:	f8be a000 	ldrh.w	sl, [lr]
 80045a2:	b2a3      	uxth	r3, r4
 80045a4:	fb0b a303 	mla	r3, fp, r3, sl
 80045a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80045ac:	f8de 4000 	ldr.w	r4, [lr]
 80045b0:	4443      	add	r3, r8
 80045b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80045b6:	fb0b 840a 	mla	r4, fp, sl, r8
 80045ba:	46f2      	mov	sl, lr
 80045bc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80045c6:	454f      	cmp	r7, r9
 80045c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80045cc:	f84a 3b04 	str.w	r3, [sl], #4
 80045d0:	d901      	bls.n	80045d6 <__multiply+0xb2>
 80045d2:	46d6      	mov	lr, sl
 80045d4:	e7e1      	b.n	800459a <__multiply+0x76>
 80045d6:	f8ce 8004 	str.w	r8, [lr, #4]
 80045da:	9b01      	ldr	r3, [sp, #4]
 80045dc:	3204      	adds	r2, #4
 80045de:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80045e2:	f1ba 0f00 	cmp.w	sl, #0
 80045e6:	d021      	beq.n	800462c <__multiply+0x108>
 80045e8:	462c      	mov	r4, r5
 80045ea:	4689      	mov	r9, r1
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	f04f 0800 	mov.w	r8, #0
 80045f2:	f8b9 e000 	ldrh.w	lr, [r9]
 80045f6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	fb0a be0e 	mla	lr, sl, lr, fp
 8004600:	46a3      	mov	fp, r4
 8004602:	44f0      	add	r8, lr
 8004604:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004608:	f84b 3b04 	str.w	r3, [fp], #4
 800460c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004610:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8004614:	0c1b      	lsrs	r3, r3, #16
 8004616:	fb0a e303 	mla	r3, sl, r3, lr
 800461a:	454f      	cmp	r7, r9
 800461c:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8004620:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8004624:	d901      	bls.n	800462a <__multiply+0x106>
 8004626:	465c      	mov	r4, fp
 8004628:	e7e3      	b.n	80045f2 <__multiply+0xce>
 800462a:	6063      	str	r3, [r4, #4]
 800462c:	3504      	adds	r5, #4
 800462e:	e7a7      	b.n	8004580 <__multiply+0x5c>
 8004630:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8004634:	b913      	cbnz	r3, 800463c <__multiply+0x118>
 8004636:	3e01      	subs	r6, #1
 8004638:	2e00      	cmp	r6, #0
 800463a:	dcf9      	bgt.n	8004630 <__multiply+0x10c>
 800463c:	6106      	str	r6, [r0, #16]
 800463e:	b003      	add	sp, #12
 8004640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004644 <__pow5mult>:
 8004644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004648:	4615      	mov	r5, r2
 800464a:	f012 0203 	ands.w	r2, r2, #3
 800464e:	4606      	mov	r6, r0
 8004650:	460f      	mov	r7, r1
 8004652:	d007      	beq.n	8004664 <__pow5mult+0x20>
 8004654:	4c21      	ldr	r4, [pc, #132]	; (80046dc <__pow5mult+0x98>)
 8004656:	3a01      	subs	r2, #1
 8004658:	2300      	movs	r3, #0
 800465a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800465e:	f7ff fed0 	bl	8004402 <__multadd>
 8004662:	4607      	mov	r7, r0
 8004664:	10ad      	asrs	r5, r5, #2
 8004666:	d036      	beq.n	80046d6 <__pow5mult+0x92>
 8004668:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800466a:	b93c      	cbnz	r4, 800467c <__pow5mult+0x38>
 800466c:	2010      	movs	r0, #16
 800466e:	f7ff fe57 	bl	8004320 <malloc>
 8004672:	6270      	str	r0, [r6, #36]	; 0x24
 8004674:	6044      	str	r4, [r0, #4]
 8004676:	6084      	str	r4, [r0, #8]
 8004678:	6004      	str	r4, [r0, #0]
 800467a:	60c4      	str	r4, [r0, #12]
 800467c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004684:	b94c      	cbnz	r4, 800469a <__pow5mult+0x56>
 8004686:	f240 2171 	movw	r1, #625	; 0x271
 800468a:	4630      	mov	r0, r6
 800468c:	f7ff ff41 	bl	8004512 <__i2b>
 8004690:	4604      	mov	r4, r0
 8004692:	2300      	movs	r3, #0
 8004694:	f8c8 0008 	str.w	r0, [r8, #8]
 8004698:	6003      	str	r3, [r0, #0]
 800469a:	f04f 0800 	mov.w	r8, #0
 800469e:	07eb      	lsls	r3, r5, #31
 80046a0:	d50a      	bpl.n	80046b8 <__pow5mult+0x74>
 80046a2:	4639      	mov	r1, r7
 80046a4:	4622      	mov	r2, r4
 80046a6:	4630      	mov	r0, r6
 80046a8:	f7ff ff3c 	bl	8004524 <__multiply>
 80046ac:	4681      	mov	r9, r0
 80046ae:	4639      	mov	r1, r7
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7ff fe8f 	bl	80043d4 <_Bfree>
 80046b6:	464f      	mov	r7, r9
 80046b8:	106d      	asrs	r5, r5, #1
 80046ba:	d00c      	beq.n	80046d6 <__pow5mult+0x92>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	b108      	cbz	r0, 80046c4 <__pow5mult+0x80>
 80046c0:	4604      	mov	r4, r0
 80046c2:	e7ec      	b.n	800469e <__pow5mult+0x5a>
 80046c4:	4622      	mov	r2, r4
 80046c6:	4621      	mov	r1, r4
 80046c8:	4630      	mov	r0, r6
 80046ca:	f7ff ff2b 	bl	8004524 <__multiply>
 80046ce:	6020      	str	r0, [r4, #0]
 80046d0:	f8c0 8000 	str.w	r8, [r0]
 80046d4:	e7f4      	b.n	80046c0 <__pow5mult+0x7c>
 80046d6:	4638      	mov	r0, r7
 80046d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046dc:	08005190 	.word	0x08005190

080046e0 <__lshift>:
 80046e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	460c      	mov	r4, r1
 80046e6:	4607      	mov	r7, r0
 80046e8:	4691      	mov	r9, r2
 80046ea:	6926      	ldr	r6, [r4, #16]
 80046ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80046f0:	4456      	add	r6, sl
 80046f2:	6849      	ldr	r1, [r1, #4]
 80046f4:	68a3      	ldr	r3, [r4, #8]
 80046f6:	1c75      	adds	r5, r6, #1
 80046f8:	42ab      	cmp	r3, r5
 80046fa:	da02      	bge.n	8004702 <__lshift+0x22>
 80046fc:	3101      	adds	r1, #1
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	e7fa      	b.n	80046f8 <__lshift+0x18>
 8004702:	4638      	mov	r0, r7
 8004704:	f7ff fe31 	bl	800436a <_Balloc>
 8004708:	2300      	movs	r3, #0
 800470a:	4680      	mov	r8, r0
 800470c:	461a      	mov	r2, r3
 800470e:	f100 0114 	add.w	r1, r0, #20
 8004712:	4553      	cmp	r3, sl
 8004714:	da03      	bge.n	800471e <__lshift+0x3e>
 8004716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800471a:	3301      	adds	r3, #1
 800471c:	e7f9      	b.n	8004712 <__lshift+0x32>
 800471e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8004722:	6920      	ldr	r0, [r4, #16]
 8004724:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004728:	f019 091f 	ands.w	r9, r9, #31
 800472c:	f104 0114 	add.w	r1, r4, #20
 8004730:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004734:	d014      	beq.n	8004760 <__lshift+0x80>
 8004736:	f1c9 0c20 	rsb	ip, r9, #32
 800473a:	2200      	movs	r2, #0
 800473c:	6808      	ldr	r0, [r1, #0]
 800473e:	469a      	mov	sl, r3
 8004740:	fa00 f009 	lsl.w	r0, r0, r9
 8004744:	4302      	orrs	r2, r0
 8004746:	f843 2b04 	str.w	r2, [r3], #4
 800474a:	f851 2b04 	ldr.w	r2, [r1], #4
 800474e:	458e      	cmp	lr, r1
 8004750:	fa22 f20c 	lsr.w	r2, r2, ip
 8004754:	d8f2      	bhi.n	800473c <__lshift+0x5c>
 8004756:	f8ca 2004 	str.w	r2, [sl, #4]
 800475a:	b142      	cbz	r2, 800476e <__lshift+0x8e>
 800475c:	1cb5      	adds	r5, r6, #2
 800475e:	e006      	b.n	800476e <__lshift+0x8e>
 8004760:	3b04      	subs	r3, #4
 8004762:	f851 2b04 	ldr.w	r2, [r1], #4
 8004766:	458e      	cmp	lr, r1
 8004768:	f843 2f04 	str.w	r2, [r3, #4]!
 800476c:	d8f9      	bhi.n	8004762 <__lshift+0x82>
 800476e:	3d01      	subs	r5, #1
 8004770:	4638      	mov	r0, r7
 8004772:	f8c8 5010 	str.w	r5, [r8, #16]
 8004776:	4621      	mov	r1, r4
 8004778:	f7ff fe2c 	bl	80043d4 <_Bfree>
 800477c:	4640      	mov	r0, r8
 800477e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004782 <__mcmp>:
 8004782:	6903      	ldr	r3, [r0, #16]
 8004784:	690a      	ldr	r2, [r1, #16]
 8004786:	b510      	push	{r4, lr}
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	d111      	bne.n	80047b0 <__mcmp+0x2e>
 800478c:	0092      	lsls	r2, r2, #2
 800478e:	3014      	adds	r0, #20
 8004790:	3114      	adds	r1, #20
 8004792:	1883      	adds	r3, r0, r2
 8004794:	440a      	add	r2, r1
 8004796:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800479a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800479e:	428c      	cmp	r4, r1
 80047a0:	d002      	beq.n	80047a8 <__mcmp+0x26>
 80047a2:	d307      	bcc.n	80047b4 <__mcmp+0x32>
 80047a4:	2001      	movs	r0, #1
 80047a6:	bd10      	pop	{r4, pc}
 80047a8:	4298      	cmp	r0, r3
 80047aa:	d3f4      	bcc.n	8004796 <__mcmp+0x14>
 80047ac:	2000      	movs	r0, #0
 80047ae:	bd10      	pop	{r4, pc}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd10      	pop	{r4, pc}
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	bd10      	pop	{r4, pc}

080047ba <__mdiff>:
 80047ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047be:	460c      	mov	r4, r1
 80047c0:	4607      	mov	r7, r0
 80047c2:	4611      	mov	r1, r2
 80047c4:	4620      	mov	r0, r4
 80047c6:	4615      	mov	r5, r2
 80047c8:	f7ff ffdb 	bl	8004782 <__mcmp>
 80047cc:	1e06      	subs	r6, r0, #0
 80047ce:	d108      	bne.n	80047e2 <__mdiff+0x28>
 80047d0:	4631      	mov	r1, r6
 80047d2:	4638      	mov	r0, r7
 80047d4:	f7ff fdc9 	bl	800436a <_Balloc>
 80047d8:	2301      	movs	r3, #1
 80047da:	6103      	str	r3, [r0, #16]
 80047dc:	6146      	str	r6, [r0, #20]
 80047de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e2:	bfbc      	itt	lt
 80047e4:	4623      	movlt	r3, r4
 80047e6:	462c      	movlt	r4, r5
 80047e8:	4638      	mov	r0, r7
 80047ea:	6861      	ldr	r1, [r4, #4]
 80047ec:	bfba      	itte	lt
 80047ee:	461d      	movlt	r5, r3
 80047f0:	2601      	movlt	r6, #1
 80047f2:	2600      	movge	r6, #0
 80047f4:	f7ff fdb9 	bl	800436a <_Balloc>
 80047f8:	692b      	ldr	r3, [r5, #16]
 80047fa:	60c6      	str	r6, [r0, #12]
 80047fc:	6926      	ldr	r6, [r4, #16]
 80047fe:	f105 0914 	add.w	r9, r5, #20
 8004802:	f104 0114 	add.w	r1, r4, #20
 8004806:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 800480a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800480e:	f100 0514 	add.w	r5, r0, #20
 8004812:	f04f 0c00 	mov.w	ip, #0
 8004816:	f851 2b04 	ldr.w	r2, [r1], #4
 800481a:	f859 4b04 	ldr.w	r4, [r9], #4
 800481e:	b293      	uxth	r3, r2
 8004820:	449c      	add	ip, r3
 8004822:	b2a3      	uxth	r3, r4
 8004824:	0c24      	lsrs	r4, r4, #16
 8004826:	ebc3 030c 	rsb	r3, r3, ip
 800482a:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 800482e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004832:	b29b      	uxth	r3, r3
 8004834:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004838:	45c8      	cmp	r8, r9
 800483a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800483e:	468e      	mov	lr, r1
 8004840:	f845 2b04 	str.w	r2, [r5], #4
 8004844:	d8e7      	bhi.n	8004816 <__mdiff+0x5c>
 8004846:	45be      	cmp	lr, r7
 8004848:	d20e      	bcs.n	8004868 <__mdiff+0xae>
 800484a:	f85e 1b04 	ldr.w	r1, [lr], #4
 800484e:	b28a      	uxth	r2, r1
 8004850:	4462      	add	r2, ip
 8004852:	1413      	asrs	r3, r2, #16
 8004854:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8004858:	b292      	uxth	r2, r2
 800485a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800485e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004862:	f845 2b04 	str.w	r2, [r5], #4
 8004866:	e7ee      	b.n	8004846 <__mdiff+0x8c>
 8004868:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800486c:	b90b      	cbnz	r3, 8004872 <__mdiff+0xb8>
 800486e:	3e01      	subs	r6, #1
 8004870:	e7fa      	b.n	8004868 <__mdiff+0xae>
 8004872:	6106      	str	r6, [r0, #16]
 8004874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004878 <__d2b>:
 8004878:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800487c:	461c      	mov	r4, r3
 800487e:	2101      	movs	r1, #1
 8004880:	4690      	mov	r8, r2
 8004882:	9e08      	ldr	r6, [sp, #32]
 8004884:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004886:	f7ff fd70 	bl	800436a <_Balloc>
 800488a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800488e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004892:	4607      	mov	r7, r0
 8004894:	b10c      	cbz	r4, 800489a <__d2b+0x22>
 8004896:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800489a:	9201      	str	r2, [sp, #4]
 800489c:	f1b8 0f00 	cmp.w	r8, #0
 80048a0:	d019      	beq.n	80048d6 <__d2b+0x5e>
 80048a2:	a802      	add	r0, sp, #8
 80048a4:	f840 8d08 	str.w	r8, [r0, #-8]!
 80048a8:	f7ff fe06 	bl	80044b8 <__lo0bits>
 80048ac:	9b00      	ldr	r3, [sp, #0]
 80048ae:	b148      	cbz	r0, 80048c4 <__d2b+0x4c>
 80048b0:	9a01      	ldr	r2, [sp, #4]
 80048b2:	f1c0 0120 	rsb	r1, r0, #32
 80048b6:	fa02 f101 	lsl.w	r1, r2, r1
 80048ba:	430b      	orrs	r3, r1
 80048bc:	40c2      	lsrs	r2, r0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	9201      	str	r2, [sp, #4]
 80048c2:	e000      	b.n	80048c6 <__d2b+0x4e>
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	9b01      	ldr	r3, [sp, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf14      	ite	ne
 80048cc:	2102      	movne	r1, #2
 80048ce:	2101      	moveq	r1, #1
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	6139      	str	r1, [r7, #16]
 80048d4:	e007      	b.n	80048e6 <__d2b+0x6e>
 80048d6:	a801      	add	r0, sp, #4
 80048d8:	f7ff fdee 	bl	80044b8 <__lo0bits>
 80048dc:	9b01      	ldr	r3, [sp, #4]
 80048de:	2101      	movs	r1, #1
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	6139      	str	r1, [r7, #16]
 80048e4:	3020      	adds	r0, #32
 80048e6:	b134      	cbz	r4, 80048f6 <__d2b+0x7e>
 80048e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80048ec:	4404      	add	r4, r0
 80048ee:	6034      	str	r4, [r6, #0]
 80048f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80048f4:	e009      	b.n	800490a <__d2b+0x92>
 80048f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80048fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80048fe:	6030      	str	r0, [r6, #0]
 8004900:	6918      	ldr	r0, [r3, #16]
 8004902:	f7ff fdb9 	bl	8004478 <__hi0bits>
 8004906:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800490a:	6028      	str	r0, [r5, #0]
 800490c:	4638      	mov	r0, r7
 800490e:	b002      	add	sp, #8
 8004910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004914 <_calloc_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	fb02 f401 	mul.w	r4, r2, r1
 800491a:	4621      	mov	r1, r4
 800491c:	f000 f854 	bl	80049c8 <_malloc_r>
 8004920:	4605      	mov	r5, r0
 8004922:	b118      	cbz	r0, 800492c <_calloc_r+0x18>
 8004924:	4622      	mov	r2, r4
 8004926:	2100      	movs	r1, #0
 8004928:	f7fe f93f 	bl	8002baa <memset>
 800492c:	4628      	mov	r0, r5
 800492e:	bd38      	pop	{r3, r4, r5, pc}

08004930 <_free_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	4605      	mov	r5, r0
 8004934:	2900      	cmp	r1, #0
 8004936:	d044      	beq.n	80049c2 <_free_r+0x92>
 8004938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800493c:	1f0c      	subs	r4, r1, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	bfb8      	it	lt
 8004942:	18e4      	addlt	r4, r4, r3
 8004944:	f000 fa17 	bl	8004d76 <__malloc_lock>
 8004948:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <_free_r+0x94>)
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	4611      	mov	r1, r2
 800494e:	b913      	cbnz	r3, 8004956 <_free_r+0x26>
 8004950:	6063      	str	r3, [r4, #4]
 8004952:	6014      	str	r4, [r2, #0]
 8004954:	e030      	b.n	80049b8 <_free_r+0x88>
 8004956:	42a3      	cmp	r3, r4
 8004958:	d90d      	bls.n	8004976 <_free_r+0x46>
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	18a0      	adds	r0, r4, r2
 800495e:	4283      	cmp	r3, r0
 8004960:	bf01      	itttt	eq
 8004962:	6818      	ldreq	r0, [r3, #0]
 8004964:	685b      	ldreq	r3, [r3, #4]
 8004966:	1812      	addeq	r2, r2, r0
 8004968:	6022      	streq	r2, [r4, #0]
 800496a:	6063      	str	r3, [r4, #4]
 800496c:	600c      	str	r4, [r1, #0]
 800496e:	e023      	b.n	80049b8 <_free_r+0x88>
 8004970:	42a2      	cmp	r2, r4
 8004972:	d803      	bhi.n	800497c <_free_r+0x4c>
 8004974:	4613      	mov	r3, r2
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	2a00      	cmp	r2, #0
 800497a:	d1f9      	bne.n	8004970 <_free_r+0x40>
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	1819      	adds	r1, r3, r0
 8004980:	42a1      	cmp	r1, r4
 8004982:	d10b      	bne.n	800499c <_free_r+0x6c>
 8004984:	6821      	ldr	r1, [r4, #0]
 8004986:	4401      	add	r1, r0
 8004988:	1858      	adds	r0, r3, r1
 800498a:	4282      	cmp	r2, r0
 800498c:	6019      	str	r1, [r3, #0]
 800498e:	d113      	bne.n	80049b8 <_free_r+0x88>
 8004990:	6810      	ldr	r0, [r2, #0]
 8004992:	6852      	ldr	r2, [r2, #4]
 8004994:	4401      	add	r1, r0
 8004996:	6019      	str	r1, [r3, #0]
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	e00d      	b.n	80049b8 <_free_r+0x88>
 800499c:	d902      	bls.n	80049a4 <_free_r+0x74>
 800499e:	230c      	movs	r3, #12
 80049a0:	602b      	str	r3, [r5, #0]
 80049a2:	e009      	b.n	80049b8 <_free_r+0x88>
 80049a4:	6821      	ldr	r1, [r4, #0]
 80049a6:	1860      	adds	r0, r4, r1
 80049a8:	4282      	cmp	r2, r0
 80049aa:	bf01      	itttt	eq
 80049ac:	6810      	ldreq	r0, [r2, #0]
 80049ae:	6852      	ldreq	r2, [r2, #4]
 80049b0:	1809      	addeq	r1, r1, r0
 80049b2:	6021      	streq	r1, [r4, #0]
 80049b4:	6062      	str	r2, [r4, #4]
 80049b6:	605c      	str	r4, [r3, #4]
 80049b8:	4628      	mov	r0, r5
 80049ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049be:	f000 b9db 	b.w	8004d78 <__malloc_unlock>
 80049c2:	bd38      	pop	{r3, r4, r5, pc}
 80049c4:	2000012c 	.word	0x2000012c

080049c8 <_malloc_r>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	1ccd      	adds	r5, r1, #3
 80049cc:	f025 0503 	bic.w	r5, r5, #3
 80049d0:	3508      	adds	r5, #8
 80049d2:	2d0c      	cmp	r5, #12
 80049d4:	bf38      	it	cc
 80049d6:	250c      	movcc	r5, #12
 80049d8:	2d00      	cmp	r5, #0
 80049da:	4606      	mov	r6, r0
 80049dc:	db01      	blt.n	80049e2 <_malloc_r+0x1a>
 80049de:	42a9      	cmp	r1, r5
 80049e0:	d902      	bls.n	80049e8 <_malloc_r+0x20>
 80049e2:	230c      	movs	r3, #12
 80049e4:	6033      	str	r3, [r6, #0]
 80049e6:	e046      	b.n	8004a76 <_malloc_r+0xae>
 80049e8:	f000 f9c5 	bl	8004d76 <__malloc_lock>
 80049ec:	4b23      	ldr	r3, [pc, #140]	; (8004a7c <_malloc_r+0xb4>)
 80049ee:	681c      	ldr	r4, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	4621      	mov	r1, r4
 80049f4:	b1a1      	cbz	r1, 8004a20 <_malloc_r+0x58>
 80049f6:	680b      	ldr	r3, [r1, #0]
 80049f8:	1b5b      	subs	r3, r3, r5
 80049fa:	d40e      	bmi.n	8004a1a <_malloc_r+0x52>
 80049fc:	2b0b      	cmp	r3, #11
 80049fe:	d903      	bls.n	8004a08 <_malloc_r+0x40>
 8004a00:	600b      	str	r3, [r1, #0]
 8004a02:	18cc      	adds	r4, r1, r3
 8004a04:	50cd      	str	r5, [r1, r3]
 8004a06:	e01e      	b.n	8004a46 <_malloc_r+0x7e>
 8004a08:	428c      	cmp	r4, r1
 8004a0a:	bf0b      	itete	eq
 8004a0c:	6863      	ldreq	r3, [r4, #4]
 8004a0e:	684b      	ldrne	r3, [r1, #4]
 8004a10:	6013      	streq	r3, [r2, #0]
 8004a12:	6063      	strne	r3, [r4, #4]
 8004a14:	bf18      	it	ne
 8004a16:	460c      	movne	r4, r1
 8004a18:	e015      	b.n	8004a46 <_malloc_r+0x7e>
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	6849      	ldr	r1, [r1, #4]
 8004a1e:	e7e9      	b.n	80049f4 <_malloc_r+0x2c>
 8004a20:	4c17      	ldr	r4, [pc, #92]	; (8004a80 <_malloc_r+0xb8>)
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	b91b      	cbnz	r3, 8004a2e <_malloc_r+0x66>
 8004a26:	4630      	mov	r0, r6
 8004a28:	f000 f97a 	bl	8004d20 <_sbrk_r>
 8004a2c:	6020      	str	r0, [r4, #0]
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4630      	mov	r0, r6
 8004a32:	f000 f975 	bl	8004d20 <_sbrk_r>
 8004a36:	1c43      	adds	r3, r0, #1
 8004a38:	d018      	beq.n	8004a6c <_malloc_r+0xa4>
 8004a3a:	1cc4      	adds	r4, r0, #3
 8004a3c:	f024 0403 	bic.w	r4, r4, #3
 8004a40:	42a0      	cmp	r0, r4
 8004a42:	d10d      	bne.n	8004a60 <_malloc_r+0x98>
 8004a44:	6025      	str	r5, [r4, #0]
 8004a46:	4630      	mov	r0, r6
 8004a48:	f000 f996 	bl	8004d78 <__malloc_unlock>
 8004a4c:	f104 000b 	add.w	r0, r4, #11
 8004a50:	1d23      	adds	r3, r4, #4
 8004a52:	f020 0007 	bic.w	r0, r0, #7
 8004a56:	1ac3      	subs	r3, r0, r3
 8004a58:	d00e      	beq.n	8004a78 <_malloc_r+0xb0>
 8004a5a:	425a      	negs	r2, r3
 8004a5c:	50e2      	str	r2, [r4, r3]
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
 8004a60:	1a21      	subs	r1, r4, r0
 8004a62:	4630      	mov	r0, r6
 8004a64:	f000 f95c 	bl	8004d20 <_sbrk_r>
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d1eb      	bne.n	8004a44 <_malloc_r+0x7c>
 8004a6c:	230c      	movs	r3, #12
 8004a6e:	6033      	str	r3, [r6, #0]
 8004a70:	4630      	mov	r0, r6
 8004a72:	f000 f981 	bl	8004d78 <__malloc_unlock>
 8004a76:	2000      	movs	r0, #0
 8004a78:	bd70      	pop	{r4, r5, r6, pc}
 8004a7a:	bf00      	nop
 8004a7c:	2000012c 	.word	0x2000012c
 8004a80:	20000128 	.word	0x20000128

08004a84 <__ssputs_r>:
 8004a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a88:	688e      	ldr	r6, [r1, #8]
 8004a8a:	4682      	mov	sl, r0
 8004a8c:	429e      	cmp	r6, r3
 8004a8e:	460c      	mov	r4, r1
 8004a90:	4691      	mov	r9, r2
 8004a92:	4698      	mov	r8, r3
 8004a94:	d83e      	bhi.n	8004b14 <__ssputs_r+0x90>
 8004a96:	898a      	ldrh	r2, [r1, #12]
 8004a98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a9c:	d03a      	beq.n	8004b14 <__ssputs_r+0x90>
 8004a9e:	6825      	ldr	r5, [r4, #0]
 8004aa0:	6909      	ldr	r1, [r1, #16]
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	1a6f      	subs	r7, r5, r1
 8004aa6:	6965      	ldr	r5, [r4, #20]
 8004aa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004aac:	fb95 f5f3 	sdiv	r5, r5, r3
 8004ab0:	1c7b      	adds	r3, r7, #1
 8004ab2:	4443      	add	r3, r8
 8004ab4:	429d      	cmp	r5, r3
 8004ab6:	bf38      	it	cc
 8004ab8:	461d      	movcc	r5, r3
 8004aba:	0553      	lsls	r3, r2, #21
 8004abc:	d50f      	bpl.n	8004ade <__ssputs_r+0x5a>
 8004abe:	4629      	mov	r1, r5
 8004ac0:	f7ff ff82 	bl	80049c8 <_malloc_r>
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	b198      	cbz	r0, 8004af0 <__ssputs_r+0x6c>
 8004ac8:	463a      	mov	r2, r7
 8004aca:	6921      	ldr	r1, [r4, #16]
 8004acc:	f7fe f844 	bl	8002b58 <memcpy>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	81a3      	strh	r3, [r4, #12]
 8004adc:	e013      	b.n	8004b06 <__ssputs_r+0x82>
 8004ade:	462a      	mov	r2, r5
 8004ae0:	f000 f94b 	bl	8004d7a <_realloc_r>
 8004ae4:	4606      	mov	r6, r0
 8004ae6:	b970      	cbnz	r0, 8004b06 <__ssputs_r+0x82>
 8004ae8:	6921      	ldr	r1, [r4, #16]
 8004aea:	4650      	mov	r0, sl
 8004aec:	f7ff ff20 	bl	8004930 <_free_r>
 8004af0:	230c      	movs	r3, #12
 8004af2:	f8ca 3000 	str.w	r3, [sl]
 8004af6:	89a3      	ldrh	r3, [r4, #12]
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295
 8004afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b06:	6126      	str	r6, [r4, #16]
 8004b08:	443e      	add	r6, r7
 8004b0a:	6026      	str	r6, [r4, #0]
 8004b0c:	4646      	mov	r6, r8
 8004b0e:	6165      	str	r5, [r4, #20]
 8004b10:	1bed      	subs	r5, r5, r7
 8004b12:	60a5      	str	r5, [r4, #8]
 8004b14:	4546      	cmp	r6, r8
 8004b16:	bf28      	it	cs
 8004b18:	4646      	movcs	r6, r8
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	4632      	mov	r2, r6
 8004b1e:	6820      	ldr	r0, [r4, #0]
 8004b20:	f000 f90e 	bl	8004d40 <memmove>
 8004b24:	68a3      	ldr	r3, [r4, #8]
 8004b26:	2000      	movs	r0, #0
 8004b28:	1b9b      	subs	r3, r3, r6
 8004b2a:	60a3      	str	r3, [r4, #8]
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	441e      	add	r6, r3
 8004b30:	6026      	str	r6, [r4, #0]
 8004b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004b38 <_svfiprintf_r>:
 8004b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3c:	b09d      	sub	sp, #116	; 0x74
 8004b3e:	9303      	str	r3, [sp, #12]
 8004b40:	898b      	ldrh	r3, [r1, #12]
 8004b42:	4680      	mov	r8, r0
 8004b44:	061c      	lsls	r4, r3, #24
 8004b46:	460d      	mov	r5, r1
 8004b48:	4616      	mov	r6, r2
 8004b4a:	d50d      	bpl.n	8004b68 <_svfiprintf_r+0x30>
 8004b4c:	690b      	ldr	r3, [r1, #16]
 8004b4e:	b95b      	cbnz	r3, 8004b68 <_svfiprintf_r+0x30>
 8004b50:	2140      	movs	r1, #64	; 0x40
 8004b52:	f7ff ff39 	bl	80049c8 <_malloc_r>
 8004b56:	6028      	str	r0, [r5, #0]
 8004b58:	6128      	str	r0, [r5, #16]
 8004b5a:	b918      	cbnz	r0, 8004b64 <_svfiprintf_r+0x2c>
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	f8c8 3000 	str.w	r3, [r8]
 8004b62:	e0cd      	b.n	8004d00 <_svfiprintf_r+0x1c8>
 8004b64:	2340      	movs	r3, #64	; 0x40
 8004b66:	616b      	str	r3, [r5, #20]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b72:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8004d10 <_svfiprintf_r+0x1d8>
 8004b76:	2330      	movs	r3, #48	; 0x30
 8004b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b7c:	4637      	mov	r7, r6
 8004b7e:	463c      	mov	r4, r7
 8004b80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004b84:	b91b      	cbnz	r3, 8004b8e <_svfiprintf_r+0x56>
 8004b86:	ebb7 0906 	subs.w	r9, r7, r6
 8004b8a:	d010      	beq.n	8004bae <_svfiprintf_r+0x76>
 8004b8c:	e003      	b.n	8004b96 <_svfiprintf_r+0x5e>
 8004b8e:	2b25      	cmp	r3, #37	; 0x25
 8004b90:	d0f9      	beq.n	8004b86 <_svfiprintf_r+0x4e>
 8004b92:	4627      	mov	r7, r4
 8004b94:	e7f3      	b.n	8004b7e <_svfiprintf_r+0x46>
 8004b96:	464b      	mov	r3, r9
 8004b98:	4632      	mov	r2, r6
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	f7ff ff71 	bl	8004a84 <__ssputs_r>
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	f000 80a7 	beq.w	8004cf6 <_svfiprintf_r+0x1be>
 8004ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004baa:	444b      	add	r3, r9
 8004bac:	9309      	str	r3, [sp, #36]	; 0x24
 8004bae:	783b      	ldrb	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80a0 	beq.w	8004cf6 <_svfiprintf_r+0x1be>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbc:	9304      	str	r3, [sp, #16]
 8004bbe:	9307      	str	r3, [sp, #28]
 8004bc0:	9205      	str	r2, [sp, #20]
 8004bc2:	9306      	str	r3, [sp, #24]
 8004bc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bc8:	931a      	str	r3, [sp, #104]	; 0x68
 8004bca:	2601      	movs	r6, #1
 8004bcc:	2205      	movs	r2, #5
 8004bce:	7821      	ldrb	r1, [r4, #0]
 8004bd0:	484e      	ldr	r0, [pc, #312]	; (8004d0c <_svfiprintf_r+0x1d4>)
 8004bd2:	f7ff fbad 	bl	8004330 <memchr>
 8004bd6:	1c67      	adds	r7, r4, #1
 8004bd8:	9b04      	ldr	r3, [sp, #16]
 8004bda:	b138      	cbz	r0, 8004bec <_svfiprintf_r+0xb4>
 8004bdc:	4a4b      	ldr	r2, [pc, #300]	; (8004d0c <_svfiprintf_r+0x1d4>)
 8004bde:	463c      	mov	r4, r7
 8004be0:	1a80      	subs	r0, r0, r2
 8004be2:	fa06 f000 	lsl.w	r0, r6, r0
 8004be6:	4318      	orrs	r0, r3
 8004be8:	9004      	str	r0, [sp, #16]
 8004bea:	e7ef      	b.n	8004bcc <_svfiprintf_r+0x94>
 8004bec:	06d9      	lsls	r1, r3, #27
 8004bee:	bf44      	itt	mi
 8004bf0:	2220      	movmi	r2, #32
 8004bf2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bf6:	071a      	lsls	r2, r3, #28
 8004bf8:	bf44      	itt	mi
 8004bfa:	222b      	movmi	r2, #43	; 0x2b
 8004bfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c00:	7822      	ldrb	r2, [r4, #0]
 8004c02:	2a2a      	cmp	r2, #42	; 0x2a
 8004c04:	d003      	beq.n	8004c0e <_svfiprintf_r+0xd6>
 8004c06:	9a07      	ldr	r2, [sp, #28]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	200a      	movs	r0, #10
 8004c0c:	e00b      	b.n	8004c26 <_svfiprintf_r+0xee>
 8004c0e:	9a03      	ldr	r2, [sp, #12]
 8004c10:	1d11      	adds	r1, r2, #4
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	9103      	str	r1, [sp, #12]
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	da10      	bge.n	8004c3c <_svfiprintf_r+0x104>
 8004c1a:	4252      	negs	r2, r2
 8004c1c:	f043 0002 	orr.w	r0, r3, #2
 8004c20:	9207      	str	r2, [sp, #28]
 8004c22:	9004      	str	r0, [sp, #16]
 8004c24:	e00b      	b.n	8004c3e <_svfiprintf_r+0x106>
 8004c26:	4627      	mov	r7, r4
 8004c28:	783b      	ldrb	r3, [r7, #0]
 8004c2a:	3401      	adds	r4, #1
 8004c2c:	3b30      	subs	r3, #48	; 0x30
 8004c2e:	2b09      	cmp	r3, #9
 8004c30:	d803      	bhi.n	8004c3a <_svfiprintf_r+0x102>
 8004c32:	fb00 3202 	mla	r2, r0, r2, r3
 8004c36:	2101      	movs	r1, #1
 8004c38:	e7f5      	b.n	8004c26 <_svfiprintf_r+0xee>
 8004c3a:	b101      	cbz	r1, 8004c3e <_svfiprintf_r+0x106>
 8004c3c:	9207      	str	r2, [sp, #28]
 8004c3e:	783b      	ldrb	r3, [r7, #0]
 8004c40:	2b2e      	cmp	r3, #46	; 0x2e
 8004c42:	d11e      	bne.n	8004c82 <_svfiprintf_r+0x14a>
 8004c44:	787b      	ldrb	r3, [r7, #1]
 8004c46:	2b2a      	cmp	r3, #42	; 0x2a
 8004c48:	d10a      	bne.n	8004c60 <_svfiprintf_r+0x128>
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	3702      	adds	r7, #2
 8004c4e:	1d1a      	adds	r2, r3, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	9203      	str	r2, [sp, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bfb8      	it	lt
 8004c58:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c5c:	9305      	str	r3, [sp, #20]
 8004c5e:	e010      	b.n	8004c82 <_svfiprintf_r+0x14a>
 8004c60:	2300      	movs	r3, #0
 8004c62:	4619      	mov	r1, r3
 8004c64:	9305      	str	r3, [sp, #20]
 8004c66:	1c78      	adds	r0, r7, #1
 8004c68:	240a      	movs	r4, #10
 8004c6a:	4607      	mov	r7, r0
 8004c6c:	783a      	ldrb	r2, [r7, #0]
 8004c6e:	3001      	adds	r0, #1
 8004c70:	3a30      	subs	r2, #48	; 0x30
 8004c72:	2a09      	cmp	r2, #9
 8004c74:	d803      	bhi.n	8004c7e <_svfiprintf_r+0x146>
 8004c76:	fb04 2101 	mla	r1, r4, r1, r2
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e7f5      	b.n	8004c6a <_svfiprintf_r+0x132>
 8004c7e:	b103      	cbz	r3, 8004c82 <_svfiprintf_r+0x14a>
 8004c80:	9105      	str	r1, [sp, #20]
 8004c82:	2203      	movs	r2, #3
 8004c84:	7839      	ldrb	r1, [r7, #0]
 8004c86:	4822      	ldr	r0, [pc, #136]	; (8004d10 <_svfiprintf_r+0x1d8>)
 8004c88:	f7ff fb52 	bl	8004330 <memchr>
 8004c8c:	b140      	cbz	r0, 8004ca0 <_svfiprintf_r+0x168>
 8004c8e:	2340      	movs	r3, #64	; 0x40
 8004c90:	ebcb 0000 	rsb	r0, fp, r0
 8004c94:	fa03 f000 	lsl.w	r0, r3, r0
 8004c98:	9b04      	ldr	r3, [sp, #16]
 8004c9a:	3701      	adds	r7, #1
 8004c9c:	4318      	orrs	r0, r3
 8004c9e:	9004      	str	r0, [sp, #16]
 8004ca0:	7839      	ldrb	r1, [r7, #0]
 8004ca2:	2206      	movs	r2, #6
 8004ca4:	481b      	ldr	r0, [pc, #108]	; (8004d14 <_svfiprintf_r+0x1dc>)
 8004ca6:	1c7e      	adds	r6, r7, #1
 8004ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cac:	f7ff fb40 	bl	8004330 <memchr>
 8004cb0:	b188      	cbz	r0, 8004cd6 <_svfiprintf_r+0x19e>
 8004cb2:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <_svfiprintf_r+0x1e0>)
 8004cb4:	b933      	cbnz	r3, 8004cc4 <_svfiprintf_r+0x18c>
 8004cb6:	9b03      	ldr	r3, [sp, #12]
 8004cb8:	3307      	adds	r3, #7
 8004cba:	f023 0307 	bic.w	r3, r3, #7
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	9303      	str	r3, [sp, #12]
 8004cc2:	e014      	b.n	8004cee <_svfiprintf_r+0x1b6>
 8004cc4:	ab03      	add	r3, sp, #12
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	462a      	mov	r2, r5
 8004cca:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <_svfiprintf_r+0x1e4>)
 8004ccc:	a904      	add	r1, sp, #16
 8004cce:	4640      	mov	r0, r8
 8004cd0:	f7fe f804 	bl	8002cdc <_printf_float>
 8004cd4:	e007      	b.n	8004ce6 <_svfiprintf_r+0x1ae>
 8004cd6:	ab03      	add	r3, sp, #12
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	462a      	mov	r2, r5
 8004cdc:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <_svfiprintf_r+0x1e4>)
 8004cde:	a904      	add	r1, sp, #16
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	f7fe fab5 	bl	8003250 <_printf_i>
 8004ce6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004cea:	4682      	mov	sl, r0
 8004cec:	d003      	beq.n	8004cf6 <_svfiprintf_r+0x1be>
 8004cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf0:	4453      	add	r3, sl
 8004cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf4:	e742      	b.n	8004b7c <_svfiprintf_r+0x44>
 8004cf6:	89ab      	ldrh	r3, [r5, #12]
 8004cf8:	065b      	lsls	r3, r3, #25
 8004cfa:	d401      	bmi.n	8004d00 <_svfiprintf_r+0x1c8>
 8004cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cfe:	e001      	b.n	8004d04 <_svfiprintf_r+0x1cc>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	b01d      	add	sp, #116	; 0x74
 8004d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0a:	bf00      	nop
 8004d0c:	0800519c 	.word	0x0800519c
 8004d10:	080051a2 	.word	0x080051a2
 8004d14:	080051a6 	.word	0x080051a6
 8004d18:	08002cdd 	.word	0x08002cdd
 8004d1c:	08004a85 	.word	0x08004a85

08004d20 <_sbrk_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4c06      	ldr	r4, [pc, #24]	; (8004d3c <_sbrk_r+0x1c>)
 8004d24:	2300      	movs	r3, #0
 8004d26:	4605      	mov	r5, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	f000 f856 	bl	8004ddc <_sbrk>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_sbrk_r+0x1a>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_sbrk_r+0x1a>
 8004d38:	602b      	str	r3, [r5, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	200007d4 	.word	0x200007d4

08004d40 <memmove>:
 8004d40:	4288      	cmp	r0, r1
 8004d42:	b510      	push	{r4, lr}
 8004d44:	eb01 0302 	add.w	r3, r1, r2
 8004d48:	d801      	bhi.n	8004d4e <memmove+0xe>
 8004d4a:	1e42      	subs	r2, r0, #1
 8004d4c:	e00b      	b.n	8004d66 <memmove+0x26>
 8004d4e:	4298      	cmp	r0, r3
 8004d50:	d2fb      	bcs.n	8004d4a <memmove+0xa>
 8004d52:	1881      	adds	r1, r0, r2
 8004d54:	1ad2      	subs	r2, r2, r3
 8004d56:	42d3      	cmn	r3, r2
 8004d58:	d004      	beq.n	8004d64 <memmove+0x24>
 8004d5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d62:	e7f8      	b.n	8004d56 <memmove+0x16>
 8004d64:	bd10      	pop	{r4, pc}
 8004d66:	4299      	cmp	r1, r3
 8004d68:	d004      	beq.n	8004d74 <memmove+0x34>
 8004d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d72:	e7f8      	b.n	8004d66 <memmove+0x26>
 8004d74:	bd10      	pop	{r4, pc}

08004d76 <__malloc_lock>:
 8004d76:	4770      	bx	lr

08004d78 <__malloc_unlock>:
 8004d78:	4770      	bx	lr

08004d7a <_realloc_r>:
 8004d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7c:	4607      	mov	r7, r0
 8004d7e:	4615      	mov	r5, r2
 8004d80:	460e      	mov	r6, r1
 8004d82:	b921      	cbnz	r1, 8004d8e <_realloc_r+0x14>
 8004d84:	4611      	mov	r1, r2
 8004d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d8a:	f7ff be1d 	b.w	80049c8 <_malloc_r>
 8004d8e:	b91a      	cbnz	r2, 8004d98 <_realloc_r+0x1e>
 8004d90:	f7ff fdce 	bl	8004930 <_free_r>
 8004d94:	4628      	mov	r0, r5
 8004d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d98:	f000 f815 	bl	8004dc6 <_malloc_usable_size_r>
 8004d9c:	4285      	cmp	r5, r0
 8004d9e:	d90e      	bls.n	8004dbe <_realloc_r+0x44>
 8004da0:	4629      	mov	r1, r5
 8004da2:	4638      	mov	r0, r7
 8004da4:	f7ff fe10 	bl	80049c8 <_malloc_r>
 8004da8:	4604      	mov	r4, r0
 8004daa:	b150      	cbz	r0, 8004dc2 <_realloc_r+0x48>
 8004dac:	4631      	mov	r1, r6
 8004dae:	462a      	mov	r2, r5
 8004db0:	f7fd fed2 	bl	8002b58 <memcpy>
 8004db4:	4631      	mov	r1, r6
 8004db6:	4638      	mov	r0, r7
 8004db8:	f7ff fdba 	bl	8004930 <_free_r>
 8004dbc:	e001      	b.n	8004dc2 <_realloc_r+0x48>
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004dc6 <_malloc_usable_size_r>:
 8004dc6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	bfbe      	ittt	lt
 8004dce:	1809      	addlt	r1, r1, r0
 8004dd0:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8004dd4:	18c0      	addlt	r0, r0, r3
 8004dd6:	3804      	subs	r0, #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <_sbrk>:
 8004ddc:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <_sbrk+0x14>)
 8004dde:	4602      	mov	r2, r0
 8004de0:	6819      	ldr	r1, [r3, #0]
 8004de2:	b909      	cbnz	r1, 8004de8 <_sbrk+0xc>
 8004de4:	4903      	ldr	r1, [pc, #12]	; (8004df4 <_sbrk+0x18>)
 8004de6:	6019      	str	r1, [r3, #0]
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	4402      	add	r2, r0
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	4770      	bx	lr
 8004df0:	20000130 	.word	0x20000130
 8004df4:	200007d8 	.word	0x200007d8

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
